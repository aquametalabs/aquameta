# Aquameta Bootloader Config
#
# This boot config starts the bootloader, which is a fallback mode, used when
# Aquameta doesn't have a conf/boot.toml config file.  It can also be started
# with `./aquameta bootloader`, or `./aquameta -c conf/bootloader.toml` which
# are equivalent.
#
# The bootloader is a bootstrapping GUI, used to create a conf/boot.toml file
# during "normal" boot.  It lets the user setup a boot database including
# setting up a new PostgreSQL server instance, connecting to an existing
# PostgreSQL instance, configuring which HTTP Server settings to boot with,
# etc.

[Database]
    Mode = "embedded"               # { embedded | standalone } - if embedded, aquameta will create a new PostgreSQL
                                    # server instance. If "standalone", use an existing server managed by Aquameta.

    # the path where the embedded postgresql instance will be installed (if applicable)
    EmbeddedPostgresRuntimePath = "./bootloader.db"

    # connection settings
    Host = "127.0.0.1"              # host
    Port = 9876                     # the port the postgresql server will open (we're not using the default 5432)
    DatabaseName = "bootloader"     # name of the database to be created where Aquameta will be installed

    # authentication settings
    Role = "bootloader"
    Password = "bootloader"         # FIXME - we probably want to use peer auth over unix sockets instead if possible?


[AquametaUser]                      # Record to create in `endpoint.user` table
    Name = "Bootloader"
    Email = ""



[HTTPServer]
    Protocol = "http"               # { http | https }
    IP = "127.0.0.1"                # IP to bind to
    Port = "8000"                   # Port to open

    # only used w/ https
    # SSLCertificateFile = "certificates/server.crt"
    # SSLKeyFile = "certificates/server.key"

    StartupURL = "/boot"            # URL to open at startup


[PGFS]
    MountDirectory = "pgfs/"
