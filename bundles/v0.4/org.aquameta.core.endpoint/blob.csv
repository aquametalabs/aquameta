\\x11cad8a3eb1bbdf32dee2745075f5c13d3664e4d6c4374b6396d6fdffe5a13fc	/*******************************************************************************\n * Datum.js\n *\n * Created by Aquameta Labs, an open source company in Portland Oregon, USA.\n * Company: http://aquameta.com/\n * Project: http://blog.aquameta.com/\n ******************************************************************************/\ndefine(['/jQuery.min.js'], function($, undefined) {\n    'use strict';\n    var AQ = AQ || {};\n\n\n\n    AQ.uuid = function() {\n        var d = new Date().getTime();\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = (d + Math.random()*16)%16 | 0;\n            d = Math.floor(d/16);\n            return (c=='x' ? r : (r&0x7|0x8)).toString(16);\n        });\n    }\n\n\n\n    function query_options( options ) {\n\n        var keys = [];\n\n        if (typeof options != 'undefined') {\n\n            // Meta data defaults to true;\n            if (typeof options.meta_data == 'undefined') {\n                options.meta_data = true;\n            }\n\n            // Map the keys of the options object to an array of encoded url components\n            Object.keys(options).sort().map(function(key_name) {\n\n                var key = options[key_name];\n\n                switch(key_name) {\n\n                    case 'where':\n                        // where: { name: 'column_name', op: '=', value: 'value' }\n                        // where: [{ name: 'column_name', op: '=', value: 'value' }]\n                        if (typeof key.length == 'undefined') key = [key];\n\n                        return key.map(function(where) {\n                            return 'where=' + encodeURIComponent(JSON.stringify(where));\n                        }).join('&');\n\n                    case 'order_by':\n                        // So many possibilities...\n                        // order_by: '-?column_name'\n                        // order_by: ['-?column_name']\n                        // order_by: { 'column_name': 'asc|desc' }\n                        // order_by: [{ 'column_name': 'asc|desc' }]\n                        // order_by: { column: 'column_name', direction: 'asc|desc' }\n                        // order_by: [{ column: 'column_name', direction: 'asc|desc' }]\n                        if (typeof key.length == 'undefined') key = [key];\n\n                        return key_name + '=' + encodeURIComponent(key.map(function(o,i) {\n                            return ((typeof o.direction != 'undefined' && o.direction != 'asc') ? '-' : '') + o.column;\n                        }).join(','));\n\n                    case 'limit':\n                        // limit: number\n                    case 'offset':\n                        // offset: number\n                        var parsedNum = parseInt(key);\n                        if (!isNaN(parsedNum)) {\n                            return key_name + '=' + parsedNum;\n                        }\n                        return;\n\n                    case 'evented':\n                        return 'session_id=' + encodeURIComponent(JSON.stringify(key));\n\n                    case 'meta_data':\n                    case 'args':\n                    case 'exclude':\n                    case 'include':\n                        return key_name + '=' + encodeURIComponent(JSON.stringify(key));\n                }\n            }\n\n            // Remove all undefined elements of the array\n            ).forEach(function(e) {\n                if (typeof e != 'undefined') keys.push(e);\n            });\n        }\n\n        // Return the query string by joining the array with &'s\n        return keys.length ? '?' + keys.join('&') : '?';\n    }\n\n\n\n    function Endpoint( url, evented ) {\n\n        this.url = url;\n        this.evented = evented;\n        this.cache = {};\n\n        var event_session_id;\n\n        // Auth session\n        this.auth_session_id = get_session_cookie();\n\n        function get_session_cookie() {\n            return document.cookie.replace(/(?:(?:^|.*;\\s*)SESSION\\s*\\=\\s*([^;]*).*$)|^.*$/, "$1");\n        }\n\n        var socket;\n        var socket_requests = {};\n        var open_functions = [];\n        var retries = 0;\n        var MAX_NUMBER_RETRIES = 5;\n\n        // this.settings.evented can be string or boolean\n        if(this.evented != 'no' && !this.evented) {\n\n            try {\n                //open_functions.push(connect_session);\n                connect_socket(this.evented == 'yes' || this.evented == true);\n            }\n            catch(err) {\n\n                if(this.evented == 'yes' || this.evented == true) {\n                    console.error('Websocket connection refused:', err);\n                    throw 'Websocket connection refused';\n                }\n\n                // if this.settings.evented == 'try', fail silently\n           \n            }\n        }\n\n        function connect_socket(fail_loudly) {\n\n            if (socket_connected()) {\n                return socket;\n            }\n\n            socket = new WebSocket('ws://' + location.host + url + '/event');\n            \n            socket.onopen = function (event) {\n                console.log('socket opened', this.readyState);\n                open_functions.forEach(function(e) { e.call(this); });\n            };\n            \n            socket.onerror = function(event) {\n                if (fail_loudly) {\n                    // TODO?\n                    console.error('really mad', event);\n                }\n                console.log('socket error', event);\n            };\n\n            socket.onclose = function(event) {\n                console.log('socket closed', event.code);\n                if (event.code == 1006) {\n                    retries++;\n                    if (retries < MAX_NUMBER_RETRIES) {\n                        // Try to reconnect\n                        connect_socket();\n                    }\n                }\n            };\n            \n            socket.onmessage = function (event) {\n                var response = JSON.parse(event.data);\n                console.log('message received', response);\n\n                switch (response.method) {\n                    case 'response':\n                        if (typeof response.request_id == 'undefined') {\n                            throw 'Websocket response is unidentifiable';\n                        }\n\n                        if (typeof socket_requests[response.request_id] == 'undefined') {\n                            // This will get hit if we sent the same request multiple times and more than one responsded\n                            // console.error('Websocket request not found', response);\n                        }\n                        else {\n                            console.log('resolving promise', response.request_id, socket_requests[response.request_id].tries);\n\n                            // Clear timeout\n                            clearTimeout(socket_requests[response.request_id].timeout_id);\n\n                            // Resolve promise\n                            socket_requests[response.request_id].resolve(response.data);\n\n                            // Delete promise from storage\n                            delete socket_requests[response.request_id];\n\n                            console.log('socket requests left to fulful', socket_requests);\n                        }\n                        break;\n                    case 'session_attach':\n                        this.event_session_id = response.session_id;\n                        break;\n\n                    case 'event':\n                        handle_event(JSON.parse(response.data));\n                        break;\n                }\n            };\n\n        }\n\n        function handle_event(event_data) {\n            // Route event\n            switch(event_data.subscription_type) {\n                case 'table':\n                    console.log(event_data.subscription_type + ':' + event_data.operation);\n                    break;\n                case 'column':\n                    console.log(event_data.subscription_type + ':' + event_data.operation);\n                    break;\n                case 'row':\n                    console.log(event_data.subscription_type + ':' + event_data.operation);\n                    break;\n                case 'field':\n                    console.log(event_data.subscription_type + ':' + event_data.operation);\n                    break;\n                default:\n                    break;\n            }\n            // Delete event\n            // endpoint...\n        }\n\n        function connect_session(session_id) {\n\n           if (typeof session_id != 'undefined') {\n               event_session_id = session_id;\n           }\n\n           if (socket_connected() && typeof event_session_id != 'undefined') {\n               socket_send({\n                   method: 'attach',\n                   session_id: event_session_id\n               });\n           }\n\n           else {\n               open_functions.push(connect_session);\n           }\n\n        }\n\n        // Boolean, whether socket is connected or not\n        function socket_connected() {\n\n            if (typeof socket != 'undefined' && typeof socket.readyState != 'undefined') {\n                return socket.readyState == 1;\n            }\n            return false;\n\n        }\n\n        // Grabs current connection and sends method\n        function socket_send( data ) {\n            return new Promise(function(resolve, reject) {\n\n                console.log('socket_send', data);\n                data.request_id = data.request_id || AQ.uuid();\n\n                var tries = 0;\n                if (typeof socket_requests[data.request_id] != 'undefined') {\n                    tries = socket_requests[data.request_id].tries + 1;\n                    clearTimeout(socket_requests[data.request_id].timeout_id);\n                }\n\n                socket_requests[data.request_id] = {\n                    resolve: function(response) { resolve(response); },\n                    reject: function(reason) { reject(reason); },\n                    timeout_id: setTimeout(function(data) {\n                            socket_send(data).then(\n                                function(r) { resolve(r); },\n                                function(e) { reject(e); }\n                            );\n                        }.bind(this, data), 300),\n                    tries: tries\n                };\n                socket.send(JSON.stringify(data)); \n            });\n        }\n\n        var resource = function( method, meta_id, args, data ) {\n\n            args = args || {};\n\n            // Get use_cache from args or data\n            var use_cache = false;\n            if (typeof data == 'undefined') {\n                if (typeof args.use_cache != 'undefined') {\n                    use_cache = args.use_cache;\n                }\n            }\n            else {\n                if (typeof data.use_cache != 'undefined') {\n                    use_cache = data.use_cache;\n                }\n            }\n\n            var current_session_cookie =  get_session_cookie();\n            if (this.auth_session_id != current_session_cookie) {\n                // session has changed\n                // update auth_session_id\n                this.auth_session_id = current_session_cookie;\n                // dump cache\n                this.cache = {};\n            }\n\n            // If this connection is evented, get event_session_id\n            if (this.evented) {\n                args.session_id = event_session_id;\n            }\n\n            // URLs\n            var id_url = meta_id.to_url(true); // ID part of the URL only\n            var url_without_query = this.url + id_url;\n            var url_with_query = url_without_query + query_options(args);\n\n            // Check cache\n            if (use_cache && url_with_query in this.cache) {\n                return this.cache[url_with_query];\n            }\n\n            // Send websocket method if this connection uses websocket\n            if (socket_connected()) {\n                // function values_to_string( obj ) {  // FIXME: Why in the HECK does this not work in Firefox 23.0.1??\n                var values_to_string = function ( obj ) {\n                    if (typeof obj == 'undefined' || obj == null) {\n                        return null;\n                    }\n                    var o = {};\n                    Object.keys(obj).forEach(function(key) {\n                        o[key] = JSON.stringify(obj[key]);\n                    });\n                    return JSON.stringify(o);\n                }\n\n                var request = socket_send({\n                    version: '0.2',\n                    method: 'request',\n                    verb: method,\n                    uri: id_url,\n                    query: values_to_string(args),\n                    data: values_to_string(data)\n                });\n\n            }\n            else {\n\n                // If query string is too long, upgrade GET method to POST\n                if(method == 'GET' && (location.host + url_with_query).length > 1000) {\n                    method = 'POST';\n                }\n\n                // This makes the uWSGI server send back json errors\n                var headers = new Headers();\n                headers.append('Content-Type', 'application/json');\n\n                // Settings object to send with 'fetch' method\n                var init_obj = {\n                    method: method,\n                    headers: headers,\n                    credentials: 'same-origin'\n                };\n\n                // Don't add data on GET requests\n                if (method != 'GET') {\n                    init_obj.body = JSON.stringify(data);\n                }\n\n                var request = fetch(method == 'GET' ? url_with_query : url_without_query, init_obj);\n            }\n\n            request = request.then(function(response) {\n\n                // JSON was returned from WebSocket\n                if (typeof response.json == 'undefined') {\n                    // TODO: ? Unfortunately this has no HTTP status like the result of fetch\n                    //console.log('i am the response', response);\n                    return response;\n                }\n\n                // Request object was returned from fetch\n\n                // Read json stream\n                var json = response.json();\n\n                if (response.status >= 200 && response.status < 300) {\n                    return json;\n                }\n\n                // If bad request (code 300 or higher), reject promise\n                return json.then(Promise.reject.bind(Promise));\n\n            }).catch(function(error) {\n\n                // Log error in collapsed group\n                console.groupCollapsed(method, error.status_code, error.title);\n                // console.error(url_without_query);\n                if ('message' in error) {\n                    console.error(error.message);\n                }\n                console.groupEnd();\n                throw error.title;\n\n            });\n\n            // Check cache for GET/POST\n            if (use_cache && (method == 'GET' || method == 'POST')) {\n                this.cache[url_with_query] = request;\n            }\n\n            return request;\n        }\n\n        return {\n            url: this.url,\n            connect_session: connect_session,\n            get: function( meta_id, args )        { return resource.call(this, 'GET', meta_id, args); }.bind(this),\n            post: function( meta_id, data )       { return resource.call(this, 'POST', meta_id, {}, data); }.bind(this),\n            patch: function( meta_id, data )      { return resource.call(this, 'PATCH', meta_id, {}, data); }.bind(this),\n            delete: function( meta_id, args )     { return resource.call(this, 'DELETE', meta_id, args); }.bind(this)\n        };\n    }\n\n    /*--------------------------------- * Database * ---------------------------------*/\n    AQ.Database = function( url, settings, ready_callback ) {\n        this.settings = settings;\n\n        // Not sure which name is better\n        this.endpoint = this.connection = new Endpoint(url, this.settings.evented);\n        if (this.settings.evented != 'no') {\n            this.schema('event').function('session_create').then(function(result) {\n                this.endpoint.connect_session(result.get('session_create'));\n            }.bind(this));\n        }\n        this.query_string = query_options;\n    };\n    AQ.Database.prototype.constructor = AQ.Database;\n    AQ.Database.prototype.schema = function( name ) { return new AQ.Schema(this, name); };\n\n    /*--------------------------------- * Schema * ---------------------------------*/\n    AQ.Schema = function( database, name ) {\n        this.database = database;\n        this.name = name;\n        this.id = { name: this.name };\n    };\n    AQ.Schema.prototype.constructor = AQ.Schema;\n    AQ.Schema.prototype.relation = function( name )         { return new AQ.Relation(this, name); };\n    AQ.Schema.prototype.table = function( name )            { return new AQ.Table(this, name); };\n    AQ.Schema.prototype.view = function( name )             { return new AQ.View(this, name); };\n    AQ.Schema.prototype.function = function( identifier, args, options )   {\n\n        // Function identifier (name and parameter list)\n        if (typeof identifier == 'object') {\n            var name = identifier.name;\n            var parameter_type_list = identifier.parameters;\n        }\n        // Selecting a function without specifying the parameters\n        else {\n            var name = identifier;\n        }\n\n        options = options || {};\n\n        // Arguments\n        options.args = {};\n\n        // `args = undefined` will pass no arguments into the server-side function\n        if (typeof args != 'undefined') {\n\n            // some_function?args={ kwargs: {} } -- Key/value object\n            if (!(args instanceof Array) && args instanceof Object) {\n                options.args.kwargs = args;\n            }\n            // some_function?args={ vals: [] } -- Array\n            else {\n                if (!(args instanceof Array)) {\n                    // Regular value is placed into array\n                    args = [ args ];\n                }\n                options.args.vals = args;\n            }\n        }\n\n        var fn = new AQ.Function(this, name, parameter_type_list);\n\n        return this.database.endpoint.get(fn, options)\n            .then(function(response) {\n\n                if (!response) {\n                    throw 'Empty response';\n                }\n                else if (!response.result.length) {\n                    throw 'Result set empty';\n                }\n                if(response.result.length > 1) {\n                    return new AQ.FunctionResultSet(fn, response);\n                }\n                return new AQ.FunctionResult(fn, response);\n\n            }.bind(this)).catch(function(err) {\n                throw 'Function call request failed: ' + err;\n            });\n    };\n\n    /*--------------------------------- * Relation * ---------------------------------*/\n    AQ.Relation = function( schema, name ) {\n        this.schema = schema;\n        this.name = name;\n        this.id = { schema_id: this.schema.id, name: this.name };\n    };\n    AQ.Relation.prototype.constructor = AQ.Relation;\n    AQ.Relation.prototype.to_url = function( id_only ) {\n        return id_only ? '/relation/' + this.schema.name + '/' + this.name :\n              this.schema.database.endpoint.url + '/relation/' + this.schema.name + '/' + this.name;\n    };\n    AQ.Relation.prototype.column = function( name ) {\n        return new AQ.Column(this, name);\n    };\n    AQ.Relation.prototype.rows = function( options ) {\n\n        return this.schema.database.endpoint.get(this, options)\n            .then(function(rows) {\n\n                if (rows == null) {\n                    throw 'Empty response';\n                }/*\n                else if (rows.result.length < 1) {\n                    throw 'No rows returned';\n                }*/\n                return new AQ.Rowset(this, rows, options);\n\n            }.bind(this)).catch(function(err) {\n                throw 'Rows request failed: ' + err;\n            });\n    };\n    AQ.Relation.prototype.row = function() {\n\n        // Multiple different ways to call 'row' function\n\n        // 1. Calling with Options object\n        if (typeof arguments[0] == 'object') {\n\n            var obj = arguments[0];\n            var args = arguments[1] || {};\n\n            // AQ.Relation.row({ where: { column_name: 'column_name', op: '=', value: 'value' } })\n            // Maybe it should be this one: AQ.Relation.row({ where: { column_name: value } })\n            if (typeof obj.where != 'undefined') {\n                args.where = obj.where;\n            }\n            // AQ.Relation.row({ column_name: 'column_name', op: '=', value: 'value' })\n            // Maybe it should be this one: AQ.Relation.row({ column_name: value })\n            else {\n                args.where = obj;\n            }\n\n        }\n        // 2. Calling with column_name and value\n        else if (typeof arguments[0] == 'string') {\n\n            // AQ.Relation.row(column_name, value [, options_obj])\n            var name = arguments[0];\n            var value = arguments[1];\n            var args = arguments[2] || {};\n\n            args.where = { name: name, op: '=', value: value };\n\n        }\n        // 3. Calling AQ.Relation.row() without arguments\n        else {\n            var args = {};\n        }\n\n        return this.schema.database.endpoint.get(this, args)\n            .then(function(row) {\n\n                if (row == null) {\n                    throw 'Empty response';\n                }\n                else if (row.result.length == 0) {\n                    throw 'No row returned';\n                }\n                else if (row.result.length > 1) {\n                    throw 'Multiple rows returned';\n                }\n                return new AQ.Row(this, row);\n\n            }.bind(this)).catch(function(err) {\n                throw 'Row request failed: ' + err;\n            });\n    };\n\n    /*--------------------------------- * Table * ---------------------------------*/\n    AQ.Table = function( schema, name ) {\n        this.schema = schema;\n        this.name = name;\n        this.id = { schema_id: this.schema.id, name: this.name };\n    };\n    AQ.Table.prototype = Object.create(AQ.Relation.prototype);\n    AQ.Table.prototype.constructor = AQ.Table;\n    AQ.Table.prototype.insert = function( data ) {\n\n        if (typeof data == 'undefined') {\n            // table.insert({}) is equivalent to table.insert()\n            // both will insert default values\n            data = {};\n        }\n\n        // Return inserted row promise\n        return this.schema.database.endpoint.patch(this, data)\n            .then(function(inserted_row) {\n\n                if (inserted_row == null) {\n                    throw 'Empty response';\n                }\n                if (typeof data.length != 'undefined' && data.length > 1) {\n                    return new AQ.Rowset(this, inserted_row, null);\n                }\n                return new AQ.Row(this, inserted_row);\n\n            }.bind(this)).catch(function(err) {\n                throw 'Insert failed: ' + err;\n            });\n\n    };\n\n    /*--------------------------------- * View * ---------------------------------*/\n    AQ.View = function( schema, name ) {\n        this.schema = schema;\n        this.name = name;\n        this.id = { schema_id: this.schema.id, name: this.name };\n    };\n    AQ.View.prototype = Object.create(AQ.Relation.prototype);\n    AQ.View.prototype.constructor = AQ.View;\n\n    /*--------------------------------- * Rowset * ---------------------------------*/\n    AQ.Rowset = function( relation, response, server_arguments ) {\n        this.relation = relation;\n        this.schema = relation.schema;\n        this.columns = response.columns || null;\n        this.pk_column_name = response.pk || null;\n        this.rows = response.result;\n        this.length = response.result.length;\n        this.server_arguments = server_arguments || {};\n    };\n    AQ.Rowset.prototype.constructor = AQ.Rowset;\n    AQ.Rowset.prototype.map = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.Row(this.relation, { columns: this.columns, pk: this.pk_column_name, result: [ row ] });\n        }.bind(this)).map(fn);\n    };\n    AQ.Rowset.prototype.forEach = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.Row(this.relation, { columns: this.columns, pk: this.pk_column_name, result: [ row ] });\n        }.bind(this)).forEach(fn);\n    };\n    AQ.Rowset.prototype.reload = function() {\n        return this.relation.rows(this.server_arguments);\n    };\n\n    /**\n     * Call AQ.Rowset.where with (where_obj) or use shorthand notation (field, value) - filter results programmatically\n     *\n     * @param {Object} where_obj\n     * @param {[Boolean]} return_first\n     * @param {[Boolean]} async\n     *\n     * OR\n     *\n     * @param {String} field\n     * @param {Any} value\n     * @param {[Boolean]} return_first\n     * @param {[Boolean]} async\n     *\n     * @returns {Promise}\n     */\n    AQ.Rowset.prototype.where = function() {\n\n        var first = false, async = true, where_obj = {};\n        if (typeof arguments[0] == 'object') {\n             // AQ.Rowset.where(where_obj [, return_first] [, async]);\n            where_obj = arguments[0];\n            var field = where_obj.field;\n            var value = where_obj.value;\n            if (arguments.length > 1) first = arguments[1];\n            if (arguments.length > 2) async = arguments[2];\n\n        }\n        else if (typeof arguments[0] == 'string' && arguments.length > 1) {\n            // AQ.Rowset.where(field, value [, return_first] [, async]);\n            var field = arguments[0];\n            var value = arguments[1];\n            if (arguments.length > 2) first = arguments[2];\n            if (arguments.length > 3) async = arguments[3];\n        }\n\n        return new Promise(function(resolve, reject) {\n\n            // TODO lots of logic here\n            // The new rowset that is returned must be in the same format as the response from the server\n\n            if (first) {\n                for (var i = 0; i < this.rows.length; i++) {\n                    if (this.rows[i].row[field] == value) {\n                        resolve(new AQ.Row(this.relation, { columns: this.columns, result: [ this.rows[i] ] }));\n                    }\n                }\n                reject('could not find ' + field + ' ' + value);\n            }\n            else {\n                var return_rowset = [];\n                for (var i = 0; i < this.rows.length; i++) {\n                    if (this.rows[i].row[field] == value) {\n                        return_rowset.push(this.rows[i]);\n                    }\n                }\n                resolve(new AQ.Rowset(this.relation, { columns: this.columns, result: return_rowset }));\n            }\n\n\n            // 2\n\n            // maybe we don't need to search the entire row and instead we return the first item found\n/*\n            var new_rowset = _.filter(this.rows, function(el) {\n                //return AQ.equals.call(this, el[field], val);\n            });\n*/\n            if (new_rowset.length == 1) {\n                return new AQ.Row(this.relation, new_rowset);\n            }\n            else if (new_rowset.length > 1) {\n                throw 'Multiple Rows Returned';\n            }\n\n            // if row does not exist\n            return null;\n\n        }.bind(this));\n\n    };\n    AQ.Rowset.prototype.order_by = function( column, direction ) {\n/*\n        var ordered = _.sortBy(this.rows, function(el) {\n            return el.row[column];\n        });\n*/\n        if (direction !== 'asc') {\n            ordered.reverse();\n        }\n        return new AQ.Rowset(this.relation, { columns: this.columns, result: ordered });\n    };\n    AQ.Rowset.prototype.limit = function( lim ) {\n        if (lim <= 0) {\n            throw 'Bad limit';\n        }\n        return new AQ.Rowset(this.relation, { columns: this.columns, result: this.rows.slice(0, lim) });\n    };\n    AQ.Rowset.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.relation.schema.database;\n\n        var values = this.map(function(row) {\n            return row.get(self_column_name);\n        });\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: 'in',\n            value: values\n        });\n\n\n        return db.schema(schema_name).relation(relation_name).rows(options);\n    };\n    AQ.Rowset.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.relation.schema.database;\n\n        var values = this.map(function(row) {\n            return row.get(self_column_name);\n        });\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: 'in',\n            value: values\n        });\n\n        return db.schema(schema_name).relation(relation_name).row(options);\n\n    };\n\n    /*--------------------------------- * Row * ---------------------------------*/\n    AQ.Row = function( relation, response ) {\n        this.relation = relation;\n        this.schema = relation.schema;\n        this.row_data = response.result[0].row;\n\n        this.cached_fields = {};\n        this.columns = response.columns || null;\n        this.pk_column_name = null;\n        this.pk_value = null;\n        this.id = null;\n        this.to_url = function() {\n            console.error('You must call a row with "meta_data: true" in order to use the to_url function');\n            throw 'Datum.js: Programming Error';\n        };\n\n        if (typeof response.pk != 'undefined') {\n            this.pk_column_name = response.pk;\n            this.pk_value = this.get(this.pk_column_name);\n            // this.id = {"pk_column_id":{"relation_id":{"schema_id":{"name":this.schema.name},"name":this.relation.name},"name":this.pk_column_name},"pk_value": this.pk_value}\n            this.id = {\n                pk_column_id: {\n                    relation_id: this.relation.id,\n                    name: this.pk_column_name\n                },\n                pk_value: this.pk_value\n            };\n\n            this.to_url = function( id_only ) {\n                return id_only ? '/row/' + this.relation.schema.name + '/' + this.relation.name + '/' + /*JSON.stringify(this.pk_value)*/ this.pk_value :\n                    this.relation.schema.database.endpoint.url + '/row/' + this.relation.schema.name + '/' + this.relation.name + '/' + /*JSON.stringify(this.pk_value)*/ this.pk_value;\n           };\n\n        }\n    };\n    AQ.Row.prototype = {\n        constructor: AQ.Row,\n        get: function( name )           { return this.row_data[name]; },\n        set: function( name, value )    { this.row_data[name] = value; return this; },\n        to_string: function()           { return JSON.stringify(this.row_data); },\n        clone: function()               { return new AQ.Row(this.relation, { columns: this.columns, pk: this.pk_column_name, result: [{ row: this.row_data }]}); },\n        field: function( name ) {\n            if (typeof this.cached_fields[name] == 'undefined') {\n                this.cached_fields[name] = new AQ.Field(this, name, name === this.pk_column_name);\n            }\n            return this.cached_fields[name];\n        },\n        fields: function() {\n            if (this.columns != null) {\n                return this.columns.map(function(c) {\n                    return this.field(c.name);\n                }.bind(this));\n            }\n            return null;\n        }\n    };\n    AQ.Row.prototype.update = function() {\n        return this.relation.schema.database.endpoint.patch(this, this.row_data)\n            .then(function(response) {\n\n                if(response == null) {\n                    throw 'Empty response';\n                }\n                return this;\n\n            }.bind(this)).catch(function(err) {\n                throw 'Update failed: ' + err;\n            });\n    };\n    AQ.Row.prototype.delete = function() { \n        return this.relation.schema.database.endpoint.delete(this)\n            .then(function(response) {\n\n                if(response == null) {\n                    throw 'Empty response';\n                }\n\n            }).catch(function(err) {\n                throw 'Delete failed: ' + err;\n            });\n    };\n    AQ.Row.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options )  {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.relation.schema.database;\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: '=',\n            value: this.get(self_column_name)\n        });\n\n        return db.schema(schema_name).relation(relation_name).rows(options);\n    };\n    AQ.Row.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.relation.schema.database;\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: '=',\n            value: this.get(self_column_name)\n        });\n\n        return db.schema(schema_name).relation(relation_name).row(options);\n    };\n\n    /*--------------------------------- * Column * ---------------------------------*/\n    AQ.Column = function( relation, name ) {\n        this.relation = relation;\n        this.name = name;\n        this.id = { relation_id: relation.id, name: name };\n    };\n    AQ.Column.prototype.constructor = AQ.Column;\n\n    /*--------------------------------- * Field * ---------------------------------*/\n    AQ.Field = function( row, name, pk ) {\n        this.row = row;\n        this.column = new AQ.Column(row.relation, name);\n        this.is_primary_key = pk;\n        this.name = name;\n        this.value = row.get(name);\n        this.id = { row_id: this.row.id, column_id: this.column.id };\n        this.to_url = function( id_only ) {\n            if (this.row.pk_value == null) {\n                console.error('You must call a row with "meta_data: true" in order to use the to_url function');\n                throw 'Datum.js: Programming Error';\n            }\n            return id_only ? '/field/' + this.row.relation.schema.name + '/' + this.row.relation.name + '/' + /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value + '/' + this.column.name :\n                this.row.relation.schema.database.endpoint.url + '/field/' + this.row.relation.schema.name + '/' + this.row.relation.name + '/' + /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value + '/' + this.column.name;\n            };\n    };\n    AQ.Field.prototype = {\n        constructor: AQ.Field,\n        get: function()          { return this.row.get(this.name); },\n        set: function(value)     { this.value = value; return this.row.set(this.name, value); },\n        update: function()       { return this.row.update(); } // TODO: This is wrong\n    };\n\n    /*--------------------------------- * Function * ---------------------------------*/\n    AQ.Function = function( schema, name, args ) {\n        this.schema = schema;\n        this.name = name;\n\n        if(args instanceof Array) {\n            this.args = '{' + args.join(',') + '}';\n        }\n        else {\n            this.args = args;\n        }\n\n        this.id = { schema_id: this.schema.id, name: this.name, args: this.args };\n        this.to_url = function( id_only ) {\n           var base_url = id_only ? '' : this.schema.database.endpoint.url;\n           if (typeof this.args != 'undefined') {\n               return base_url + '/function/' + this.schema.name + '/' + this.name + '/' + this.args;\n           }\n           return base_url + '/function/' + this.schema.name + '/' + this.name;\n        };\n    };\n    AQ.Function.prototype.constructor = AQ.Function;\n\n    /*--------------------------------- * Function Result * ---------------------------------*/\n    AQ.FunctionResult = function( fn, response ) {\n        this.function = fn;\n        this.schema = fn.schema;\n        this.row_data = response.result[0].row;\n        this.rows = response.result;\n        this.columns = response.columns;\n    };\n    AQ.FunctionResult.prototype = {\n        constructor: AQ.FunctionResult,\n        get: function( name )           { return this.row_data[name]; },\n        to_string: function()           { return JSON.stringify(this.row_data); }\n    };\n    AQ.FunctionResult.prototype.map = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n        }.bind(this)).map(fn);\n    };\n    AQ.FunctionResult.prototype.forEach = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n        }.bind(this)).forEach(fn);\n    };\n    AQ.FunctionResult.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options )  {\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.function.schema.database;\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: '=',\n            value: this.get(self_column_name)\n        });\n\n        return db.schema(schema_name).relation(relation_name).rows(options);\n    };\n    AQ.FunctionResult.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.function.schema.database;\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: '=',\n            value: this.get(self_column_name)\n        });\n\n        return db.schema(schema_name).relation(relation_name).row(options);\n    };\n\n    /*--------------------------------- * Function Result Set * ---------------------------------*/\n    AQ.FunctionResultSet = function( fn, response ) {\n        this.function = fn;\n        this.schema = fn.schema;\n        this.columns = response.columns;\n        this.rows = response.result;\n    };\n    AQ.FunctionResultSet.prototype.constructor = AQ.FunctionResultSet;\n    AQ.FunctionResultSet.prototype.map = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n        }.bind(this)).map(fn);\n    };\n    AQ.FunctionResultSet.prototype.forEach = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n        }.bind(this)).forEach(fn);\n    };\n    AQ.FunctionResultSet.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.function.schema.database;\n\n        var values = this.map(function(row) {\n            return row.get(self_column_name);\n        });\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: 'in',\n            value: values\n        });\n\n        return db.schema(schema_name).relation(relation_name).rows(options);\n    };\n    AQ.FunctionResultSet.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.function.schema.database;\n\n        var values = this.map(function(row) {\n            return row.get(self_column_name);\n        });\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: 'in',\n            value: values\n        });\n\n        return db.schema(schema_name).relation(relation_name).row(options);\n\n    };\n\n    window.AQ = AQ;\n    return AQ;\n});
\\x130415ed0d43d81b25c3a756ba592c708c44def5005f7e13bda3d6dbcec037ea	/socket.io-client-1.4.8.min.js
\\x13b69601f6af144216715b0d12e485764e58a0afcac904f8925f490db783818a	/*******************************************************************************\n * Datum.js\n *\n * Created by Aquameta Labs, an open source company in Portland Oregon, USA.\n * Company: http://aquameta.com/\n * Project: http://blog.aquameta.com/\n ******************************************************************************/\ndefine(['/jQuery.min.js'], function($, undefined) {\n    'use strict';\n    var AQ = AQ || {};\n\n\n\n    AQ.uuid = function() {\n        var d = new Date().getTime();\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = (d + Math.random()*16)%16 | 0;\n            d = Math.floor(d/16);\n            return (c=='x' ? r : (r&0x7|0x8)).toString(16);\n        });\n    }\n\n\n\n    function query_options( options ) {\n\n        var keys = [];\n\n        if (typeof options != 'undefined') {\n\n            // Meta data defaults to true;\n            if (typeof options.meta_data == 'undefined') {\n                options.meta_data = true;\n            }\n\n            // Map the keys of the options object to an array of encoded url components\n            Object.keys(options).sort().map(function(key_name) {\n\n                var key = options[key_name];\n\n                switch(key_name) {\n\n                    case 'where':\n                        // where: { name: 'column_name', op: '=', value: 'value' }\n                        // where: [{ name: 'column_name', op: '=', value: 'value' }]\n                        if (typeof key.length == 'undefined') key = [key];\n\n                        return key.map(function(where) {\n                            return 'where=' + encodeURIComponent(JSON.stringify(where));\n                        }).join('&');\n\n                    case 'order_by':\n                        // So many possibilities...\n                        // order_by: '-?column_name'\n                        // order_by: ['-?column_name']\n                        // order_by: { 'column_name': 'asc|desc' }\n                        // order_by: [{ 'column_name': 'asc|desc' }]\n                        // order_by: { column: 'column_name', direction: 'asc|desc' }\n                        // order_by: [{ column: 'column_name', direction: 'asc|desc' }]\n                        if (typeof key.length == 'undefined') key = [key];\n\n                        return key_name + '=' + encodeURIComponent(key.map(function(o,i) {\n                            return ((typeof o.direction != 'undefined' && o.direction != 'asc') ? '-' : '') + o.column;\n                        }).join(','));\n\n                    case 'limit':\n                        // limit: number\n                    case 'offset':\n                        // offset: number\n                        var parsedNum = parseInt(key);\n                        if (!isNaN(parsedNum)) {\n                            return key_name + '=' + parsedNum;\n                        }\n                        return;\n\n                    case 'evented':\n                        return 'session_id=' + encodeURIComponent(JSON.stringify(key));\n\n                    case 'meta_data':\n                    case 'args':\n                    case 'exclude':\n                    case 'include':\n                        return key_name + '=' + encodeURIComponent(JSON.stringify(key));\n                }\n            }\n\n            // Remove all undefined elements of the array\n            ).forEach(function(e) {\n                if (typeof e != 'undefined') keys.push(e);\n            });\n        }\n\n        // Return the query string by joining the array with &'s\n        return keys.length ? '?' + keys.join('&') : '?';\n    }\n\n\n\n    function Endpoint( url, evented ) {\n\n        this.url = url;\n        this.evented = evented;\n        this.cache = {};\n\n        var event_session_id;\n\n        // Auth session\n        this.auth_session_id = get_session_cookie();\n\n        function get_session_cookie() {\n            return document.cookie.replace(/(?:(?:^|.*;\\s*)SESSION\\s*\\=\\s*([^;]*).*$)|^.*$/, "$1");\n        }\n\n        var socket;\n        var socket_requests = {};\n        var open_functions = [];\n        var retries = 0;\n        var MAX_NUMBER_RETRIES = 5;\n\n        // this.settings.evented can be string or boolean\n        if(this.evented != 'no' && !this.evented) {\n\n            try {\n                //open_functions.push(connect_session);\n                connect_socket(this.evented == 'yes' || this.evented == true);\n            }\n            catch(err) {\n\n                if(this.evented == 'yes' || this.evented == true) {\n                    console.error('Websocket connection refused:', err);\n                    throw 'Websocket connection refused';\n                }\n\n                // if this.settings.evented == 'try', fail silently\n           \n            }\n        }\n\n        function connect_socket(fail_loudly) {\n\n            if (socket_connected()) {\n                return socket;\n            }\n\n            socket = new WebSocket('ws://' + location.host + url + '/event');\n            \n            socket.onopen = function (event) {\n                console.log('socket opened', this.readyState);\n                open_functions.forEach(function(e) { e.call(this); });\n            };\n            \n            socket.onerror = function(event) {\n                if (fail_loudly) {\n                    // TODO?\n                    console.error('really mad', event);\n                }\n                console.log('socket error', event);\n            };\n\n            socket.onclose = function(event) {\n                console.log('socket closed', event.code);\n                if (event.code == 1006) {\n                    retries++;\n                    if (retries < MAX_NUMBER_RETRIES) {\n                        // Try to reconnect\n                        connect_socket();\n                    }\n                }\n            };\n            \n            socket.onmessage = function (event) {\n                var response = JSON.parse(event.data);\n                console.log('message received', response);\n\n                switch (response.method) {\n                    case 'response':\n                        if (typeof response.request_id == 'undefined') {\n                            throw 'Websocket response is unidentifiable';\n                        }\n\n                        if (typeof socket_requests[response.request_id] == 'undefined') {\n                            // This will get hit if we sent the same request multiple times and more than one responsded\n                            // console.error('Websocket request not found', response);\n                        }\n                        else {\n                            console.log('resolving promise', response.request_id, socket_requests[response.request_id].tries);\n\n                            // Clear timeout\n                            clearTimeout(socket_requests[response.request_id].timeout_id);\n\n                            // Resolve promise\n                            socket_requests[response.request_id].resolve(response.data);\n\n                            // Delete promise from storage\n                            delete socket_requests[response.request_id];\n\n                            console.log('socket requests left to fulful', socket_requests);\n                        }\n                        break;\n                    case 'session_attach':\n                        this.event_session_id = response.session_id;\n                        break;\n\n                    case 'event':\n                        handle_event(JSON.parse(response.data));\n                        break;\n                }\n            };\n\n        }\n\n        function handle_event(event_data) {\n            // Route event\n            switch(event_data.subscription_type) {\n                case 'table':\n                    console.log(event_data.subscription_type + ':' + event_data.operation);\n                    break;\n                case 'column':\n                    console.log(event_data.subscription_type + ':' + event_data.operation);\n                    break;\n                case 'row':\n                    console.log(event_data.subscription_type + ':' + event_data.operation);\n                    break;\n                case 'field':\n                    console.log(event_data.subscription_type + ':' + event_data.operation);\n                    break;\n                default:\n                    break;\n            }\n            // Delete event\n            // endpoint...\n        }\n\n        function connect_session(session_id) {\n\n           if (typeof session_id != 'undefined') {\n               event_session_id = session_id;\n           }\n\n           if (socket_connected() && typeof event_session_id != 'undefined') {\n               socket_send({\n                   method: 'attach',\n                   session_id: event_session_id\n               });\n           }\n\n           else {\n               open_functions.push(connect_session);\n           }\n\n        }\n\n        // Boolean, whether socket is connected or not\n        function socket_connected() {\n\n            if (typeof socket != 'undefined' && typeof socket.readyState != 'undefined') {\n                return socket.readyState == 1;\n            }\n            return false;\n\n        }\n\n        // Grabs current connection and sends method\n        function socket_send( data ) {\n            return new Promise(function(resolve, reject) {\n\n                console.log('socket_send', data);\n                data.request_id = data.request_id || AQ.uuid();\n\n                var tries = 0;\n                if (typeof socket_requests[data.request_id] != 'undefined') {\n                    tries = socket_requests[data.request_id].tries + 1;\n                    clearTimeout(socket_requests[data.request_id].timeout_id);\n                }\n\n                socket_requests[data.request_id] = {\n                    resolve: function(response) { resolve(response); },\n                    reject: function(reason) { reject(reason); },\n                    timeout_id: setTimeout(function(data) {\n                            socket_send(data).then(\n                                function(r) { resolve(r); },\n                                function(e) { reject(e); }\n                            );\n                        }.bind(this, data), 300),\n                    tries: tries\n                };\n                socket.send(JSON.stringify(data)); \n            });\n        }\n\n        var resource = function( method, meta_id, args, data ) {\n\n            args = args || {};\n\n\t\t\t// console.log(method, meta_id, meta_id.to_url(), args, data);\n            $('.debugger3').trigger('debugger_request', { method: method, meta_id: meta_id, args: args, data: data });\n\n            // Get use_cache from args or data\n            var use_cache = false;\n            if (typeof data == 'undefined') {\n                if (typeof args.use_cache != 'undefined') {\n                    use_cache = args.use_cache;\n                }\n            }\n            else {\n                if (typeof data.use_cache != 'undefined') {\n                    use_cache = data.use_cache;\n                }\n            }\n\n            var current_session_cookie =  get_session_cookie();\n            if (this.auth_session_id != current_session_cookie) {\n                // session has changed\n                // update auth_session_id\n                this.auth_session_id = current_session_cookie;\n                // dump cache\n                this.cache = {};\n            }\n\n            // If this connection is evented, get event_session_id\n            if (this.evented) {\n                args.session_id = event_session_id;\n            }\n\n            // URLs\n            var id_url = meta_id.to_url(true); // ID part of the URL only\n            var url_without_query = this.url + id_url;\n            var url_with_query = url_without_query + query_options(args);\n\n            // Check cache\n            if (use_cache && url_with_query in this.cache) {\n                return this.cache[url_with_query];\n            }\n\n            // Send websocket method if this connection uses websocket\n            if (socket_connected()) {\n                // function values_to_string( obj ) {  // FIXME: Why in the HECK does this not work in Firefox 23.0.1??\n                var values_to_string = function ( obj ) {\n                    if (typeof obj == 'undefined' || obj == null) {\n                        return null;\n                    }\n                    var o = {};\n                    Object.keys(obj).forEach(function(key) {\n                        o[key] = JSON.stringify(obj[key]);\n                    });\n                    return JSON.stringify(o);\n                }\n\n                var request = socket_send({\n                    version: '0.3',\n                    method: 'request',\n                    verb: method,\n                    uri: id_url,\n                    query: values_to_string(args),\n                    data: values_to_string(data)\n                });\n\n            }\n            else {\n\n                // If query string is too long, upgrade GET method to POST\n                if(method == 'GET' && (location.host + url_with_query).length > 1000) {\n                    method = 'POST';\n                }\n\n                // This makes the uWSGI server send back json errors\n                var headers = new Headers();\n                headers.append('Content-Type', 'application/json');\n\n                // Settings object to send with 'fetch' method\n                var init_obj = {\n                    method: method,\n                    headers: headers,\n                    credentials: 'same-origin'\n                };\n\n                // Don't add data on GET requests\n                if (method != 'GET') {\n                    init_obj.body = JSON.stringify(data);\n                }\n\n                var request = fetch(method == 'GET' ? url_with_query : url_without_query, init_obj);\n            }\n\n            request = request.then(function(response) {\n\n                // JSON was returned from WebSocket\n                if (typeof response.json == 'undefined') {\n                    // TODO: ? Unfortunately this has no HTTP status like the result of fetch\n                    //console.log('i am the response', response);\n                    return response;\n                }\n\n                // Request object was returned from fetch\n\n                // Read json stream\n                var json = response.json();\n\n                if (response.status >= 200 && response.status < 300) {\n                    return json;\n                }\n\n                // If bad request (code 300 or higher), reject promise\n                return json.then(Promise.reject.bind(Promise));\n\n            }).catch(function(server_error) {\n\t\t\t\t// Construct real Error object\n\t\t\t\tvar err = new Error(server_error.message.message);\n\t\t\t\terr.metadata = server_error.message || {};\n\t\t\t\terr.metadata.status_code = server_error.status_code;\n\t\t\t\terr.metadata.title = server_error.title;\n\n                // Log error in collapsed group\n                console.groupCollapsed(\n\t\t\t\t\tmethod,\n\t\t\t\t\tserver_error.status_code,\n\t\t\t\t\tserver_error.title\n\t\t\t\t);\n                // console.error(url_without_query);\n                if ('message' in server_error) {\n\t\t\t\t\tconsole.error(method == 'GET' ? url_with_query : url_without_query);\n                    console.error(server_error.message.message);\n                    console.error(server_error.message.context);\n                }\n                console.groupEnd();\n\n                throw err;\n\n            });\n\n            // Check cache for GET/POST\n            if (use_cache && (method == 'GET' || method == 'POST')) {\n                this.cache[url_with_query] = request;\n            }\n\n            return request;\n        }\n\n        return {\n            url: this.url,\n            connect_session: connect_session,\n            get: function( meta_id, args )        { return resource.call(this, 'GET', meta_id, args); }.bind(this),\n            post: function( meta_id, data )       { return resource.call(this, 'POST', meta_id, {}, data); }.bind(this),\n            patch: function( meta_id, data )      { return resource.call(this, 'PATCH', meta_id, {}, data); }.bind(this),\n            delete: function( meta_id, args )     { return resource.call(this, 'DELETE', meta_id, args); }.bind(this)\n        };\n    }\n\n    /*--------------------------------- * Database * ---------------------------------*/\n    AQ.Database = function( url, settings, ready_callback ) {\n        this.settings = settings;\n\n        // Not sure which name is better\n        this.endpoint = this.connection = new Endpoint(url, this.settings.evented);\n        if (this.settings.evented != 'no') {\n            this.schema('event').function('session_create').then(function(result) {\n                this.endpoint.connect_session(result.get('session_create'));\n            }.bind(this));\n        }\n        this.query_string = query_options;\n    };\n    AQ.Database.prototype.constructor = AQ.Database;\n    AQ.Database.prototype.schema = function( name ) { return new AQ.Schema(this, name); };\n\n    /*--------------------------------- * Schema * ---------------------------------*/\n    AQ.Schema = function( database, name ) {\n        this.database = database;\n        this.name = name;\n        this.id = { name: this.name };\n    };\n    AQ.Schema.prototype.constructor = AQ.Schema;\n    AQ.Schema.prototype.relation = function( name )         { return new AQ.Relation(this, name); };\n    AQ.Schema.prototype.table = function( name )            { return new AQ.Table(this, name); };\n    AQ.Schema.prototype.view = function( name )             { return new AQ.View(this, name); };\n    AQ.Schema.prototype.function = function( identifier, args, options )   {\n\n        // Function identifier (name and parameter list)\n        if (typeof identifier == 'object') {\n            var name = identifier.name;\n            var parameter_type_list = identifier.parameters;\n        }\n        // Selecting a function without specifying the parameters\n        else {\n            var name = identifier;\n        }\n\n        options = options || {};\n\n        // Arguments\n        options.args = {};\n\n        // `args = undefined` will pass no arguments into the server-side function\n        if (typeof args != 'undefined') {\n\n            // some_function?args={ kwargs: {} } -- Key/value object\n            if (!(args instanceof Array) && args instanceof Object) {\n                options.args.kwargs = args;\n            }\n            // some_function?args={ vals: [] } -- Array\n            else {\n                if (!(args instanceof Array)) {\n                    // Regular value is placed into array\n                    args = [ args ];\n                }\n                options.args.vals = args;\n            }\n        }\n\n        var fn = new AQ.Function(this, name, parameter_type_list);\n\n        return this.database.endpoint.get(fn, options)\n            .then(function(response) {\n\n                if (!response) {\n                    throw 'Empty response';\n                }\n\t\t\t\t/* sometimes results can be empty and that is ok.\n                else if (!response.result.length) {\n                    throw 'Result set empty';\n                }\n\t\t\t\t*/\n                if(response.result.length != 1) {\n                    return new AQ.FunctionResultSet(fn, response);\n                }\n                return new AQ.FunctionResult(fn, response);\n\n            }.bind(this)).catch(function(err) {\n\t\t\t\tthrow err;\n            });\n    };\n\n    /*--------------------------------- * Relation * ---------------------------------*/\n    AQ.Relation = function( schema, name ) {\n        this.schema = schema;\n        this.name = name;\n        this.id = { schema_id: this.schema.id, name: this.name };\n    };\n    AQ.Relation.prototype.constructor = AQ.Relation;\n    AQ.Relation.prototype.to_url = function( id_only ) {\n        return id_only ? '/relation/' + this.schema.name + '/' + this.name :\n              this.schema.database.endpoint.url + '/relation/' + this.schema.name + '/' + this.name;\n    };\n    AQ.Relation.prototype.column = function( name ) {\n        return new AQ.Column(this, name);\n    };\n    AQ.Relation.prototype.rows = function( options ) {\n\n        return this.schema.database.endpoint.get(this, options)\n            .then(function(rows) {\n\n                if (rows == null) {\n                    throw 'Empty response';\n                }/*\n                else if (rows.result.length < 1) {\n                    throw 'No rows returned';\n                }*/\n                return new AQ.Rowset(this, rows, options);\n\n            }.bind(this)).catch(function(err) {\n                throw 'Rows request failed: ' + err;\n            });\n    };\n    AQ.Relation.prototype.row = function() {\n\n        // Multiple different ways to call 'row' function\n\n        // 1. Calling with Options object\n        if (typeof arguments[0] == 'object') {\n\n            var obj = arguments[0];\n            var args = arguments[1] || {};\n\n            // AQ.Relation.row({ where: { column_name: 'column_name', op: '=', value: 'value' } })\n            // Maybe it should be this one: AQ.Relation.row({ where: { column_name: value } })\n            if (typeof obj.where != 'undefined') {\n                args.where = obj.where;\n            }\n            // AQ.Relation.row({ column_name: 'column_name', op: '=', value: 'value' })\n            // Maybe it should be this one: AQ.Relation.row({ column_name: value })\n            else {\n                args.where = obj;\n            }\n\n        }\n        // 2. Calling with column_name and value\n        else if (typeof arguments[0] == 'string') {\n\n            // AQ.Relation.row(column_name, value [, options_obj])\n            var name = arguments[0];\n            var value = arguments[1];\n            var args = arguments[2] || {};\n\n            args.where = { name: name, op: '=', value: value };\n\n        }\n        // 3. Calling AQ.Relation.row() without arguments\n        else {\n            var args = {};\n        }\n\n        return this.schema.database.endpoint.get(this, args)\n            .then(function(row) {\n\n                if (row == null) {\n                    throw 'Empty response';\n\t\t\t\t} \n                else if (row.result.length == 0) {\n\t\t\t\t\treturn null; // throw 'No row returned';\n\t\t\t\t}\n                else if (row.result.length > 1) {\n                    throw 'Multiple rows returned';\n                }\n                return new AQ.Row(this, row);\n\n            }.bind(this)).catch(function(err) {\n                throw 'Row request failed: ' + err;\n            });\n    };\n\n    /*--------------------------------- * Table * ---------------------------------*/\n    AQ.Table = function( schema, name ) {\n        this.schema = schema;\n        this.name = name;\n        this.id = { schema_id: this.schema.id, name: this.name };\n    };\n    AQ.Table.prototype = Object.create(AQ.Relation.prototype);\n    AQ.Table.prototype.constructor = AQ.Table;\n    AQ.Table.prototype.insert = function( data ) {\n\n        if (typeof data == 'undefined') {\n            // table.insert({}) is equivalent to table.insert()\n            // both will insert default values\n            data = {};\n        }\n\n        // Return inserted row promise\n        return this.schema.database.endpoint.patch(this, data)\n            .then(function(inserted_row) {\n\n                if (inserted_row == null) {\n                    throw 'Empty response';\n                }\n                if (typeof data.length != 'undefined' && data.length > 1) {\n                    return new AQ.Rowset(this, inserted_row, null);\n                }\n                return new AQ.Row(this, inserted_row);\n\n            }.bind(this)).catch(function(err) {\n                throw 'Insert failed: ' + err;\n            });\n\n    };\n\n    /*--------------------------------- * View * ---------------------------------*/\n    AQ.View = function( schema, name ) {\n        this.schema = schema;\n        this.name = name;\n        this.id = { schema_id: this.schema.id, name: this.name };\n    };\n    AQ.View.prototype = Object.create(AQ.Relation.prototype);\n    AQ.View.prototype.constructor = AQ.View;\n\n    /*--------------------------------- * Rowset * ---------------------------------*/\n    AQ.Rowset = function( relation, response, server_arguments ) {\n        this.relation = relation;\n        this.schema = relation.schema;\n        this.columns = response.columns || null;\n        this.pk_column_name = response.pk || null;\n        this.rows = response.result;\n        this.length = response.result.length;\n        this.server_arguments = server_arguments || {};\n    };\n    AQ.Rowset.prototype.constructor = AQ.Rowset;\n    AQ.Rowset.prototype.map = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.Row(this.relation, { columns: this.columns, pk: this.pk_column_name, result: [ row ] });\n        }.bind(this)).map(fn);\n    };\n    AQ.Rowset.prototype.forEach = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.Row(this.relation, { columns: this.columns, pk: this.pk_column_name, result: [ row ] });\n        }.bind(this)).forEach(fn);\n    };\n    AQ.Rowset.prototype.reload = function() {\n        return this.relation.rows(this.server_arguments);\n    };\n\n    /**\n     * Call AQ.Rowset.where with (where_obj) or use shorthand notation (field, value) - filter results programmatically\n     *\n     * @param {Object} where_obj\n     * @param {[Boolean]} return_first\n     * @param {[Boolean]} async\n     *\n     * OR\n     *\n     * @param {String} field\n     * @param {Any} value\n     * @param {[Boolean]} return_first\n     * @param {[Boolean]} async\n     *\n     * @returns {Promise}\n     */\n    AQ.Rowset.prototype.where = function() {\n\n        var first = false, async = true, where_obj = {};\n        if (typeof arguments[0] == 'object') {\n             // AQ.Rowset.where(where_obj [, return_first] [, async]);\n            where_obj = arguments[0];\n            var field = where_obj.field;\n            var value = where_obj.value;\n            if (arguments.length > 1) first = arguments[1];\n            if (arguments.length > 2) async = arguments[2];\n\n        }\n        else if (typeof arguments[0] == 'string' && arguments.length > 1) {\n            // AQ.Rowset.where(field, value [, return_first] [, async]);\n            var field = arguments[0];\n            var value = arguments[1];\n            if (arguments.length > 2) first = arguments[2];\n            if (arguments.length > 3) async = arguments[3];\n        }\n\n        return new Promise(function(resolve, reject) {\n\n            // TODO lots of logic here\n            // The new rowset that is returned must be in the same format as the response from the server\n\n            if (first) {\n                for (var i = 0; i < this.rows.length; i++) {\n                    if (this.rows[i].row[field] == value) {\n                        resolve(new AQ.Row(this.relation, { columns: this.columns, result: [ this.rows[i] ] }));\n                    }\n                }\n                reject('could not find ' + field + ' ' + value);\n            }\n            else {\n                var return_rowset = [];\n                for (var i = 0; i < this.rows.length; i++) {\n                    if (this.rows[i].row[field] == value) {\n                        return_rowset.push(this.rows[i]);\n                    }\n                }\n                resolve(new AQ.Rowset(this.relation, { columns: this.columns, result: return_rowset }));\n            }\n\n\n            // 2\n\n            // maybe we don't need to search the entire row and instead we return the first item found\n/*\n            var new_rowset = _.filter(this.rows, function(el) {\n                //return AQ.equals.call(this, el[field], val);\n            });\n*/\n            if (new_rowset.length == 1) {\n                return new AQ.Row(this.relation, new_rowset);\n            }\n            else if (new_rowset.length > 1) {\n                throw 'Multiple Rows Returned';\n            }\n\n            // if row does not exist\n            return null;\n\n        }.bind(this));\n\n    };\n    AQ.Rowset.prototype.order_by = function( column, direction ) {\n/*\n        var ordered = _.sortBy(this.rows, function(el) {\n            return el.row[column];\n        });\n*/\n        if (direction !== 'asc') {\n            ordered.reverse();\n        }\n        return new AQ.Rowset(this.relation, { columns: this.columns, result: ordered });\n    };\n    AQ.Rowset.prototype.limit = function( lim ) {\n        if (lim <= 0) {\n            throw 'Bad limit';\n        }\n        return new AQ.Rowset(this.relation, { columns: this.columns, result: this.rows.slice(0, lim) });\n    };\n    AQ.Rowset.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.relation.schema.database;\n\n        var values = this.map(function(row) {\n            return row.get(self_column_name);\n        });\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: 'in',\n            value: values\n        });\n\n\n        return db.schema(schema_name).relation(relation_name).rows(options);\n    };\n    AQ.Rowset.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.relation.schema.database;\n\n        var values = this.map(function(row) {\n            return row.get(self_column_name);\n        });\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: 'in',\n            value: values\n        });\n\n        return db.schema(schema_name).relation(relation_name).row(options);\n\n    };\n\n    /*--------------------------------- * Row * ---------------------------------*/\n    AQ.Row = function( relation, response ) {\n        this.relation = relation;\n        this.schema = relation.schema;\n        this.row_data = response.result[0].row;\n\n        this.cached_fields = {};\n        this.columns = response.columns || null;\n        this.pk_column_name = null;\n        this.pk_value = null;\n        this.id = null;\n        this.to_url = function() {\n            console.error('You must call a row with "meta_data: true" in order to use the to_url function');\n            throw 'Datum.js: Programming Error';\n        };\n\n        if (typeof response.pk != 'undefined') {\n            this.pk_column_name = response.pk;\n            this.pk_value = this.get(this.pk_column_name);\n            // this.id = {"pk_column_id":{"relation_id":{"schema_id":{"name":this.schema.name},"name":this.relation.name},"name":this.pk_column_name},"pk_value": this.pk_value}\n            this.id = {\n                pk_column_id: {\n                    relation_id: this.relation.id,\n                    name: this.pk_column_name\n                },\n                pk_value: this.pk_value\n            };\n\n            this.to_url = function( id_only ) {\n                return id_only ? '/row/' + this.relation.schema.name + '/' + this.relation.name + '/' + /*JSON.stringify(this.pk_value)*/ this.pk_value :\n                    this.relation.schema.database.endpoint.url + '/row/' + this.relation.schema.name + '/' + this.relation.name + '/' + /*JSON.stringify(this.pk_value)*/ this.pk_value;\n           };\n\n        }\n    };\n    AQ.Row.prototype = {\n        constructor: AQ.Row,\n        get: function( name )           { return this.row_data[name]; },\n        set: function( name, value )    { this.row_data[name] = value; return this; },\n        to_string: function()           { return JSON.stringify(this.row_data); },\n        clone: function()               { return new AQ.Row(this.relation, { columns: this.columns, pk: this.pk_column_name, result: [{ row: this.row_data }]}); },\n        field: function( name ) {\n            if (typeof this.cached_fields[name] == 'undefined') {\n                this.cached_fields[name] = new AQ.Field(this, name, name === this.pk_column_name);\n            }\n            return this.cached_fields[name];\n        },\n        fields: function() {\n            if (this.columns != null) {\n                return this.columns.map(function(c) {\n                    return this.field(c.name);\n                }.bind(this));\n            }\n            return null;\n        }\n    };\n    AQ.Row.prototype.update = function() {\n        return this.relation.schema.database.endpoint.patch(this, this.row_data)\n            .then(function(response) {\n\n                if(response == null) {\n                    throw 'Empty response';\n                }\n                return this;\n\n            }.bind(this)).catch(function(err) {\n                throw 'Update failed: ' + err;\n            });\n    };\n    AQ.Row.prototype.delete = function() { \n        return this.relation.schema.database.endpoint.delete(this)\n            .then(function(response) {\n\n                if(response == null) {\n                    throw 'Empty response';\n                }\n\n            }).catch(function(err) {\n                throw 'Delete failed: ' + err;\n            });\n    };\n    AQ.Row.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options )  {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.relation.schema.database;\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: '=',\n            value: this.get(self_column_name)\n        });\n\n        return db.schema(schema_name).relation(relation_name).rows(options);\n    };\n    AQ.Row.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.relation.schema.database;\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: '=',\n            value: this.get(self_column_name)\n        });\n\n        return db.schema(schema_name).relation(relation_name).row(options);\n    };\n\n    /*--------------------------------- * Column * ---------------------------------*/\n    AQ.Column = function( relation, name ) {\n        this.relation = relation;\n        this.name = name;\n        this.id = { relation_id: relation.id, name: name };\n    };\n    AQ.Column.prototype.constructor = AQ.Column;\n\n    /*--------------------------------- * Field * ---------------------------------*/\n    AQ.Field = function( row, name, pk ) {\n        this.row = row;\n        this.column = new AQ.Column(row.relation, name);\n        this.is_primary_key = pk;\n        this.name = name;\n        this.value = row.get(name);\n        this.id = { row_id: this.row.id, column_id: this.column.id };\n        this.to_url = function( id_only ) {\n            if (this.row.pk_value == null) {\n                console.error('You must call a row with "meta_data: true" in order to use the to_url function');\n                throw 'Datum.js: Programming Error';\n            }\n            return id_only ? '/field/' + this.row.relation.schema.name + '/' + this.row.relation.name + '/' + /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value + '/' + this.column.name :\n                this.row.relation.schema.database.endpoint.url + '/field/' + this.row.relation.schema.name + '/' + this.row.relation.name + '/' + /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value + '/' + this.column.name;\n            };\n    };\n    AQ.Field.prototype = {\n        constructor: AQ.Field,\n        get: function()          { return this.row.get(this.name); },\n        set: function(value)     { this.value = value; return this.row.set(this.name, value); },\n        update: function()       { return this.row.update(); } // TODO: This is wrong\n    };\n\n    /*--------------------------------- * Function * ---------------------------------*/\n    AQ.Function = function( schema, name, args ) {\n        this.schema = schema;\n        this.name = name;\n\n        if(args instanceof Array) {\n            this.args = '{' + args.join(',') + '}';\n        }\n        else {\n            this.args = args;\n        }\n\n        this.id = { schema_id: this.schema.id, name: this.name, args: this.args };\n        this.to_url = function( id_only ) {\n           var base_url = id_only ? '' : this.schema.database.endpoint.url;\n           if (typeof this.args != 'undefined') {\n               return base_url + '/function/' + this.schema.name + '/' + this.name + '/' + this.args;\n           }\n           return base_url + '/function/' + this.schema.name + '/' + this.name;\n        };\n    };\n    AQ.Function.prototype.constructor = AQ.Function;\n\n    /*--------------------------------- * Function Result * ---------------------------------*/\n    AQ.FunctionResult = function( fn, response ) {\n        this.function = fn;\n        this.schema = fn.schema;\n        this.row_data = response.result[0].row;\n        this.rows = response.result;\n        this.columns = response.columns;\n    };\n    AQ.FunctionResult.prototype = {\n        constructor: AQ.FunctionResult,\n        get: function( name )           { return this.row_data[name]; },\n        to_string: function()           { return JSON.stringify(this.row_data); }\n    };\n    AQ.FunctionResult.prototype.map = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n        }.bind(this)).map(fn);\n    };\n    AQ.FunctionResult.prototype.forEach = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n        }.bind(this)).forEach(fn);\n    };\n    AQ.FunctionResult.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options )  {\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.function.schema.database;\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: '=',\n            value: this.get(self_column_name)\n        });\n\n        return db.schema(schema_name).relation(relation_name).rows(options);\n    };\n    AQ.FunctionResult.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.function.schema.database;\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: '=',\n            value: this.get(self_column_name)\n        });\n\n        return db.schema(schema_name).relation(relation_name).row(options);\n    };\n\n    /*--------------------------------- * Function Result Set * ---------------------------------*/\n    AQ.FunctionResultSet = function( fn, response ) {\n        this.function = fn;\n        this.schema = fn.schema;\n        this.columns = response.columns;\n        this.rows = response.result;\n    };\n    AQ.FunctionResultSet.prototype.constructor = AQ.FunctionResultSet;\n    AQ.FunctionResultSet.prototype.map = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n        }.bind(this)).map(fn);\n    };\n    AQ.FunctionResultSet.prototype.forEach = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n        }.bind(this)).forEach(fn);\n    };\n    AQ.FunctionResultSet.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.function.schema.database;\n\n        var values = this.map(function(row) {\n            return row.get(self_column_name);\n        });\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: 'in',\n            value: values\n        });\n\n        return db.schema(schema_name).relation(relation_name).rows(options);\n    };\n    AQ.FunctionResultSet.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.function.schema.database;\n\n        var values = this.map(function(row) {\n            return row.get(self_column_name);\n        });\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: 'in',\n            value: values\n        });\n\n        return db.schema(schema_name).relation(relation_name).row(options);\n\n    };\n\n    window.AQ = AQ;\n    return AQ;\n});
\\x193c65c14beda2b7f020d655f5c82ce02d9b6e959ab400c7310d16d9753850d0	aquameta-datum-plv8
\\x19b77f472ab80c71d90d82a4e428b8ec70cec98bd2214a95120b4f98710978ec	79519a0d-ad07-482c-a43d-4e869f14a2a1
\\x1a20f71715df1d545fa369fff54b4ec1bd77a4b041a15a9e2088384873e1797e	/*******************************************************************************\n* Widget.js\n*\n* Created by Aquameta Labs, an open source company in Portland Oregon, USA.\n* Project: http://aquameta.com/\n******************************************************************************/\ndefine(['/doT.min.js', '/jQuery.min.js', '/datum.js'], function(doT, $, AQ, undefined) {\n\n    'use strict';\n\n    doT.templateSettings.strip = false;\n\n    var widget_promises = {};\n    var containers = {};\n    var namespaces = {};\n\n\n    AQ.Widget = {};\n\n\n    AQ.Widget.widget = function ( selector, input, extra ) {\n\n        if (!selector || typeof selector != 'string') {\n            throw "Widget - Selector argument is invalid or missing";\n        }\n\n        // Same namespace as calling widget, instead of global '' namespace\n        var default_namespace = (typeof this != 'undefined' && typeof this.namespace != 'undefined') ? this.namespace : '';\n\n        var is_semantic_dsl_lookup = selector.indexOf('/') != -1;\n\n        // For semantic lookup\n        // * selector is 'semantics/purpose/default_bundle'\n        // * input is AQ.* object\n        // * extra is {} to send to widget\n        if (is_semantic_dsl_lookup) {\n\n            if (!input) {\n                throw "Semantics requires an AQ.* to be passed in";\n            }\n\n            var context = extra || {};\n            var semantics = selector.split('/');\n            var args_object = {};\n\n            // If input is a promise (that will resolve as a Rowset or a Row), resolve it first\n            if (input instanceof Promise) {\n\n                var url_id;\n                var widget_getter = input.then(function(input) {\n\n                    context.datum = input;\n\n                    // These are the same for both Rowset and Row\n                    var endpoint = input.relation.schema.database;\n                    var fn = 'relation_widget';\n                    var type = 'meta.relation_id';\n                    args_object.relation_id = input.relation.id;\n\n                    if (input instanceof AQ.Rowset) {\n                        context.rows = input;\n                        url_id = input.relation.to_url(true);\n                    }\n                    else if (input instanceof AQ.Row) {\n                        context.row = input;\n                        url_id = input.to_url(true);\n                    }\n                    args_object.widget_purpose = semantics[1];\n                    args_object.default_bundle = semantics.length >= 3 ? semantics[2] : 'org.aquameta.core.semantics';\n                    \n                    return endpoint.schema('semantics').function({\n                        name: fn,\n                        parameters: [type,'text','text']\n                    }, args_object, { use_cache: true, meta_data: false });\n\n                });\n\n            }\n            // Else, check which type it is\n            else {\n\n                context.datum = input;\n\n                if (input instanceof AQ.Relation || input instanceof AQ.Table || input instanceof AQ.View) {\n                    var endpoint = input.schema.database;\n                    var fn = 'relation_widget';\n                    var type = 'meta.relation_id';\n                    args_object.relation_id = input.id;\n                    var url_id = input.to_url(true);\n                    context.relation = input;\n                }\n                else if (input instanceof AQ.Row) {\n                    var endpoint = input.relation.schema.database;\n                    var fn = 'relation_widget';\n                    var type = 'meta.relation_id';\n                    args_object.relation_id = input.relation.id;\n                    var url_id = input.to_url(true);\n                    context.row = input;\n                }\n                else if (input instanceof AQ.Rowset) {\n                    var endpoint = input.relation.schema.database;\n                    var fn = 'relation_widget';\n                    var type = 'meta.relation_id';\n                    args_object.relation_id = input.relation.id;\n                    var url_id = input.relation.to_url(true);\n                    context.rows = input;\n                }\n                else if (input instanceof AQ.Column) {\n                    var endpoint = input.relation.schema.database;\n                    var fn = 'column_widget';\n                    var type = 'meta.column_id';\n                    args_object.column_id = input.id;\n                    var url_id = input.relation.to_url(true);\n                    context.column = input;\n                }\n                else if (input instanceof AQ.Field) {\n                    var endpoint = input.row.relation.schema.database;\n                    var fn = 'column_widget';\n                    var type = 'meta.column_id';\n                    args_object.column_id = input.column.id;\n                    var url_id = input.to_url(true);\n                    context.field = input;\n                }\n                \n                args_object.widget_purpose = semantics[1];\n                args_object.default_bundle = semantics.length >= 3 ? semantics[2] : 'org.aquameta.core.semantics';\n                \n                var widget_getter = endpoint.schema('semantics').function({\n                    name: fn,\n                    parameters: [type,'text','text']\n                }, args_object, { use_cache: true, meta_data: false });\n            }\n\n            // Go get this widget - retrieve_promises don't change for calls to the same widget - they are cached by the widget name\n            var widget_retrieve_promise = retrieve(widget_getter, {\n                semantic_selector: selector,\n                url_id: url_id\n            });\n\n        }\n\n        // For regular widget lookup\n        // * selector is '[namespace:]widget_name'\n        // * input is {} to send to widget\n        // * extra is ignored\n        else {\n\n            //var context = typeof input != 'undefined' ? Object.assign({}, input) : {};\n            var context = input || {};\n\n            var name_parts = selector.split(':');\n\n            if (name_parts.length == 1) {\n                // Default namespace lookup\n                context.namespace = default_namespace;\n                context.name = name_parts[0];\n            }\n            else {\n                // Namespaced lookup\n                context.namespace = name_parts[0];\n                context.name = name_parts[1];\n                context.bundle_name = namespaces[context.namespace].bundle_name;\n            }\n\n            // Namespace not found\n            if (!(context.namespace in namespaces)) {\n                throw 'Widget namespace "'+context.namespace+'" has not been imported - Call AQ.Widget.import( bundle_name, namespace, endpoint ) to import bundled widgets to a namespace';\n            }\n    \n            var widget_getter = namespaces[context.namespace].endpoint.schema('widget').function('bundled_widget',\n                [ namespaces[context.namespace].bundle_name, context.name ], {\n                    use_cache: true,\n                    meta_data: false\n                });\n\n            // Go get this widget - retrieve_promises don't change for calls to the same widget - they are cached by the widget name\n            var widget_retrieve_promise = retrieve(widget_getter, {\n                namespace: context.namespace,\n                name: context.name\n            });\n\n        }\n\n        context.id = AQ.uuid();\n\n        // Setup default namespace for child widget\n        context.widget = AQ.Widget.widget.bind({ namespace: context.namespace });\n        context.widget.sync = AQ.Widget.widget.sync;\n\n        // Prepare and render the widget - each prepare_promise is unique because inputs are different - they are cached by the unique uuid created for the context\n        widget_promises[context.id] = prepare(widget_retrieve_promise, context);\n\n        // Return script that calls swap\n        return '<script id="widget-stub_' + context.id  + '" data-widget_id="' + context.id + '">' +\n                  'AQ.Widget.swap($("#widget-stub_' +  context.id  + '"), "' + context.id + '");'  + \n               '</script>';\n\n    }\n\n\n\n    /* Import a bundle name to a local namespace */\n    AQ.Widget.import = function( bundle_name, namespace, endpoint ) {\n\n        namespaces[namespace] = {\n            endpoint: endpoint,\n            bundle_name: bundle_name\n        };\n\n    };\n\n\n    /* Return an array bundle of imported bundle names */\n    AQ.Widget.bundles = function() {\n        return Object.keys(namespaces).map(function(key) {\n            return namespaces[key].bundle_name;\n        });\n    };\n\n\n\n    /* Find the bundle that was imported to this namespace */\n    AQ.Widget.bundle = function( namespace ) {\n        return namespaces[namespace].bundle_name;\n    };\n\n\n\n    /* Find the namespace that uses this bundle */\n    AQ.Widget.namespace = function( bundle_name ) {\n        return Object.keys(namespaces).find(function(namespace) {\n            return namespaces[namespace].bundle_name == bundle_name;\n        });\n    };\n\n\n\n    function retrieve( widget_getter, selector ) {\n\n        if ('semantic_selector' in selector) {\n            var semantic_lookup = true;\n        }\n\n        return widget_getter.then(function(row) {\n\n            // Get all related widget data\n            return Promise.all([\n                row,\n                row.related_rows('id', 'widget.input', 'widget_id', { use_cache: true, meta_data: true }).catch(function(){ return; }),\n                row.related_rows('id', 'widget.widget_view', 'widget_id', { use_cache: true, meta_data: true })\n                    .then(function(widget_views) {\n\n                        var db = row.schema.database;\n                        return widget_views.map(function(widget_view) {\n                            var view_id = widget_view.get('view_id');\n                            return db.schema(view_id.schema_id.name).view(view_id.name);\n                        });\n\n                    }).catch(function(err) { return; }),\n                row.related_rows('id', 'widget.widget_dependency_js', 'widget_id', { use_cache: true, meta_data: true })\n                    .then(function(deps_js) {\n\n                        if (!deps_js.length) { return; }\n                        return deps_js.related_rows('dependency_js_id', 'widget.dependency_js', 'id', { use_cache: true, meta_data: true });\n\n                    }).then(function(deps) {\n\n                        return Promise.all(\n\n                            deps.map(function(dep) {\n                                return System.import(dep.field('content').to_url()).then(function(dep_module) {\n                                    //console.log('my module', dep_module);\n                                    \n                                    return {\n                                        url: dep.field('content').to_url(),\n                                        name: dep.get('variable') || 'non_amd_module',\n                                        /* TODO: This value thing is a hack. For some reason, jwerty doesn't load properly here */\n                                        value: typeof dep_module == 'object' ? dep_module[Object.keys(dep_module)[0]] : dep_module\n                                        //value: dep_module\n                                    };\n                                });\n                            })\n                        );\n\n                    }).catch(function() { return; })\n            ]);\n        }).catch(function(err) {\n            if (semantic_lookup) {\n                throw 'Widget not found from semantic lookup with ' + selector.semantic_selector + ' on ' + selector.url_id;\n            }\n            else {\n                throw 'Widget does not exist, ' + selector.namespace + ':' + selector.name;\n            }\n        });\n    };\n\n\n\n    function prepare( retrieve_promise, context ) {\n\n        return retrieve_promise.then(function( widget_data ) {\n\n            //console.log('retrieve_promise resolved', widget_data);\n            var [ widget_row, inputs, views, deps_js ] = widget_data;\n\n            context.name = widget_row.get('name');\n\n            var xinput = context;\n            context = Object.assign({\n                    db: widget_row.schema.database,\n                    endpoint: widget_row.schema.database,\n                    input: {},\n                    xinput: xinput\n                }, context);\n\n            delete context.xinput.id;\n            delete context.xinput.name;\n            delete context.xinput.namespace;\n            delete context.xinput.widget;\n\n            // Process inputs\n            if (typeof inputs != 'undefined') {\n\n                inputs.forEach(function(input) {\n                    var input_name = input.get('name');\n\n                    if (typeof context[input_name] == 'undefined') {\n                        if (input.get('optional')) {\n                            var default_code = input.get('default_value');\n                            try {\n\n                                if (default_code) {\n                                    context[input_name] = eval('(' + default_code + ')');\n                                }\n                                else {\n                                    context[input_name] =  undefined;\n                                }\n\n                            }\n                            catch (e) {\n                                error(e, context.name, "Widget default eval failure: " + default_code);\n                                /*\n                                console.error("Widget default eval failure", default_code);\n                                throw e;\n                                */\n                            }\n\n                        }\n                        else {\n                            error('Missing required input ' + input_name, context.name, 'Inputs');\n                        }\n                    }\n                    context.input[input_name] = context[input_name];\n                    delete context.xinput[input_name];\n                });\n            }\n\n            // Load views into context\n            if (typeof views != 'undefined') {\n                views.forEach(function(view) {\n                    context[view.schema.name + '_' + view.name] = view;\n                });\n            }\n\n            var rendered_widget = render(widget_row, context);\n            var post_js_function = create_post_js_function(widget_row, context, deps_js);\n\n            // Return rendered widget and post_js function\n            return {\n                html: rendered_widget,\n                widget_id: context.id,\n                widget_name: context.name,\n                post_js: post_js_function\n            };\n\n        });\n    };\n\n\n\n    function render( widget_row, context ) {\n\n        // Create html template\n        var html_template = doT.template(widget_row.get('html') || '');\n\n        // Compile html template\n        try {\n            var html = html_template(context);\n        } catch(e) {\n            error(e, context.name, 'HTML');\n        }\n\n        // Render html\n        try {\n            var rendered = $(html).attr('data-widget', context.name)\n                .attr('data-widget_id', context.id)\n                .attr('data-bundle_alias', context.namespace)\n                .attr('data-bundle_name', context.bundle_name)\n                .attr('data-widget_row_id', widget_row.get('id'))\n                .data('help', widget_row.get('help'));\n        } catch(e) {\n            error(e, context.name, 'HTML (adding data-* attributes)');\n        }\n                                \n        // If CSS exists and has not yet been applied\n        if (widget_row.get('css') != null && $('style[data-widget="' + context.name + '"]').length == 0) {\n\n            // Create css template\n            var css_template = doT.template(widget_row.get('css') || '');\n\n            // Try to run css template\n            try {\n                var css = css_template(context);\n            } catch(e) {\n                error(e, context.name, 'CSS');\n            }\n\n            // Add css to dom\n            $('<style type="text/css" data-widget="' + context.name + '">' + css + '</style>').appendTo(document.head);\n        }\n\n        return rendered;\n    };\n\n\n\n    function create_post_js_function( widget_row, context, deps_js ) {\n\n        var context_keys = Object.keys(context).sort();\n\n        // Get context values\n        var context_vals = context_keys.map(function(key) {\n            return context[key];\n        });\n\n        // Dependency names and values\n        var dep_names = [],\n            dep_values = [];\n        if (deps_js != null) {\n            deps_js.forEach(function(dep_js) {\n                dep_names.push(dep_js.name);\n                dep_values.push(dep_js.value);\n            });\n        }\n\n        try {\n            /*\n            * Creating an script that looks like this\n            * function(dep1_name, dep2_name, ...) {\n            *   function(input1, input2) {\n            *       post_js\n            *   }.apply(this.this.context_vals);\n            * }.apply(this, this.dep_vals);\n            */\n            var post_js = Function(\n                '(function(' + dep_names.join(',') + ') { \\n' +\n                    '(function(' + context_keys.join(',') + ') { \\n' +\n                        'var w = $("#"+id);\\n\\n' +\n                        widget_row.get('post_js') +\n                        '\\n//# sourceURL=' + widget_row.get('id') + '/' + widget_row.get('name') + '/post_js\\n' +\n                    '}).apply(this, this.context_vals);' +\n                '}).apply(this, this.dep_values);'\n            ).bind({ context_vals: context_vals, dep_values: dep_values });\n        }\n        catch(e) {\n            error(e, widget_row.get('name'), 'Creating post_js function');\n        }\n\n        return post_js;\n\n    };\n\n\n    // detect svg widgets by tag name.  might be better to check the dom to see if we're inside an svg tag?\n    AQ.Widget.is_svg = function( e ) {\n        var svg_tags = ['circle','rect','polygon','g']; // TODO: add more, or change approach?\n        for (var i=0;i<svg_tags.length;i++) {\n            if (e.tagName.toUpperCase() == svg_tags[i].toUpperCase()) {\n                // console.log('svg  widget: ' + svg_tags[i]);\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n\n    AQ.Widget.swap = function( $element, id ) {\n        widget_promises[id].then(function(rendered_widget) {\n\n            // Replace stub\n            // special case for svg elements - http://stackoverflow.com/questions/3642035/jquerys-append-not-working-with-svg-element\n            if (AQ.Widget.is_svg(rendered_widget.html[0])) { // TODO: is there ever a case where there is more than one element in this array?\n                var div = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n                div.innerHTML= '<svg xmlns="http://www.w3.org/2000/svg">'+rendered_widget.html[0].outerHTML+'</svg>';\n\n                var frag= document.createDocumentFragment();\n                while (div.firstChild.firstChild)\n                    frag.appendChild(div.firstChild.firstChild);\n\n                $element.replaceWith(frag);\n            }\n            else $element.replaceWith(rendered_widget.html);\n\n            // Run post_js - or this may have to be done with a script tag appended to the widget\n            try {\n                rendered_widget.post_js();\n            }\n            catch(e) {\n                error(e, rendered_widget.widget_name, 'Running post_js function');\n            }\n\n            var w = $('#' + rendered_widget.widget_id);\n\n            // notify the world that a widget has loaded.  debugger uses this to detect widget tree changes\n            w.trigger('widget_loaded', { widget: w });\n\n            // Delete prepeared_promise\n            delete widget_promises[id];\n\n        }).catch(function(error) {\n            //console.error('Widget swap failed - ', error);\n            console.error(error);\n            // Remove stub\n            $element.remove();\n            // Delete promise\n            delete widget_promises[id];\n        });\n    };\n\n\n\n    function error( err, widget_name, step_name ) {\n        console.error("widget('" + widget_name + "', ...) " + step_name + " failed!");\n        //window.setTimeout(function() { throw err; }, 100);\n        throw err;\n    }\n\n\n\n    AQ.Widget.sync = function(rowset_promise, container, widget_maker, handlers) {\n\n        if(handlers === undefined) {\n            handlers = {};\n        }\n\n        if (widget_maker === undefined) {\n            throw 'widget.sync missing widget_maker argument';\n        }\n\n        if (container.length < 1) {\n            throw 'widget.sync failed: The specified container is empty or not found';\n            return;\n        }\n\n        if (container.length > 1) {\n            throw 'widget.sync failed: The specified container contains multiple elements';\n            return;\n        }\n\n        if (!container instanceof jQuery) {\n            throw 'widget.sync failed: The specified container is not a jQuery object';\n            return;\n        }\n\n        if (typeof rowset_promise == 'undefined' ||\n            (!(rowset_promise instanceof Promise) && !(rowset_promise instanceof AQ.Rowset) && !(rowset_promise instanceof AQ.FunctionResultSet))) {\n            throw 'widget.sync failed: rowset_promise must be a "thenable" promise or a resolved AQ.Rowset or a resolved AQ.FunctionResultSet';\n        }\n\n        if (!(rowset_promise instanceof Promise)) {\n            rowset_promise = Promise.resolve(rowset_promise);\n        }\n\n        rowset_promise.then(function(rowset) {\n\n            if (typeof rowset == 'undefined' || typeof rowset.forEach == 'undefined') {\n                throw 'Rowset is not defined. First argument to widget.sync must return a Rowset';\n            }\n\n            var container_id = AQ.uuid();\n\n            container.attr('data-container_id', container_id)\n            containers[container_id] = {\n                container: container,\n                widget_maker: widget_maker,\n                handlers: handlers\n            };\n\n            rowset.forEach(function(row) {\n                container.append(widget_maker(row));\n            });\n\n        }).catch(function(error) {\n            console.error('widget.sync failed: ', error);\n        });\n\n    }\n\n    // duplicate name for backwards compatibility\n    AQ.Widget.widget.sync = AQ.Widget.sync;\n\n    return AQ.Widget.widget;\n\n});\n
\\x227ae55bd869eedf9afbc17dfc4aa0e4722725413ae5f3fd6ad8644f8e1de4f6	c7e98fc9-4324-4006-9738-ac3d869201ba
\\x24504346d398ff43b2e9322bcfbaa60134805ed71795329adbe28e70acd9cb48	/*******************************************************************************\n * Datum.js\n *\n * Created by Aquameta Labs, an open source company in Portland Oregon, USA.\n * Company: http://aquameta.com/\n * Project: http://blog.aquameta.com/\n ******************************************************************************/\ndefine(['/jQuery.min.js'], function($, undefined) {\n    'use strict';\n    var AQ = AQ || {};\n\n\n\n    AQ.uuid = function() {\n        var d = new Date().getTime();\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = (d + Math.random()*16)%16 | 0;\n            d = Math.floor(d/16);\n            return (c=='x' ? r : (r&0x7|0x8)).toString(16);\n        });\n    }\n\n\n\n    function query_options( options ) {\n\n        var keys = [];\n\n        if (typeof options != 'undefined') {\n\n            // Meta data defaults to true;\n            if (typeof options.meta_data == 'undefined') {\n                options.meta_data = true;\n            }\n\n            // Map the keys of the options object to an array of encoded url components\n            Object.keys(options).sort().map(function(key_name) {\n\n                var key = options[key_name];\n\n                switch(key_name) {\n\n                    case 'where':\n                        // where: { name: 'column_name', op: '=', value: 'value' }\n                        // where: [{ name: 'column_name', op: '=', value: 'value' }]\n                        if (typeof key.length == 'undefined') key = [key];\n\n                        return key.map(function(where) {\n                            return 'where=' + encodeURIComponent(JSON.stringify(where));\n                        }).join('&');\n\n                    case 'order_by':\n                        // So many possibilities...\n                        // order_by: '-?column_name'\n                        // order_by: ['-?column_name']\n                        // order_by: { 'column_name': 'asc|desc' }\n                        // order_by: [{ 'column_name': 'asc|desc' }]\n                        // order_by: { column: 'column_name', direction: 'asc|desc' }\n                        // order_by: [{ column: 'column_name', direction: 'asc|desc' }]\n                        if (typeof key.length == 'undefined') key = [key];\n\n                        return key_name + '=' + encodeURIComponent(key.map(function(o,i) {\n                            return ((typeof o.direction != 'undefined' && o.direction != 'asc') ? '-' : '') + o.column;\n                        }).join(','));\n\n                    case 'limit':\n                        // limit: number\n                    case 'offset':\n                        // offset: number\n                        var parsedNum = parseInt(key);\n                        if (!isNaN(parsedNum)) {\n                            return key_name + '=' + parsedNum;\n                        }\n                        return;\n\n                    case 'evented':\n                        return 'session_id=' + encodeURIComponent(JSON.stringify(key));\n\n                    case 'meta_data':\n                    case 'args':\n                    case 'exclude':\n                    case 'include':\n                        return key_name + '=' + encodeURIComponent(JSON.stringify(key));\n                }\n            }\n\n            // Remove all undefined elements of the array\n            ).forEach(function(e) {\n                if (typeof e != 'undefined') keys.push(e);\n            });\n        }\n\n        // Return the query string by joining the array with &'s\n        return keys.length ? '?' + keys.join('&') : '?';\n    }\n\n\n\n    function Endpoint( url, evented ) {\n\n        this.url = url;\n        this.evented = evented;\n        this.cache = {};\n\n        var event_session_id;\n\n        // Auth session\n        this.auth_session_id = get_session_cookie();\n\n        function get_session_cookie() {\n            return document.cookie.replace(/(?:(?:^|.*;\\s*)SESSION\\s*\\=\\s*([^;]*).*$)|^.*$/, "$1");\n        }\n\n        var socket;\n        var socket_requests = {};\n        var open_functions = [];\n        var retries = 0;\n        var MAX_NUMBER_RETRIES = 5;\n\n        // this.settings.evented can be string or boolean\n        if(this.evented != 'no' && !this.evented) {\n\n            try {\n                //open_functions.push(connect_session);\n                connect_socket(this.evented == 'yes' || this.evented == true);\n            }\n            catch(err) {\n\n                if(this.evented == 'yes' || this.evented == true) {\n                    console.error('Websocket connection refused:', err);\n                    throw 'Websocket connection refused';\n                }\n\n                // if this.settings.evented == 'try', fail silently\n           \n            }\n        }\n\n        function connect_socket(fail_loudly) {\n\n            if (socket_connected()) {\n                return socket;\n            }\n\n            socket = new WebSocket('ws://' + location.host + url + '/event');\n            \n            socket.onopen = function (event) {\n                console.log('socket opened', this.readyState);\n                open_functions.forEach(function(e) { e.call(this); });\n            };\n            \n            socket.onerror = function(event) {\n                if (fail_loudly) {\n                    // TODO?\n                    console.error('really mad', event);\n                }\n                console.log('socket error', event);\n            };\n\n            socket.onclose = function(event) {\n                console.log('socket closed', event.code);\n                if (event.code == 1006) {\n                    retries++;\n                    if (retries < MAX_NUMBER_RETRIES) {\n                        // Try to reconnect\n                        connect_socket();\n                    }\n                }\n            };\n            \n            socket.onmessage = function (event) {\n                var response = JSON.parse(event.data);\n                console.log('message received', response);\n\n                switch (response.method) {\n                    case 'response':\n                        if (typeof response.request_id == 'undefined') {\n                            throw 'Websocket response is unidentifiable';\n                        }\n\n                        if (typeof socket_requests[response.request_id] == 'undefined') {\n                            // This will get hit if we sent the same request multiple times and more than one responsded\n                            // console.error('Websocket request not found', response);\n                        }\n                        else {\n                            console.log('resolving promise', response.request_id, socket_requests[response.request_id].tries);\n\n                            // Clear timeout\n                            clearTimeout(socket_requests[response.request_id].timeout_id);\n\n                            // Resolve promise\n                            socket_requests[response.request_id].resolve(response.data);\n\n                            // Delete promise from storage\n                            delete socket_requests[response.request_id];\n\n                            console.log('socket requests left to fulful', socket_requests);\n                        }\n                        break;\n                    case 'session_attach':\n                        this.event_session_id = response.session_id;\n                        break;\n\n                    case 'event':\n                        handle_event(JSON.parse(response.data));\n                        break;\n                }\n            };\n\n        }\n\n        function handle_event(event_data) {\n            // Route event\n            switch(event_data.subscription_type) {\n                case 'table':\n                    console.log(event_data.subscription_type + ':' + event_data.operation);\n                    break;\n                case 'column':\n                    console.log(event_data.subscription_type + ':' + event_data.operation);\n                    break;\n                case 'row':\n                    console.log(event_data.subscription_type + ':' + event_data.operation);\n                    break;\n                case 'field':\n                    console.log(event_data.subscription_type + ':' + event_data.operation);\n                    break;\n                default:\n                    break;\n            }\n            // Delete event\n            // endpoint...\n        }\n\n        function connect_session(session_id) {\n\n           if (typeof session_id != 'undefined') {\n               event_session_id = session_id;\n           }\n\n           if (socket_connected() && typeof event_session_id != 'undefined') {\n               socket_send({\n                   method: 'attach',\n                   session_id: event_session_id\n               });\n           }\n\n           else {\n               open_functions.push(connect_session);\n           }\n\n        }\n\n        // Boolean, whether socket is connected or not\n        function socket_connected() {\n\n            if (typeof socket != 'undefined' && typeof socket.readyState != 'undefined') {\n                return socket.readyState == 1;\n            }\n            return false;\n\n        }\n\n        // Grabs current connection and sends method\n        function socket_send( data ) {\n            return new Promise(function(resolve, reject) {\n\n                console.log('socket_send', data);\n                data.request_id = data.request_id || AQ.uuid();\n\n                var tries = 0;\n                if (typeof socket_requests[data.request_id] != 'undefined') {\n                    tries = socket_requests[data.request_id].tries + 1;\n                    clearTimeout(socket_requests[data.request_id].timeout_id);\n                }\n\n                socket_requests[data.request_id] = {\n                    resolve: function(response) { resolve(response); },\n                    reject: function(reason) { reject(reason); },\n                    timeout_id: setTimeout(function(data) {\n                            socket_send(data).then(\n                                function(r) { resolve(r); },\n                                function(e) { reject(e); }\n                            );\n                        }.bind(this, data), 300),\n                    tries: tries\n                };\n                socket.send(JSON.stringify(data)); \n            });\n        }\n\n        var resource = function( method, meta_id, args, data ) {\n\n            args = args || {};\n\n            // Get use_cache from args or data\n            var use_cache = false;\n            if (typeof data == 'undefined') {\n                if (typeof args.use_cache != 'undefined') {\n                    use_cache = args.use_cache;\n                }\n            }\n            else {\n                if (typeof data.use_cache != 'undefined') {\n                    use_cache = data.use_cache;\n                }\n            }\n\n            var current_session_cookie =  get_session_cookie();\n            if (this.auth_session_id != current_session_cookie) {\n                // session has changed\n                // update auth_session_id\n                this.auth_session_id = current_session_cookie;\n                // dump cache\n                this.cache = {};\n            }\n\n            // If this connection is evented, get event_session_id\n            if (this.evented) {\n                args.session_id = event_session_id;\n            }\n\n            // URLs\n            var id_url = meta_id.to_url(true); // ID part of the URL only\n            var url_without_query = this.url + id_url;\n            var url_with_query = url_without_query + query_options(args);\n\n            // Check cache\n            if (use_cache && url_with_query in this.cache) {\n                return this.cache[url_with_query];\n            }\n\n            // Send websocket method if this connection uses websocket\n            if (socket_connected()) {\n                // function values_to_string( obj ) {  // FIXME: Why in the HECK does this not work in Firefox 23.0.1??\n                var values_to_string = function ( obj ) {\n                    if (typeof obj == 'undefined' || obj == null) {\n                        return null;\n                    }\n                    var o = {};\n                    Object.keys(obj).forEach(function(key) {\n                        o[key] = JSON.stringify(obj[key]);\n                    });\n                    return JSON.stringify(o);\n                }\n\n                var request = socket_send({\n                    version: '0.3',\n                    method: 'request',\n                    verb: method,\n                    uri: id_url,\n                    query: values_to_string(args),\n                    data: values_to_string(data)\n                });\n\n            }\n            else {\n\n                // If query string is too long, upgrade GET method to POST\n                if(method == 'GET' && (location.host + url_with_query).length > 1000) {\n                    method = 'POST';\n                }\n\n                // This makes the uWSGI server send back json errors\n                var headers = new Headers();\n                headers.append('Content-Type', 'application/json');\n\n                // Settings object to send with 'fetch' method\n                var init_obj = {\n                    method: method,\n                    headers: headers,\n                    credentials: 'same-origin'\n                };\n\n                // Don't add data on GET requests\n                if (method != 'GET') {\n                    init_obj.body = JSON.stringify(data);\n                }\n\n                var request = fetch(method == 'GET' ? url_with_query : url_without_query, init_obj);\n            }\n\n            request = request.then(function(response) {\n\n                // JSON was returned from WebSocket\n                if (typeof response.json == 'undefined') {\n                    // TODO: ? Unfortunately this has no HTTP status like the result of fetch\n                    //console.log('i am the response', response);\n                    return response;\n                }\n\n                // Request object was returned from fetch\n\n                // Read json stream\n                var json = response.json();\n\n                if (response.status >= 200 && response.status < 300) {\n                    return json;\n                }\n\n                // If bad request (code 300 or higher), reject promise\n                return json.then(Promise.reject.bind(Promise));\n\n            }).catch(function(error) {\n\n                // Log error in collapsed group\n                console.groupCollapsed(method, error.status_code, error.title);\n                // console.error(url_without_query);\n                if ('message' in error) {\n                    console.error(error.message);\n                }\n                console.groupEnd();\n                throw error.title;\n\n            });\n\n            // Check cache for GET/POST\n            if (use_cache && (method == 'GET' || method == 'POST')) {\n                this.cache[url_with_query] = request;\n            }\n\n            return request;\n        }\n\n        return {\n            url: this.url,\n            connect_session: connect_session,\n            get: function( meta_id, args )        { return resource.call(this, 'GET', meta_id, args); }.bind(this),\n            post: function( meta_id, data )       { return resource.call(this, 'POST', meta_id, {}, data); }.bind(this),\n            patch: function( meta_id, data )      { return resource.call(this, 'PATCH', meta_id, {}, data); }.bind(this),\n            delete: function( meta_id, args )     { return resource.call(this, 'DELETE', meta_id, args); }.bind(this)\n        };\n    }\n\n    /*--------------------------------- * Database * ---------------------------------*/\n    AQ.Database = function( url, settings, ready_callback ) {\n        this.settings = settings;\n\n        // Not sure which name is better\n        this.endpoint = this.connection = new Endpoint(url, this.settings.evented);\n        if (this.settings.evented != 'no') {\n            this.schema('event').function('session_create').then(function(result) {\n                this.endpoint.connect_session(result.get('session_create'));\n            }.bind(this));\n        }\n        this.query_string = query_options;\n    };\n    AQ.Database.prototype.constructor = AQ.Database;\n    AQ.Database.prototype.schema = function( name ) { return new AQ.Schema(this, name); };\n\n    /*--------------------------------- * Schema * ---------------------------------*/\n    AQ.Schema = function( database, name ) {\n        this.database = database;\n        this.name = name;\n        this.id = { name: this.name };\n    };\n    AQ.Schema.prototype.constructor = AQ.Schema;\n    AQ.Schema.prototype.relation = function( name )         { return new AQ.Relation(this, name); };\n    AQ.Schema.prototype.table = function( name )            { return new AQ.Table(this, name); };\n    AQ.Schema.prototype.view = function( name )             { return new AQ.View(this, name); };\n    AQ.Schema.prototype.function = function( identifier, args, options )   {\n\n        // Function identifier (name and parameter list)\n        if (typeof identifier == 'object') {\n            var name = identifier.name;\n            var parameter_type_list = identifier.parameters;\n        }\n        // Selecting a function without specifying the parameters\n        else {\n            var name = identifier;\n        }\n\n        options = options || {};\n\n        // Arguments\n        options.args = {};\n\n        // `args = undefined` will pass no arguments into the server-side function\n        if (typeof args != 'undefined') {\n\n            // some_function?args={ kwargs: {} } -- Key/value object\n            if (!(args instanceof Array) && args instanceof Object) {\n                options.args.kwargs = args;\n            }\n            // some_function?args={ vals: [] } -- Array\n            else {\n                if (!(args instanceof Array)) {\n                    // Regular value is placed into array\n                    args = [ args ];\n                }\n                options.args.vals = args;\n            }\n        }\n\n        var fn = new AQ.Function(this, name, parameter_type_list);\n\n        return this.database.endpoint.get(fn, options)\n            .then(function(response) {\n\n                if (!response) {\n                    throw 'Empty response';\n                }\n                else if (!response.result.length) {\n                    throw 'Result set empty';\n                }\n                if(response.result.length > 1) {\n                    return new AQ.FunctionResultSet(fn, response);\n                }\n                return new AQ.FunctionResult(fn, response);\n\n            }.bind(this)).catch(function(err) {\n                throw 'Function call request failed: ' + err;\n            });\n    };\n\n    /*--------------------------------- * Relation * ---------------------------------*/\n    AQ.Relation = function( schema, name ) {\n        this.schema = schema;\n        this.name = name;\n        this.id = { schema_id: this.schema.id, name: this.name };\n    };\n    AQ.Relation.prototype.constructor = AQ.Relation;\n    AQ.Relation.prototype.to_url = function( id_only ) {\n        return id_only ? '/relation/' + this.schema.name + '/' + this.name :\n              this.schema.database.endpoint.url + '/relation/' + this.schema.name + '/' + this.name;\n    };\n    AQ.Relation.prototype.column = function( name ) {\n        return new AQ.Column(this, name);\n    };\n    AQ.Relation.prototype.rows = function( options ) {\n\n        return this.schema.database.endpoint.get(this, options)\n            .then(function(rows) {\n\n                if (rows == null) {\n                    throw 'Empty response';\n                }/*\n                else if (rows.result.length < 1) {\n                    throw 'No rows returned';\n                }*/\n                return new AQ.Rowset(this, rows, options);\n\n            }.bind(this)).catch(function(err) {\n                throw 'Rows request failed: ' + err;\n            });\n    };\n    AQ.Relation.prototype.row = function() {\n\n        // Multiple different ways to call 'row' function\n\n        // 1. Calling with Options object\n        if (typeof arguments[0] == 'object') {\n\n            var obj = arguments[0];\n            var args = arguments[1] || {};\n\n            // AQ.Relation.row({ where: { column_name: 'column_name', op: '=', value: 'value' } })\n            // Maybe it should be this one: AQ.Relation.row({ where: { column_name: value } })\n            if (typeof obj.where != 'undefined') {\n                args.where = obj.where;\n            }\n            // AQ.Relation.row({ column_name: 'column_name', op: '=', value: 'value' })\n            // Maybe it should be this one: AQ.Relation.row({ column_name: value })\n            else {\n                args.where = obj;\n            }\n\n        }\n        // 2. Calling with column_name and value\n        else if (typeof arguments[0] == 'string') {\n\n            // AQ.Relation.row(column_name, value [, options_obj])\n            var name = arguments[0];\n            var value = arguments[1];\n            var args = arguments[2] || {};\n\n            args.where = { name: name, op: '=', value: value };\n\n        }\n        // 3. Calling AQ.Relation.row() without arguments\n        else {\n            var args = {};\n        }\n\n        return this.schema.database.endpoint.get(this, args)\n            .then(function(row) {\n\n                if (row == null) {\n                    throw 'Empty response';\n                }\n                else if (row.result.length == 0) {\n                    throw 'No row returned';\n                }\n                else if (row.result.length > 1) {\n                    throw 'Multiple rows returned';\n                }\n                return new AQ.Row(this, row);\n\n            }.bind(this)).catch(function(err) {\n                throw 'Row request failed: ' + err;\n            });\n    };\n\n    /*--------------------------------- * Table * ---------------------------------*/\n    AQ.Table = function( schema, name ) {\n        this.schema = schema;\n        this.name = name;\n        this.id = { schema_id: this.schema.id, name: this.name };\n    };\n    AQ.Table.prototype = Object.create(AQ.Relation.prototype);\n    AQ.Table.prototype.constructor = AQ.Table;\n    AQ.Table.prototype.insert = function( data ) {\n\n        if (typeof data == 'undefined') {\n            // table.insert({}) is equivalent to table.insert()\n            // both will insert default values\n            data = {};\n        }\n\n        // Return inserted row promise\n        return this.schema.database.endpoint.patch(this, data)\n            .then(function(inserted_row) {\n\n                if (inserted_row == null) {\n                    throw 'Empty response';\n                }\n                if (typeof data.length != 'undefined' && data.length > 1) {\n                    return new AQ.Rowset(this, inserted_row, null);\n                }\n                return new AQ.Row(this, inserted_row);\n\n            }.bind(this)).catch(function(err) {\n                throw 'Insert failed: ' + err;\n            });\n\n    };\n\n    /*--------------------------------- * View * ---------------------------------*/\n    AQ.View = function( schema, name ) {\n        this.schema = schema;\n        this.name = name;\n        this.id = { schema_id: this.schema.id, name: this.name };\n    };\n    AQ.View.prototype = Object.create(AQ.Relation.prototype);\n    AQ.View.prototype.constructor = AQ.View;\n\n    /*--------------------------------- * Rowset * ---------------------------------*/\n    AQ.Rowset = function( relation, response, server_arguments ) {\n        this.relation = relation;\n        this.schema = relation.schema;\n        this.columns = response.columns || null;\n        this.pk_column_name = response.pk || null;\n        this.rows = response.result;\n        this.length = response.result.length;\n        this.server_arguments = server_arguments || {};\n    };\n    AQ.Rowset.prototype.constructor = AQ.Rowset;\n    AQ.Rowset.prototype.map = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.Row(this.relation, { columns: this.columns, pk: this.pk_column_name, result: [ row ] });\n        }.bind(this)).map(fn);\n    };\n    AQ.Rowset.prototype.forEach = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.Row(this.relation, { columns: this.columns, pk: this.pk_column_name, result: [ row ] });\n        }.bind(this)).forEach(fn);\n    };\n    AQ.Rowset.prototype.reload = function() {\n        return this.relation.rows(this.server_arguments);\n    };\n\n    /**\n     * Call AQ.Rowset.where with (where_obj) or use shorthand notation (field, value) - filter results programmatically\n     *\n     * @param {Object} where_obj\n     * @param {[Boolean]} return_first\n     * @param {[Boolean]} async\n     *\n     * OR\n     *\n     * @param {String} field\n     * @param {Any} value\n     * @param {[Boolean]} return_first\n     * @param {[Boolean]} async\n     *\n     * @returns {Promise}\n     */\n    AQ.Rowset.prototype.where = function() {\n\n        var first = false, async = true, where_obj = {};\n        if (typeof arguments[0] == 'object') {\n             // AQ.Rowset.where(where_obj [, return_first] [, async]);\n            where_obj = arguments[0];\n            var field = where_obj.field;\n            var value = where_obj.value;\n            if (arguments.length > 1) first = arguments[1];\n            if (arguments.length > 2) async = arguments[2];\n\n        }\n        else if (typeof arguments[0] == 'string' && arguments.length > 1) {\n            // AQ.Rowset.where(field, value [, return_first] [, async]);\n            var field = arguments[0];\n            var value = arguments[1];\n            if (arguments.length > 2) first = arguments[2];\n            if (arguments.length > 3) async = arguments[3];\n        }\n\n        return new Promise(function(resolve, reject) {\n\n            // TODO lots of logic here\n            // The new rowset that is returned must be in the same format as the response from the server\n\n            if (first) {\n                for (var i = 0; i < this.rows.length; i++) {\n                    if (this.rows[i].row[field] == value) {\n                        resolve(new AQ.Row(this.relation, { columns: this.columns, result: [ this.rows[i] ] }));\n                    }\n                }\n                reject('could not find ' + field + ' ' + value);\n            }\n            else {\n                var return_rowset = [];\n                for (var i = 0; i < this.rows.length; i++) {\n                    if (this.rows[i].row[field] == value) {\n                        return_rowset.push(this.rows[i]);\n                    }\n                }\n                resolve(new AQ.Rowset(this.relation, { columns: this.columns, result: return_rowset }));\n            }\n\n\n            // 2\n\n            // maybe we don't need to search the entire row and instead we return the first item found\n/*\n            var new_rowset = _.filter(this.rows, function(el) {\n                //return AQ.equals.call(this, el[field], val);\n            });\n*/\n            if (new_rowset.length == 1) {\n                return new AQ.Row(this.relation, new_rowset);\n            }\n            else if (new_rowset.length > 1) {\n                throw 'Multiple Rows Returned';\n            }\n\n            // if row does not exist\n            return null;\n\n        }.bind(this));\n\n    };\n    AQ.Rowset.prototype.order_by = function( column, direction ) {\n/*\n        var ordered = _.sortBy(this.rows, function(el) {\n            return el.row[column];\n        });\n*/\n        if (direction !== 'asc') {\n            ordered.reverse();\n        }\n        return new AQ.Rowset(this.relation, { columns: this.columns, result: ordered });\n    };\n    AQ.Rowset.prototype.limit = function( lim ) {\n        if (lim <= 0) {\n            throw 'Bad limit';\n        }\n        return new AQ.Rowset(this.relation, { columns: this.columns, result: this.rows.slice(0, lim) });\n    };\n    AQ.Rowset.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.relation.schema.database;\n\n        var values = this.map(function(row) {\n            return row.get(self_column_name);\n        });\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: 'in',\n            value: values\n        });\n\n\n        return db.schema(schema_name).relation(relation_name).rows(options);\n    };\n    AQ.Rowset.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.relation.schema.database;\n\n        var values = this.map(function(row) {\n            return row.get(self_column_name);\n        });\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: 'in',\n            value: values\n        });\n\n        return db.schema(schema_name).relation(relation_name).row(options);\n\n    };\n\n    /*--------------------------------- * Row * ---------------------------------*/\n    AQ.Row = function( relation, response ) {\n        this.relation = relation;\n        this.schema = relation.schema;\n        this.row_data = response.result[0].row;\n\n        this.cached_fields = {};\n        this.columns = response.columns || null;\n        this.pk_column_name = null;\n        this.pk_value = null;\n        this.id = null;\n        this.to_url = function() {\n            console.error('You must call a row with "meta_data: true" in order to use the to_url function');\n            throw 'Datum.js: Programming Error';\n        };\n\n        if (typeof response.pk != 'undefined') {\n            this.pk_column_name = response.pk;\n            this.pk_value = this.get(this.pk_column_name);\n            // this.id = {"pk_column_id":{"relation_id":{"schema_id":{"name":this.schema.name},"name":this.relation.name},"name":this.pk_column_name},"pk_value": this.pk_value}\n            this.id = {\n                pk_column_id: {\n                    relation_id: this.relation.id,\n                    name: this.pk_column_name\n                },\n                pk_value: this.pk_value\n            };\n\n            this.to_url = function( id_only ) {\n                return id_only ? '/row/' + this.relation.schema.name + '/' + this.relation.name + '/' + /*JSON.stringify(this.pk_value)*/ this.pk_value :\n                    this.relation.schema.database.endpoint.url + '/row/' + this.relation.schema.name + '/' + this.relation.name + '/' + /*JSON.stringify(this.pk_value)*/ this.pk_value;\n           };\n\n        }\n    };\n    AQ.Row.prototype = {\n        constructor: AQ.Row,\n        get: function( name )           { return this.row_data[name]; },\n        set: function( name, value )    { this.row_data[name] = value; return this; },\n        to_string: function()           { return JSON.stringify(this.row_data); },\n        clone: function()               { return new AQ.Row(this.relation, { columns: this.columns, pk: this.pk_column_name, result: [{ row: this.row_data }]}); },\n        field: function( name ) {\n            if (typeof this.cached_fields[name] == 'undefined') {\n                this.cached_fields[name] = new AQ.Field(this, name, name === this.pk_column_name);\n            }\n            return this.cached_fields[name];\n        },\n        fields: function() {\n            if (this.columns != null) {\n                return this.columns.map(function(c) {\n                    return this.field(c.name);\n                }.bind(this));\n            }\n            return null;\n        }\n    };\n    AQ.Row.prototype.update = function() {\n        return this.relation.schema.database.endpoint.patch(this, this.row_data)\n            .then(function(response) {\n\n                if(response == null) {\n                    throw 'Empty response';\n                }\n                return this;\n\n            }.bind(this)).catch(function(err) {\n                throw 'Update failed: ' + err;\n            });\n    };\n    AQ.Row.prototype.delete = function() { \n        return this.relation.schema.database.endpoint.delete(this)\n            .then(function(response) {\n\n                if(response == null) {\n                    throw 'Empty response';\n                }\n\n            }).catch(function(err) {\n                throw 'Delete failed: ' + err;\n            });\n    };\n    AQ.Row.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options )  {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.relation.schema.database;\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: '=',\n            value: this.get(self_column_name)\n        });\n\n        return db.schema(schema_name).relation(relation_name).rows(options);\n    };\n    AQ.Row.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.relation.schema.database;\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: '=',\n            value: this.get(self_column_name)\n        });\n\n        return db.schema(schema_name).relation(relation_name).row(options);\n    };\n\n    /*--------------------------------- * Column * ---------------------------------*/\n    AQ.Column = function( relation, name ) {\n        this.relation = relation;\n        this.name = name;\n        this.id = { relation_id: relation.id, name: name };\n    };\n    AQ.Column.prototype.constructor = AQ.Column;\n\n    /*--------------------------------- * Field * ---------------------------------*/\n    AQ.Field = function( row, name, pk ) {\n        this.row = row;\n        this.column = new AQ.Column(row.relation, name);\n        this.is_primary_key = pk;\n        this.name = name;\n        this.value = row.get(name);\n        this.id = { row_id: this.row.id, column_id: this.column.id };\n        this.to_url = function( id_only ) {\n            if (this.row.pk_value == null) {\n                console.error('You must call a row with "meta_data: true" in order to use the to_url function');\n                throw 'Datum.js: Programming Error';\n            }\n            return id_only ? '/field/' + this.row.relation.schema.name + '/' + this.row.relation.name + '/' + /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value + '/' + this.column.name :\n                this.row.relation.schema.database.endpoint.url + '/field/' + this.row.relation.schema.name + '/' + this.row.relation.name + '/' + /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value + '/' + this.column.name;\n            };\n    };\n    AQ.Field.prototype = {\n        constructor: AQ.Field,\n        get: function()          { return this.row.get(this.name); },\n        set: function(value)     { this.value = value; return this.row.set(this.name, value); },\n        update: function()       { return this.row.update(); } // TODO: This is wrong\n    };\n\n    /*--------------------------------- * Function * ---------------------------------*/\n    AQ.Function = function( schema, name, args ) {\n        this.schema = schema;\n        this.name = name;\n\n        if(args instanceof Array) {\n            this.args = '{' + args.join(',') + '}';\n        }\n        else {\n            this.args = args;\n        }\n\n        this.id = { schema_id: this.schema.id, name: this.name, args: this.args };\n        this.to_url = function( id_only ) {\n           var base_url = id_only ? '' : this.schema.database.endpoint.url;\n           if (typeof this.args != 'undefined') {\n               return base_url + '/function/' + this.schema.name + '/' + this.name + '/' + this.args;\n           }\n           return base_url + '/function/' + this.schema.name + '/' + this.name;\n        };\n    };\n    AQ.Function.prototype.constructor = AQ.Function;\n\n    /*--------------------------------- * Function Result * ---------------------------------*/\n    AQ.FunctionResult = function( fn, response ) {\n        this.function = fn;\n        this.schema = fn.schema;\n        this.row_data = response.result[0].row;\n        this.rows = response.result;\n        this.columns = response.columns;\n    };\n    AQ.FunctionResult.prototype = {\n        constructor: AQ.FunctionResult,\n        get: function( name )           { return this.row_data[name]; },\n        to_string: function()           { return JSON.stringify(this.row_data); }\n    };\n    AQ.FunctionResult.prototype.map = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n        }.bind(this)).map(fn);\n    };\n    AQ.FunctionResult.prototype.forEach = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n        }.bind(this)).forEach(fn);\n    };\n    AQ.FunctionResult.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options )  {\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.function.schema.database;\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: '=',\n            value: this.get(self_column_name)\n        });\n\n        return db.schema(schema_name).relation(relation_name).rows(options);\n    };\n    AQ.FunctionResult.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.function.schema.database;\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: '=',\n            value: this.get(self_column_name)\n        });\n\n        return db.schema(schema_name).relation(relation_name).row(options);\n    };\n\n    /*--------------------------------- * Function Result Set * ---------------------------------*/\n    AQ.FunctionResultSet = function( fn, response ) {\n        this.function = fn;\n        this.schema = fn.schema;\n        this.columns = response.columns;\n        this.rows = response.result;\n    };\n    AQ.FunctionResultSet.prototype.constructor = AQ.FunctionResultSet;\n    AQ.FunctionResultSet.prototype.map = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n        }.bind(this)).map(fn);\n    };\n    AQ.FunctionResultSet.prototype.forEach = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n        }.bind(this)).forEach(fn);\n    };\n    AQ.FunctionResultSet.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.function.schema.database;\n\n        var values = this.map(function(row) {\n            return row.get(self_column_name);\n        });\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: 'in',\n            value: values\n        });\n\n        return db.schema(schema_name).relation(relation_name).rows(options);\n    };\n    AQ.FunctionResultSet.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.function.schema.database;\n\n        var values = this.map(function(row) {\n            return row.get(self_column_name);\n        });\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: 'in',\n            value: values\n        });\n\n        return db.schema(schema_name).relation(relation_name).row(options);\n\n    };\n\n    window.AQ = AQ;\n    return AQ;\n});
\\x2b7814d3fca2e99e56c51b6ff2aa313ea6e9da6424804240aa8ad891fdfe0900	README
\\x32beddbd5a085252a47cdc13528d094a3f04cb6de4ca2180bc9e1b08bf08a26e	69200d8d-a441-4b84-b726-d94079211751
\\x358e87279d9db3e60d20bd67e1aae33c4e8bbc8f59271e8d8ebe2ea8771acc75	/*******************************************************************************\n * Datum.js\n *\n * Created by Aquameta Labs, an open source company in Portland Oregon, USA.\n * Company: http://aquameta.com/\n * Project: http://blog.aquameta.com/\n  /******************************************************************************/\ndefine(['/jQuery.min.js', '/socket.io-client-1.4.8.min.js'], function($, io, undefined) {\n    'use strict';\n    var AQ = AQ || {};\n\n// Note: Add `?events=false` to a url to stop all events\nconst query = new Set(location.search.slice(1).split('&'));\n\n// TODO: how does session persistence work for events\nconst sessionId = getPersistedSessionId();\nif (sessionId) {\n  // TODO: Can we use beacon or beforeunload to send detach event?\n  fetch(`/_socket/detach/${sessionId}`);\n}\n// TODO: Maybe sessionIds should be stored in localStorage as an array and when\n// we try to detach them, we can get a payload back that says whether it was\n// successful or not\nsessionStorage.clear();\n\nfunction buildQueryString(options) {\n  const keys = [];\n\n  if (typeof options != 'undefined') {\n    // Meta data defaults to true;\n    if (typeof options.meta_data == 'undefined') {\n      options.meta_data = true;\n    }\n\n    // Map the keys of the options object to an array of encoded url components\n    const params = Object.entries(options).sort(([a], [b]) =>\n      a.localeCompare(b)\n    );\n    for (let [key, value] of params) {\n      switch (key) {\n        case 'where':\n          // where: { name: 'column_name', op: '=', value: 'value' }\n          // where: [{ name: 'column_name', op: '=', value: 'value' }]\n          if (typeof value.length == 'undefined') value = [value];\n\n          keys.push(\n            value\n              .map(function (where) {\n                return 'where=' + encodeURIComponent(JSON.stringify(where));\n              })\n              .join('&')\n          );\n          break;\n\n        case 'order_by':\n          // So many possibilities...\n          // order_by: '-?column_name'\n          // order_by: ['-?column_name']\n          // order_by: { 'column_name': 'asc|desc' }\n          // order_by: [{ 'column_name': 'asc|desc' }]\n          // order_by: { column: 'column_name', direction: 'asc|desc' }\n          // order_by: [{ column: 'column_name', direction: 'asc|desc' }]\n          if (typeof value.length == 'undefined') value = [value];\n\n          keys.push(\n            key +\n              '=' +\n              encodeURIComponent(\n                value\n                  .map(function (o) {\n                    return (\n                      (typeof o.direction != 'undefined' && o.direction != 'asc'\n                        ? '-'\n                        : '') + o.column\n                    );\n                  })\n                  .join(',')\n              )\n          );\n          break;\n\n        case 'limit':\n        // limit: number\n        /* eslint-disable-next-line no-fallthrough */\n        case 'offset':\n          // offset: number\n          var parsedNum = parseInt(value);\n          if (!isNaN(parsedNum)) {\n            keys.push(key + '=' + parsedNum);\n          }\n          break;\n\n        case 'session_id':\n          keys.push('session_id=' + encodeURIComponent(JSON.stringify(value)));\n          break;\n\n        case 'meta_data':\n        case 'args':\n        case 'exclude':\n        case 'include':\n          keys.push(key + '=' + encodeURIComponent(JSON.stringify(value)));\n          break;\n        default:\n          console.log('query_options: could not find key', key, value);\n      }\n    }\n  }\n\n  // Return the query string by joining the array with &'s\n  return keys.length ? '?' + keys.join('&') : '?';\n}\n\nfunction getPersistedSessionId() {\n  return sessionStorage.getItem('sessionId') || null;\n}\n\nfunction persistSessionId(sessionId) {\n  if (sessionId) {\n    sessionStorage.setItem('sessionId', sessionId);\n  }\n}\n\nclass Socket {\n  constructor() {\n    this.isAttached = false;\n    this.sessionId = null;\n    this.intendedSessionId = null;\n    this._socket = io('/');\n    this._socket.on('event', this.onMessage.bind(this));\n    this._socket.on('connect', () => {\n      if (!this.isAttached) {\n        if (this.sessionId) {\n          this.attach(this.sessionId);\n        } else if (this.intendedSessionId) {\n          this.attach(this.intendedSessionId);\n        }\n        // else { connectSession has not been called yet }\n      }\n    });\n    this._socket.on('disconnect', () => {\n      this.isAttached = false;\n      // socket.io will handle reconnecting\n    });\n    this.cache = {};\n  }\n  onMessage(event) {\n    let response;\n    try {\n      response = JSON.parse(event);\n    } catch (e) {\n      console.error('socket: error while parsing event', e);\n      return;\n    }\n\n    switch (response.type) {\n      case 'attached':\n        this.isAttached = true;\n        this.sessionId = response.sessionId;\n        this.intendedSessionId = null;\n        console.log('socket attached', response.sessionId);\n        break;\n\n      case 'event':\n        this.handleEvent(response.data);\n        break;\n    }\n  }\n  handleEvent(event) {\n    const {\n      subscription_type: subscriptionType,\n      payload,\n      operation,\n      row_id: rowId,\n    } = event;\n    console.log({subscriptionType, payload, operation, rowId});\n\n    switch (subscriptionType) {\n      case 'table':\n        // get table\n        // call rowset.onUpdate for each of them\n        console.log(subscriptionType + ':' + operation);\n        break;\n      case 'column':\n        console.log(subscriptionType + ':' + operation);\n        break;\n      case 'row':\n        console.log(subscriptionType + ':' + operation);\n        break;\n      case 'field':\n        console.log(subscriptionType + ':' + operation);\n        break;\n      default:\n        break;\n    }\n    // TODO: Delete event\n  }\n  attach(sessionId) {\n    if (!this.sessionId) {\n      this.intendedSessionId = sessionId;\n    }\n    if (this._socket.connected) {\n      if (!sessionId) {\n        console.error('socket error: invalid session id', sessionId);\n      }\n      this._socket.emit('attach', sessionId);\n    }\n    // else { socket will attempt to attach when connected }\n  }\n}\n\n/* eslint-disable-next-line no-unused-vars */\nclass Endpoint {\n  constructor(url, evented) {\n    this.url = url;\n    this.evented = query.has('events=false') ? false : evented;\n    this.cache = {};\n    this.sessionId = null; // = getPersistedSessionId();\n    this.socket = this.evented ? new Socket() : null;\n  }\n  connectSession(sessionId) {\n    this.sessionId = sessionId;\n    if (this.socket) {\n      this.socket.attach(sessionId);\n    }\n  }\n  _resource(method, meta_id, args, data) {\n    args = args || {};\n\n    $('.debugger3').trigger('debugger_request', {\n      method: method,\n      meta_id: meta_id,\n      args: args,\n      data: data,\n    });\n\n    // Get use_cache from args or data\n    let use_cache = false;\n    if (!data && args.use_cache) {\n      use_cache = args.use_cache;\n      delete args.use_cache;\n    } else if (data?.use_cache) {\n      use_cache = data.use_cache;\n      delete data.use_cache;\n    }\n\n    // allow un-evented call by passing false for 'events'\n    const passed = Object.hasOwn(args, 'events');\n    const isTruthy = Boolean(args.events);\n    if (!passed || isTruthy) {\n      // If this connection is evented, get event_session_id\n      if (this.evented && this.sessionId) {\n        args.session_id = this.sessionId;\n      }\n    }\n    delete args.events;\n\n    // URLs\n    const id_url = meta_id.to_url(true); // ID part of the URL only\n    const url_without_query = this.url + id_url;\n    const url_with_query = url_without_query + buildQueryString(args);\n\n    // Check cache\n    if (use_cache && url_with_query in this.cache) {\n      return this.cache[url_with_query];\n    }\n\n    // If query string is too long, upgrade GET method to POST\n    if (method == 'GET' && (location.host + url_with_query).length > 1000) {\n      method = 'POST';\n    }\n\n    const headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n\n    const init_obj = {\n      method: method,\n      headers: headers,\n      credentials: 'same-origin',\n    };\n\n    // Don't add data on GET requests\n    if (method !== 'GET') {\n      init_obj.body = JSON.stringify(data);\n    }\n\n    const request = fetch(\n      method === 'GET' ? url_with_query : url_without_query,\n      init_obj\n    )\n      .then(function (response) {\n        // this will never happen\n        // JSON was returned from WebSocket\n        if (typeof response.json == 'undefined') {\n          // TODO: ? Unfortunately this has no HTTP status like the result of fetch\n          return response;\n        }\n\n        // Request object was returned from fetch\n        // Read json stream\n        var json = response.json();\n\n        if (response.status >= 200 && response.status < 300) {\n          return json;\n        }\n\n        // If bad request (code 300 or higher), reject promise\n        return json.then(Promise.reject.bind(Promise));\n      })\n      .catch(function (server_error) {\n        // Construct real Error object\n        const err = new Error(server_error.message.message);\n        err.metadata = server_error.message || {};\n        err.metadata.status_code = server_error.status_code;\n        err.metadata.title = server_error.title;\n\n        // Log error in collapsed group\n        console.groupCollapsed(\n          method,\n          server_error.status_code,\n          server_error.title\n        );\n        // console.error(url_without_query);\n        if ('message' in server_error) {\n          console.error(method == 'GET' ? url_with_query : url_without_query);\n          console.error(server_error.message.message);\n          console.error(server_error.message.context);\n        }\n        console.groupEnd();\n\n        throw err;\n      });\n\n    // Check cache for GET/POST\n    if (use_cache && (method == 'GET' || method == 'POST')) {\n      this.cache[url_with_query] = request;\n    }\n\n    return request;\n  }\n\n  get(meta_id, args) {\n    return this._resource('GET', meta_id, args);\n  }\n\n  post(meta_id, data) {\n    return this._resource('POST', meta_id, {}, data);\n  }\n\n  patch(meta_id, data) {\n    return this._resource('PATCH', meta_id, {}, data);\n  }\n\n  delete(meta_id, args) {\n    return this._resource('DELETE', meta_id, args);\n  }\n}\n\nAQ.uuid = function () {\n  var d = new Date().getTime();\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c == 'x' ? r : (r & 0x7) | 0x8).toString(16);\n  });\n};\n/*--------------------------------- * Database * ---------------------------------*/\nAQ.Database = function (url, settings, ready_callback) {\n  this.settings = settings;\n\n  if (typeof this.settings.evented === 'string') {\n    console.warn(\n      'AQ.Database: `evented` setting has been deprecated. Use `events=true|false` instead'\n    );\n    delete this.settings.evented;\n  }\n\n  this.settings.events = this.settings.events || true;\n  this.endpoint = new Endpoint(url, this.settings.events);\n\n  if (this.settings.events) {\n    this.schema('event')\n      .function('session_create')\n      .then(\n        function (result) {\n          const sessionId = result.get('session_create');\n          if (sessionId) {\n            this.endpoint.connectSession(sessionId);\n            persistSessionId(sessionId);\n          } else {\n            console.log('got a null sessionId', sessionId);\n          }\n        }.bind(this)\n      );\n  }\n};\nAQ.Database.prototype.constructor = AQ.Database;\nAQ.Database.prototype.schema = function (name) {\n  return new AQ.Schema(this, name);\n};\n\n/*--------------------------------- * Schema * ---------------------------------*/\nAQ.Schema = function (database, name) {\n  this.database = database;\n  this.name = name;\n  this.id = {name: this.name};\n};\nAQ.Schema.prototype.constructor = AQ.Schema;\nAQ.Schema.prototype.relation = function (name) {\n  return new AQ.Relation(this, name);\n};\nAQ.Schema.prototype.table = function (name) {\n  return new AQ.Table(this, name);\n};\nAQ.Schema.prototype.view = function (name) {\n  return new AQ.View(this, name);\n};\nAQ.Schema.prototype.function = function (identifier, args, options) {\n  // Function identifier (name and parameter list)\n  if (typeof identifier == 'object') {\n    var name = identifier.name;\n    var parameter_type_list = identifier.parameters;\n  }\n  // Selecting a function without specifying the parameters\n  else {\n    var name = identifier;\n  }\n\n  options = options || {};\n\n  // Arguments\n  options.args = {};\n\n  // `args = undefined` will pass no arguments into the server-side function\n  if (typeof args != 'undefined') {\n    // some_function?args={ kwargs: {} } -- Key/value object\n    if (!(args instanceof Array) && args instanceof Object) {\n      options.args.kwargs = args;\n    }\n    // some_function?args={ vals: [] } -- Array\n    else {\n      if (!(args instanceof Array)) {\n        // Regular value is placed into array\n        args = [args];\n      }\n      options.args.vals = args;\n    }\n  }\n\n  var fn = new AQ.Function(this, name, parameter_type_list);\n\n  return this.database.endpoint\n    .get(fn, options)\n    .then(\n      function (response) {\n        if (!response) {\n          throw 'Empty response';\n        }\n        /* sometimes results can be empty and that is ok.\n                else if (!response.result.length) {\n                    throw 'Result set empty';\n                }\n\t\t\t\t*/\n        if (response.result.length != 1) {\n          return new AQ.FunctionResultSet(fn, response);\n        }\n        return new AQ.FunctionResult(fn, response);\n      }.bind(this)\n    )\n    .catch(function (err) {\n      throw err;\n    });\n};\n\n/*--------------------------------- * Relation * ---------------------------------*/\nAQ.Relation = function (schema, name) {\n  this.schema = schema;\n  this.name = name;\n  this.id = {schema_id: this.schema.id, name: this.name};\n};\nAQ.Relation.prototype.constructor = AQ.Relation;\nAQ.Relation.prototype.to_url = function (id_only) {\n  return id_only\n    ? '/relation/' + this.schema.name + '/' + this.name\n    : this.schema.database.endpoint.url +\n        '/relation/' +\n        this.schema.name +\n        '/' +\n        this.name;\n};\nAQ.Relation.prototype.column = function (name) {\n  return new AQ.Column(this, name);\n};\nAQ.Relation.prototype.rows = function (options) {\n  return this.schema.database.endpoint\n    .get(this, options)\n    .then(\n      function (rows) {\n        if (rows == null) {\n          throw 'Empty response';\n        } /*\n                else if (rows.result.length < 1) {\n                    throw 'No rows returned';\n                }*/\n        return new AQ.Rowset(this, rows, options);\n      }.bind(this)\n    )\n    .catch(function (err) {\n      throw 'Rows request failed: ' + err;\n    });\n};\nAQ.Relation.prototype.row = function () {\n  // Multiple different ways to call 'row' function\n\n  // 1. Calling with Options object\n  if (typeof arguments[0] == 'object') {\n    var obj = arguments[0];\n    var args = arguments[1] || {};\n\n    // AQ.Relation.row({ where: { column_name: 'column_name', op: '=', value: 'value' } })\n    // Maybe it should be this one: AQ.Relation.row({ where: { column_name: value } })\n    if (typeof obj.where != 'undefined') {\n      args.where = obj.where;\n    }\n    // AQ.Relation.row({ column_name: 'column_name', op: '=', value: 'value' })\n    // Maybe it should be this one: AQ.Relation.row({ column_name: value })\n    else {\n      args.where = obj;\n    }\n  }\n  // 2. Calling with column_name and value\n  else if (typeof arguments[0] == 'string') {\n    // AQ.Relation.row(column_name, value [, options_obj])\n    var name = arguments[0];\n    var value = arguments[1];\n    var args = arguments[2] || {};\n\n    args.where = {name: name, op: '=', value: value};\n  }\n  // 3. Calling AQ.Relation.row() without arguments\n  else {\n    var args = {};\n  }\n\n  return this.schema.database.endpoint\n    .get(this, args)\n    .then(\n      function (row) {\n        if (row == null) {\n          throw 'Empty response';\n        } else if (row.result.length == 0) {\n          return null; // throw 'No row returned';\n        } else if (row.result.length > 1) {\n          throw 'Multiple rows returned';\n        }\n        return new AQ.Row(this, row);\n      }.bind(this)\n    )\n    .catch(function (err) {\n      throw 'Row request failed: ' + err;\n    });\n};\n\n/*--------------------------------- * Table * ---------------------------------*/\nAQ.Table = function (schema, name) {\n  this.schema = schema;\n  this.name = name;\n  this.id = {schema_id: this.schema.id, name: this.name};\n};\nAQ.Table.prototype = Object.create(AQ.Relation.prototype);\nAQ.Table.prototype.constructor = AQ.Table;\nAQ.Table.prototype.insert = function (data) {\n  if (typeof data == 'undefined') {\n    // table.insert({}) is equivalent to table.insert()\n    // both will insert default values\n    data = {};\n  }\n\n  // Return inserted row promise\n  return this.schema.database.endpoint\n    .patch(this, data)\n    .then(\n      function (inserted_row) {\n        if (inserted_row == null) {\n          throw 'Empty response';\n        }\n        if (typeof data.length != 'undefined' && data.length > 1) {\n          return new AQ.Rowset(this, inserted_row, null);\n        }\n        return new AQ.Row(this, inserted_row);\n      }.bind(this)\n    )\n    .catch(function (err) {\n      throw 'Insert failed: ' + err;\n    });\n};\n\n/*--------------------------------- * View * ---------------------------------*/\nAQ.View = function (schema, name) {\n  this.schema = schema;\n  this.name = name;\n  this.id = {schema_id: this.schema.id, name: this.name};\n};\nAQ.View.prototype = Object.create(AQ.Relation.prototype);\nAQ.View.prototype.constructor = AQ.View;\n\n/*--------------------------------- * Rowset * ---------------------------------*/\nAQ.Rowset = function (relation, response, server_arguments) {\n  this.relation = relation;\n  this.schema = relation.schema;\n  this.columns = response.columns || null;\n  this.pk_column_name = response.pk || null;\n  this.rows = response.result;\n  this.length = response.result.length;\n  this.server_arguments = server_arguments || {};\n};\nAQ.Rowset.prototype.constructor = AQ.Rowset;\nAQ.Rowset.prototype.map = function (fn) {\n  return this.rows\n    .map(\n      function (row) {\n        return new AQ.Row(this.relation, {\n          columns: this.columns,\n          pk: this.pk_column_name,\n          result: [row],\n        });\n      }.bind(this)\n    )\n    .map(fn);\n};\nAQ.Rowset.prototype.forEach = function (fn) {\n  return this.rows\n    .map(\n      function (row) {\n        return new AQ.Row(this.relation, {\n          columns: this.columns,\n          pk: this.pk_column_name,\n          result: [row],\n        });\n      }.bind(this)\n    )\n    .forEach(fn);\n};\nAQ.Rowset.prototype.reload = function () {\n  return this.relation.rows(this.server_arguments);\n};\n\n/**\n * Call AQ.Rowset.where with (where_obj) or use shorthand notation (field, value) - filter results programmatically\n *\n * @param {Object} where_obj\n * @param {[Boolean]} return_first\n * @param {[Boolean]} async\n *\n * OR\n *\n * @param {String} field\n * @param {Any} value\n * @param {[Boolean]} return_first\n * @param {[Boolean]} async\n *\n * @returns {Promise}\n */\nAQ.Rowset.prototype.where = function () {\n  var first = false,\n    async = true,\n    where_obj = {};\n  if (typeof arguments[0] == 'object') {\n    // AQ.Rowset.where(where_obj [, return_first] [, async]);\n    where_obj = arguments[0];\n    var field = where_obj.field;\n    var value = where_obj.value;\n    if (arguments.length > 1) first = arguments[1];\n    if (arguments.length > 2) async = arguments[2];\n  } else if (typeof arguments[0] == 'string' && arguments.length > 1) {\n    // AQ.Rowset.where(field, value [, return_first] [, async]);\n    var field = arguments[0];\n    var value = arguments[1];\n    if (arguments.length > 2) first = arguments[2];\n    if (arguments.length > 3) async = arguments[3];\n  }\n\n  return new Promise(\n    function (resolve, reject) {\n      // TODO lots of logic here\n      // The new rowset that is returned must be in the same format as the response from the server\n\n      if (first) {\n        for (var i = 0; i < this.rows.length; i++) {\n          if (this.rows[i].row[field] == value) {\n            resolve(\n              new AQ.Row(this.relation, {\n                columns: this.columns,\n                result: [this.rows[i]],\n              })\n            );\n          }\n        }\n        reject('could not find ' + field + ' ' + value);\n      } else {\n        var return_rowset = [];\n        for (var i = 0; i < this.rows.length; i++) {\n          if (this.rows[i].row[field] == value) {\n            return_rowset.push(this.rows[i]);\n          }\n        }\n        resolve(\n          new AQ.Rowset(this.relation, {\n            columns: this.columns,\n            result: return_rowset,\n          })\n        );\n      }\n\n      // 2\n\n      // maybe we don't need to search the entire row and instead we return the first item found\n      /*\n            var new_rowset = _.filter(this.rows, function(el) {\n                //return AQ.equals.call(this, el[field], val);\n            });\n*/\n      if (new_rowset.length == 1) {\n        return new AQ.Row(this.relation, new_rowset);\n      } else if (new_rowset.length > 1) {\n        throw 'Multiple Rows Returned';\n      }\n\n      // if row does not exist\n      return null;\n    }.bind(this)\n  );\n};\nAQ.Rowset.prototype.order_by = function (column, direction) {\n  /*\n        var ordered = _.sortBy(this.rows, function(el) {\n            return el.row[column];\n        });\n*/\n  if (direction !== 'asc') {\n    ordered.reverse();\n  }\n  return new AQ.Rowset(this.relation, {columns: this.columns, result: ordered});\n};\nAQ.Rowset.prototype.limit = function (lim) {\n  if (lim <= 0) {\n    throw 'Bad limit';\n  }\n  return new AQ.Rowset(this.relation, {\n    columns: this.columns,\n    result: this.rows.slice(0, lim),\n  });\n};\nAQ.Rowset.prototype.related_rows = function (\n  self_column_name,\n  related_relation_name,\n  related_column_name,\n  options\n) {\n  var relation_parts = related_relation_name.split('.');\n  if (relation_parts.length < 2) {\n    console.error(\n      'Related relation name must be schema qualified (schema_name.relation_name)'\n    );\n    // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n  }\n\n  var schema_name = relation_parts[0];\n  var relation_name = relation_parts[1];\n  var db = this.relation.schema.database;\n\n  var values = this.map(function (row) {\n    return row.get(self_column_name);\n  });\n\n  options = options || {};\n  options.where =\n    options.where instanceof Array\n      ? options.where\n      : typeof options.where == 'undefined'\n      ? []\n      : [options.where];\n  options.where.push({\n    name: related_column_name,\n    op: 'in',\n    value: values,\n  });\n\n  return db.schema(schema_name).relation(relation_name).rows(options);\n};\nAQ.Rowset.prototype.related_row = function (\n  self_column_name,\n  related_relation_name,\n  related_column_name,\n  options\n) {\n  var relation_parts = related_relation_name.split('.');\n  if (relation_parts.length < 2) {\n    console.error(\n      'Related relation name must be schema qualified (schema_name.relation_name)'\n    );\n    // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n  }\n\n  var schema_name = relation_parts[0];\n  var relation_name = relation_parts[1];\n  var db = this.relation.schema.database;\n\n  var values = this.map(function (row) {\n    return row.get(self_column_name);\n  });\n\n  options = options || {};\n  options.where =\n    options.where instanceof Array\n      ? options.where\n      : typeof options.where == 'undefined'\n      ? []\n      : [options.where];\n  options.where.push({\n    name: related_column_name,\n    op: 'in',\n    value: values,\n  });\n\n  return db.schema(schema_name).relation(relation_name).row(options);\n};\n\n/*--------------------------------- * Row * ---------------------------------*/\nAQ.Row = function (relation, response) {\n  this.relation = relation;\n  this.schema = relation.schema;\n  this.row_data = response.result[0].row;\n\n  this.cached_fields = {};\n  this.columns = response.columns || null;\n  this.pk_column_name = null;\n  this.pk_value = null;\n  this.id = null;\n  this.to_url = function () {\n    console.error(\n      'You must call a row with "meta_data: true" in order to use the to_url function'\n    );\n    throw 'Datum.js: Programming Error';\n  };\n\n  if (typeof response.pk != 'undefined') {\n    this.pk_column_name = response.pk;\n    this.pk_value = this.get(this.pk_column_name);\n    // this.id = {"pk_column_id":{"relation_id":{"schema_id":{"name":this.schema.name},"name":this.relation.name},"name":this.pk_column_name},"pk_value": this.pk_value}\n    this.id = {\n      pk_column_id: {\n        relation_id: this.relation.id,\n        name: this.pk_column_name,\n      },\n      pk_value: this.pk_value,\n    };\n\n    this.to_url = function (id_only) {\n      return id_only\n        ? '/row/' +\n            this.relation.schema.name +\n            '/' +\n            this.relation.name +\n            '/' +\n            /*JSON.stringify(this.pk_value)*/ this.pk_value\n        : this.relation.schema.database.endpoint.url +\n            '/row/' +\n            this.relation.schema.name +\n            '/' +\n            this.relation.name +\n            '/' +\n            /*JSON.stringify(this.pk_value)*/ this.pk_value;\n    };\n  }\n};\nAQ.Row.prototype = {\n  constructor: AQ.Row,\n  get: function (name) {\n    return this.row_data[name];\n  },\n  set: function (name, value) {\n    this.row_data[name] = value;\n    return this;\n  },\n  to_string: function () {\n    return JSON.stringify(this.row_data);\n  },\n  clone: function () {\n    return new AQ.Row(this.relation, {\n      columns: this.columns,\n      pk: this.pk_column_name,\n      result: [{row: this.row_data}],\n    });\n  },\n  field: function (name) {\n    if (typeof this.cached_fields[name] == 'undefined') {\n      this.cached_fields[name] = new AQ.Field(\n        this,\n        name,\n        name === this.pk_column_name\n      );\n    }\n    return this.cached_fields[name];\n  },\n  fields: function () {\n    if (this.columns != null) {\n      return this.columns.map(\n        function (c) {\n          return this.field(c.name);\n        }.bind(this)\n      );\n    }\n    return null;\n  },\n};\nAQ.Row.prototype.update = function () {\n  return this.relation.schema.database.endpoint\n    .patch(this, this.row_data)\n    .then(\n      function (response) {\n        if (response == null) {\n          throw 'Empty response';\n        }\n        return this;\n      }.bind(this)\n    )\n    .catch(function (err) {\n      throw 'Update failed: ' + err;\n    });\n};\nAQ.Row.prototype.delete = function () {\n  return this.relation.schema.database.endpoint\n    .delete(this)\n    .then(function (response) {\n      if (response == null) {\n        throw 'Empty response';\n      }\n    })\n    .catch(function (err) {\n      throw 'Delete failed: ' + err;\n    });\n};\nAQ.Row.prototype.related_rows = function (\n  self_column_name,\n  related_relation_name,\n  related_column_name,\n  options\n) {\n  var relation_parts = related_relation_name.split('.');\n  if (relation_parts.length < 2) {\n    console.error(\n      'Related relation name must be schema qualified (schema_name.relation_name)'\n    );\n    // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n  }\n\n  var schema_name = relation_parts[0];\n  var relation_name = relation_parts[1];\n  var db = this.relation.schema.database;\n\n  options = options || {};\n  options.where =\n    options.where instanceof Array\n      ? options.where\n      : typeof options.where == 'undefined'\n      ? []\n      : [options.where];\n  options.where.push({\n    name: related_column_name,\n    op: '=',\n    value: this.get(self_column_name),\n  });\n\n  return db.schema(schema_name).relation(relation_name).rows(options);\n};\nAQ.Row.prototype.related_row = function (\n  self_column_name,\n  related_relation_name,\n  related_column_name,\n  options\n) {\n  var relation_parts = related_relation_name.split('.');\n  if (relation_parts.length < 2) {\n    console.error(\n      'Related relation name must be schema qualified (schema_name.relation_name)'\n    );\n    // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n  }\n\n  var schema_name = relation_parts[0];\n  var relation_name = relation_parts[1];\n  var db = this.relation.schema.database;\n\n  options = options || {};\n  options.where =\n    options.where instanceof Array\n      ? options.where\n      : typeof options.where == 'undefined'\n      ? []\n      : [options.where];\n  options.where.push({\n    name: related_column_name,\n    op: '=',\n    value: this.get(self_column_name),\n  });\n\n  return db.schema(schema_name).relation(relation_name).row(options);\n};\n\n/*--------------------------------- * Column * ---------------------------------*/\nAQ.Column = function (relation, name) {\n  this.relation = relation;\n  this.name = name;\n  this.id = {relation_id: relation.id, name: name};\n};\nAQ.Column.prototype.constructor = AQ.Column;\n\n/*--------------------------------- * Field * ---------------------------------*/\nAQ.Field = function (row, name, pk) {\n  this.row = row;\n  this.column = new AQ.Column(row.relation, name);\n  this.is_primary_key = pk;\n  this.name = name;\n  this.value = row.get(name);\n  this.id = {row_id: this.row.id, column_id: this.column.id};\n  this.to_url = function (id_only) {\n    if (this.row.pk_value == null) {\n      console.error(\n        'You must call a row with "meta_data: true" in order to use the to_url function'\n      );\n      throw 'Datum.js: Programming Error';\n    }\n    return id_only\n      ? '/field/' +\n          this.row.relation.schema.name +\n          '/' +\n          this.row.relation.name +\n          '/' +\n          /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value +\n          '/' +\n          this.column.name\n      : this.row.relation.schema.database.endpoint.url +\n          '/field/' +\n          this.row.relation.schema.name +\n          '/' +\n          this.row.relation.name +\n          '/' +\n          /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value +\n          '/' +\n          this.column.name;\n  };\n};\nAQ.Field.prototype = {\n  constructor: AQ.Field,\n  get: function () {\n    return this.row.get(this.name);\n  },\n  set: function (value) {\n    this.value = value;\n    return this.row.set(this.name, value);\n  },\n  update: function () {\n    return this.row.update();\n  }, // TODO: This is wrong\n};\n\n/*--------------------------------- * Function * ---------------------------------*/\nAQ.Function = function (schema, name, args) {\n  this.schema = schema;\n  this.name = name;\n\n  if (args instanceof Array) {\n    this.args = '{' + args.join(',') + '}';\n  } else {\n    this.args = args;\n  }\n\n  this.id = {schema_id: this.schema.id, name: this.name, args: this.args};\n  this.to_url = function (id_only) {\n    var base_url = id_only ? '' : this.schema.database.endpoint.url;\n    if (typeof this.args != 'undefined') {\n      return (\n        base_url +\n        '/function/' +\n        this.schema.name +\n        '/' +\n        this.name +\n        '/' +\n        this.args\n      );\n    }\n    return base_url + '/function/' + this.schema.name + '/' + this.name;\n  };\n};\nAQ.Function.prototype.constructor = AQ.Function;\n\n/*--------------------------------- * Function Result * ---------------------------------*/\nAQ.FunctionResult = function (fn, response) {\n  this.function = fn;\n  this.schema = fn.schema;\n  this.row_data = response.result[0].row;\n  this.rows = response.result;\n  this.columns = response.columns;\n};\nAQ.FunctionResult.prototype = {\n  constructor: AQ.FunctionResult,\n  get: function (name) {\n    return this.row_data[name];\n  },\n  to_string: function () {\n    return JSON.stringify(this.row_data);\n  },\n};\nAQ.FunctionResult.prototype.map = function (fn) {\n  return this.rows\n    .map(\n      function (row) {\n        return new AQ.FunctionResult(this.function, {\n          columns: this.columns,\n          result: [row],\n        });\n      }.bind(this)\n    )\n    .map(fn);\n};\nAQ.FunctionResult.prototype.forEach = function (fn) {\n  return this.rows\n    .map(\n      function (row) {\n        return new AQ.FunctionResult(this.function, {\n          columns: this.columns,\n          result: [row],\n        });\n      }.bind(this)\n    )\n    .forEach(fn);\n};\nAQ.FunctionResult.prototype.related_rows = function (\n  self_column_name,\n  related_relation_name,\n  related_column_name,\n  options\n) {\n  var relation_parts = related_relation_name.split('.');\n  if (relation_parts.length < 2) {\n    console.error(\n      'Related relation name must be schema qualified (schema_name.relation_name)'\n    );\n    // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n  }\n\n  var schema_name = relation_parts[0];\n  var relation_name = relation_parts[1];\n  var db = this.function.schema.database;\n\n  options = options || {};\n  options.where =\n    options.where instanceof Array\n      ? options.where\n      : typeof options.where == 'undefined'\n      ? []\n      : [options.where];\n  options.where.push({\n    name: related_column_name,\n    op: '=',\n    value: this.get(self_column_name),\n  });\n\n  return db.schema(schema_name).relation(relation_name).rows(options);\n};\nAQ.FunctionResult.prototype.related_row = function (\n  self_column_name,\n  related_relation_name,\n  related_column_name,\n  options\n) {\n  var relation_parts = related_relation_name.split('.');\n  if (relation_parts.length < 2) {\n    console.error(\n      'Related relation name must be schema qualified (schema_name.relation_name)'\n    );\n    // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n  }\n\n  var schema_name = relation_parts[0];\n  var relation_name = relation_parts[1];\n  var db = this.function.schema.database;\n\n  options = options || {};\n  options.where =\n    options.where instanceof Array\n      ? options.where\n      : typeof options.where == 'undefined'\n      ? []\n      : [options.where];\n  options.where.push({\n    name: related_column_name,\n    op: '=',\n    value: this.get(self_column_name),\n  });\n\n  return db.schema(schema_name).relation(relation_name).row(options);\n};\n\n/*--------------------------------- * Function Result Set * ---------------------------------*/\nAQ.FunctionResultSet = function (fn, response) {\n  this.function = fn;\n  this.schema = fn.schema;\n  this.columns = response.columns;\n  this.rows = response.result;\n};\nAQ.FunctionResultSet.prototype.constructor = AQ.FunctionResultSet;\nAQ.FunctionResultSet.prototype.map = function (fn) {\n  return this.rows\n    .map(\n      function (row) {\n        return new AQ.FunctionResult(this.function, {\n          columns: this.columns,\n          result: [row],\n        });\n      }.bind(this)\n    )\n    .map(fn);\n};\nAQ.FunctionResultSet.prototype.forEach = function (fn) {\n  return this.rows\n    .map(\n      function (row) {\n        return new AQ.FunctionResult(this.function, {\n          columns: this.columns,\n          result: [row],\n        });\n      }.bind(this)\n    )\n    .forEach(fn);\n};\nAQ.FunctionResultSet.prototype.related_rows = function (\n  self_column_name,\n  related_relation_name,\n  related_column_name,\n  options\n) {\n  var relation_parts = related_relation_name.split('.');\n  if (relation_parts.length < 2) {\n    console.error(\n      'Related relation name must be schema qualified (schema_name.relation_name)'\n    );\n    // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n  }\n\n  var schema_name = relation_parts[0];\n  var relation_name = relation_parts[1];\n  var db = this.function.schema.database;\n\n  var values = this.map(function (row) {\n    return row.get(self_column_name);\n  });\n\n  options = options || {};\n  options.where =\n    options.where instanceof Array\n      ? options.where\n      : typeof options.where == 'undefined'\n      ? []\n      : [options.where];\n  options.where.push({\n    name: related_column_name,\n    op: 'in',\n    value: values,\n  });\n\n  return db.schema(schema_name).relation(relation_name).rows(options);\n};\nAQ.FunctionResultSet.prototype.related_row = function (\n  self_column_name,\n  related_relation_name,\n  related_column_name,\n  options\n) {\n  var relation_parts = related_relation_name.split('.');\n  if (relation_parts.length < 2) {\n    console.error(\n      'Related relation name must be schema qualified (schema_name.relation_name)'\n    );\n    // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n  }\n\n  var schema_name = relation_parts[0];\n  var relation_name = relation_parts[1];\n  var db = this.function.schema.database;\n\n  var values = this.map(function (row) {\n    return row.get(self_column_name);\n  });\n\n  options = options || {};\n  options.where =\n    options.where instanceof Array\n      ? options.where\n      : typeof options.where == 'undefined'\n      ? []\n      : [options.where];\n  options.where.push({\n    name: related_column_name,\n    op: 'in',\n    value: values,\n  });\n\n  return db.schema(schema_name).relation(relation_name).row(options);\n};\n\nwindow.AQ = AQ;\n    return AQ;\n});\n
\\x3afb519bca83944b027b1a4cc2b90451a47572c72ba9555d43c82bae3e41c051	a5b58074-e2ba-47f5-9b4c-697e8f7e2a90
\\x3d3026babd6de490bded92a7d041d498db7f4368edb03da8b534c998121a2c50	/*******************************************************************************\n * Datum.js\n *\n * Created by Aquameta Labs, an open source company in Portland Oregon, USA.\n * Company: http://aquameta.com/\n * Project: http://blog.aquameta.com/\n  /******************************************************************************/\n/* eslint-env browser */\n/* globals Set Map define */\ndefine(['/jQuery.min.js', '/socket.io-client-1.4.8.min.js'], function (\n  $,\n  io,\n  undefined // eslint-disable-line\n) {\n  'use strict';\n  var AQ = AQ || {};\n\n  // Note: Add `?events=false` to a url to stop all events\n  const query = new Set(location.search.slice(1).split('&'));\n\n  // TODO: how does session persistence work for events\n  const sessionId = getPersistedSessionId();\n  if (sessionId) {\n    // TODO: Can we use beacon or beforeunload to send detach event?\n    fetch(`/_socket/detach/${sessionId}`);\n  }\n  // TODO: Maybe sessionIds should be stored in localStorage as an array and when\n  // we try to detach them, we can get a payload back that says whether it was\n  // successful or not\n  sessionStorage.clear();\n\n  function buildQueryString(options) {\n    const keys = [];\n\n    if (typeof options != 'undefined') {\n      // Meta data defaults to true;\n      if (typeof options.meta_data == 'undefined') {\n        options.meta_data = true;\n      }\n\n      // Map the keys of the options object to an array of encoded url components\n      const params = Object.entries(options).sort(([a], [b]) =>\n        a.localeCompare(b)\n      );\n      for (let [key, value] of params) {\n        switch (key) {\n          case 'where':\n            // where: { name: 'column_name', op: '=', value: 'value' }\n            // where: [{ name: 'column_name', op: '=', value: 'value' }]\n            if (typeof value.length == 'undefined') value = [value];\n\n            keys.push(\n              value\n                .map(function (where) {\n                  return 'where=' + encodeURIComponent(JSON.stringify(where));\n                })\n                .join('&')\n            );\n            break;\n\n          case 'order_by':\n            // So many possibilities...\n            // order_by: '-?column_name'\n            // order_by: ['-?column_name']\n            // order_by: { 'column_name': 'asc|desc' }\n            // order_by: [{ 'column_name': 'asc|desc' }]\n            // order_by: { column: 'column_name', direction: 'asc|desc' }\n            // order_by: [{ column: 'column_name', direction: 'asc|desc' }]\n            if (typeof value.length == 'undefined') value = [value];\n\n            keys.push(\n              key +\n                '=' +\n                encodeURIComponent(\n                  value\n                    .map(function (o) {\n                      return (\n                        (typeof o.direction != 'undefined' &&\n                        o.direction != 'asc'\n                          ? '-'\n                          : '') + o.column\n                      );\n                    })\n                    .join(',')\n                )\n            );\n            break;\n\n          case 'limit':\n          // limit: number\n          /* eslint-disable-next-line no-fallthrough */\n          case 'offset':\n            // offset: number\n            var parsedNum = parseInt(value);\n            if (!isNaN(parsedNum)) {\n              keys.push(key + '=' + parsedNum);\n            }\n            break;\n\n          case 'session_id':\n            keys.push(\n              'session_id=' + encodeURIComponent(JSON.stringify(value))\n            );\n            break;\n\n          case 'meta_data':\n          case 'args':\n          case 'exclude':\n          case 'include':\n            keys.push(key + '=' + encodeURIComponent(JSON.stringify(value)));\n            break;\n          default:\n            console.log('query_options: could not find key', key, value);\n        }\n      }\n    }\n\n    // Return the query string by joining the array with &'s\n    return keys.length ? '?' + keys.join('&') : '?';\n  }\n\n  function getPersistedSessionId() {\n    return sessionStorage.getItem('sessionId') || null;\n  }\n\n  function persistSessionId(sessionId) {\n    if (sessionId) {\n      sessionStorage.setItem('sessionId', sessionId);\n    }\n  }\n\n  class Socket {\n    constructor(handleEvent) {\n      this.handleEvent = handleEvent;\n      this.isAttached = false;\n      this.sessionId = null;\n      this.intendedSessionId = null;\n      this._socket = io('/');\n      this._socket.on('event', this.onMessage.bind(this));\n      this._socket.on('connect', () => {\n        if (!this.isAttached) {\n          if (this.sessionId) {\n            this.attach(this.sessionId);\n          } else if (this.intendedSessionId) {\n            this.attach(this.intendedSessionId);\n          }\n          // else { connectSession has not been called yet }\n        }\n      });\n      this._socket.on('disconnect', () => {\n        this.isAttached = false;\n        // socket.io will handle reconnecting\n      });\n      this.cache = {};\n    }\n    onMessage(event) {\n      let response;\n      try {\n        response = JSON.parse(event);\n      } catch (e) {\n        console.error('socket: error while parsing event', e);\n        return;\n      }\n\n      switch (response.type) {\n        case 'attached':\n          this.isAttached = true;\n          this.sessionId = response.sessionId;\n          this.intendedSessionId = null;\n          console.log('socket attached', response.sessionId);\n          break;\n\n        case 'event':\n          this.handleEvent(response.data);\n          break;\n      }\n    }\n    attach(sessionId) {\n      if (!this.sessionId) {\n        this.intendedSessionId = sessionId;\n      }\n      if (this._socket.connected) {\n        if (!sessionId) {\n          console.error('socket error: invalid session id', sessionId);\n        }\n        this._socket.emit('attach', sessionId);\n      }\n      // else { socket will attempt to attach when connected }\n    }\n  }\n\n  class Endpoint {\n    constructor(url, database, evented) {\n      this.url = url;\n      this.database = database;\n      this.evented = query.has('events=false') ? false : evented;\n      this.cache = {};\n      this.sessionId = null; // = getPersistedSessionId();\n      this.socket = this.evented\n        ? new Socket(this.handleEvent.bind(this))\n        : null;\n    }\n    connectSession(sessionId) {\n      this.sessionId = sessionId;\n      if (this.socket) {\n        this.socket.attach(sessionId);\n      }\n    }\n    handleEvent(event) {\n      const {\n        subscription_type: subscriptionType,\n        payload,\n        operation,\n        row_id: rowId,\n      } = event;\n      console.log({subscriptionType, payload, operation, rowId});\n\n      switch (subscriptionType) {\n        case 'table': {\n          console.log(subscriptionType + ':' + operation);\n          const rowsets = this.database.getTracked(\n            relationId(rowId.pk_column_id.relation_id).url()\n          );\n          for (const rowset of rowsets) {\n            rowset._triggerEvent(operation, payload, rowId);\n          }\n          break;\n        }\n        case 'column':\n          console.log(subscriptionType + ':' + operation);\n          break;\n        case 'row':\n          console.log(subscriptionType + ':' + operation);\n          break;\n        case 'field':\n          console.log(subscriptionType + ':' + operation);\n          break;\n        default:\n          break;\n      }\n      // TODO: Delete event\n    }\n    _resource(method, meta_id, args, data) {\n      args = args || {};\n\n      $('.debugger3').trigger('debugger_request', {\n        method: method,\n        meta_id: meta_id,\n        args: args,\n        data: data,\n      });\n\n      // Get use_cache from args or data\n      let use_cache = false;\n      if (!data && args.use_cache) {\n        use_cache = args.use_cache;\n        delete args.use_cache;\n      } else if (data?.use_cache) {\n        use_cache = data.use_cache;\n        delete data.use_cache;\n      }\n\n      // allow un-evented call by passing false for 'events'\n      const passed = Object.hasOwn(args, 'events');\n      const isTruthy = Boolean(args.events);\n      if (!passed || isTruthy) {\n        // If this connection is evented, get event_session_id\n        if (this.evented && this.sessionId) {\n          args.session_id = this.sessionId;\n        }\n      }\n      delete args.events;\n\n      // URLs\n      const id_url = meta_id.to_url(true); // ID part of the URL only\n      const url_without_query = this.url + id_url;\n      const url_with_query = url_without_query + buildQueryString(args);\n\n      // Check cache\n      if (use_cache && url_with_query in this.cache) {\n        return this.cache[url_with_query];\n      }\n\n      // If query string is too long, upgrade GET method to POST\n      if (method == 'GET' && (location.host + url_with_query).length > 1000) {\n        method = 'POST';\n      }\n\n      const headers = new Headers();\n      headers.append('Content-Type', 'application/json');\n\n      const init_obj = {\n        method: method,\n        headers: headers,\n        credentials: 'same-origin',\n      };\n\n      // Don't add data on GET requests\n      if (method !== 'GET') {\n        init_obj.body = JSON.stringify(data);\n      }\n\n      const request = fetch(\n        method === 'GET' ? url_with_query : url_without_query,\n        init_obj\n      )\n        .then(function (response) {\n          // this will never happen\n          // JSON was returned from WebSocket\n          if (typeof response.json == 'undefined') {\n            // TODO: ? Unfortunately this has no HTTP status like the result of fetch\n            return response;\n          }\n\n          // Request object was returned from fetch\n          // Read json stream\n          var json = response.json();\n\n          if (response.status >= 200 && response.status < 300) {\n            return json;\n          }\n\n          // If bad request (code 300 or higher), reject promise\n          return json.then(Promise.reject.bind(Promise));\n        })\n        .catch(function (server_error) {\n          // Construct real Error object\n          const err = new Error(server_error.message.message);\n          err.metadata = server_error.message || {};\n          err.metadata.status_code = server_error.status_code;\n          err.metadata.title = server_error.title;\n\n          // Log error in collapsed group\n          console.groupCollapsed(\n            method,\n            server_error.status_code,\n            server_error.title\n          );\n          // console.error(url_without_query);\n          if ('message' in server_error) {\n            console.error(method == 'GET' ? url_with_query : url_without_query);\n            console.error(server_error.message.message);\n            console.error(server_error.message.context);\n          }\n          console.groupEnd();\n\n          throw err;\n        });\n\n      // Check cache for GET/POST\n      if (use_cache && (method == 'GET' || method == 'POST')) {\n        this.cache[url_with_query] = request;\n      }\n\n      return request;\n    }\n\n    get(meta_id, args) {\n      return this._resource('GET', meta_id, args);\n    }\n\n    post(meta_id, data) {\n      return this._resource('POST', meta_id, {}, data);\n    }\n\n    patch(meta_id, data) {\n      return this._resource('PATCH', meta_id, {}, data);\n    }\n\n    delete(meta_id, args) {\n      return this._resource('DELETE', meta_id, args);\n    }\n  }\n\n  AQ.uuid = function () {\n    var d = new Date().getTime();\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n      /[xy]/g,\n      function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == 'x' ? r : (r & 0x7) | 0x8).toString(16);\n      }\n    );\n  };\n  /*--------------------------------- * Database * ---------------------------------*/\n  AQ.Database = function (url, settings, ready_callback) {\n    this.settings = settings;\n\n    if (typeof this.settings.evented === 'string') {\n      console.warn(\n        'AQ.Database: `evented` setting has been deprecated. Use `events=true|false` instead'\n      );\n      delete this.settings.evented;\n    }\n\n    this.settings.events = this.settings.events || true;\n    this.endpoint = new Endpoint(url, this, this.settings.events);\n    this.tracked = {relation: {}, row: {}, field: {}};\n\n    if (this.settings.events) {\n      this.schema('event')\n        .function('session_create')\n        .then(\n          function (result) {\n            const sessionId = result.get('session_create');\n            if (sessionId) {\n              this.endpoint.connectSession(sessionId);\n              persistSessionId(sessionId);\n            } else {\n              console.log('got a null sessionId', sessionId);\n            }\n          }.bind(this)\n        );\n    }\n  };\n  AQ.Database.prototype.constructor = AQ.Database;\n  AQ.Database.prototype.schema = function (name) {\n    return new AQ.Schema(this, name);\n  };\n  AQ.Database.prototype.getTracked = function (id) {\n    let idType;\n    if (id.startsWith('/relation/')) {\n      idType = 'relation';\n    } else if (id.startsWith('/row/')) {\n      idType = 'row';\n    } else if (id.startsWith('/field/')) {\n      idType = 'field';\n    }\n    const tracked = this.tracked[idType][id];\n    if (!tracked) {\n      return [];\n    }\n    return tracked;\n  };\n  AQ.Database.prototype.track = function (id, obj) {\n    // TODO: db.track should only be called when events are set up on this query\n    let idType;\n    if (id.startsWith('/relation/')) {\n      idType = 'relation';\n    } else if (id.startsWith('/row/')) {\n      idType = 'row';\n    } else if (id.startsWith('/field/')) {\n      idType = 'field';\n    }\n\n    // columns are supposed to have events, but what does that mean?\n    // functions do not have events\n    // schema do not have events\n\n    switch (idType) {\n      case 'relation':\n        this.tracked.relation[id] = this.tracked.relation[id] || [];\n        this.tracked.relation[id].push(obj);\n        break;\n      case 'row':\n        this.tracked.row[id] = obj;\n        break;\n      case 'field':\n        this.tracked.field[id] = obj;\n        break;\n    }\n  };\n\n  /*--------------------------------- * Schema * ---------------------------------*/\n  AQ.Schema = function (database, name) {\n    this.database = database;\n    this.name = name;\n    this.id = {name: this.name};\n  };\n  AQ.Schema.prototype.constructor = AQ.Schema;\n  AQ.Schema.prototype.relation = function (name) {\n    return new AQ.Relation(this, name);\n  };\n  AQ.Schema.prototype.table = function (name) {\n    return new AQ.Table(this, name);\n  };\n  AQ.Schema.prototype.view = function (name) {\n    return new AQ.View(this, name);\n  };\n  AQ.Schema.prototype.function = function (identifier, args, options) {\n    // Function identifier (name and parameter list)\n    if (typeof identifier == 'object') {\n      var name = identifier.name;\n      var parameter_type_list = identifier.parameters;\n    }\n    // Selecting a function without specifying the parameters\n    else {\n      var name = identifier;\n    }\n\n    options = options || {};\n\n    // Arguments\n    options.args = {};\n\n    // `args = undefined` will pass no arguments into the server-side function\n    if (typeof args != 'undefined') {\n      // some_function?args={ kwargs: {} } -- Key/value object\n      if (!(args instanceof Array) && args instanceof Object) {\n        options.args.kwargs = args;\n      }\n      // some_function?args={ vals: [] } -- Array\n      else {\n        if (!(args instanceof Array)) {\n          // Regular value is placed into array\n          args = [args];\n        }\n        options.args.vals = args;\n      }\n    }\n\n    var fn = new AQ.Function(this, name, parameter_type_list);\n\n    return this.database.endpoint\n      .get(fn, options)\n      .then(\n        function (response) {\n          if (!response) {\n            throw 'Empty response';\n          }\n          /* sometimes results can be empty and that is ok.\n                else if (!response.result.length) {\n                    throw 'Result set empty';\n                }\n\t\t\t\t*/\n          if (response.result.length != 1) {\n            return new AQ.FunctionResultSet(fn, response);\n          }\n          return new AQ.FunctionResult(fn, response);\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw err;\n      });\n  };\n\n  /*--------------------------------- * Relation * ---------------------------------*/\n  function relationId(id) {\n    return {\n      url() {\n        return '/relation/' + id.schema_id.name + '/' + id.name;\n      },\n    };\n  }\n  AQ.Relation = function (schema, name) {\n    this.schema = schema;\n    this.name = name;\n    this.id = {schema_id: this.schema.id, name: this.name};\n  };\n  AQ.Relation.prototype.constructor = AQ.Relation;\n  AQ.Relation.prototype.to_url = function (id_only) {\n    return id_only\n      ? '/relation/' + this.schema.name + '/' + this.name\n      : this.schema.database.endpoint.url +\n          '/relation/' +\n          this.schema.name +\n          '/' +\n          this.name;\n  };\n  AQ.Relation.prototype.column = function (name) {\n    return new AQ.Column(this, name);\n  };\n  AQ.Relation.prototype.rows = function (options) {\n    return this.schema.database.endpoint\n      .get(this, options)\n      .then(\n        function (rows) {\n          if (rows == null) {\n            throw 'Empty response';\n          } /*\n                else if (rows.result.length < 1) {\n                    throw 'No rows returned';\n                }*/\n          const rowset = new AQ.Rowset(this, rows, options);\n          this.schema.database.track(this.to_url(true), rowset);\n          return rowset;\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw 'Rows request failed: ' + err;\n      });\n  };\n  AQ.Relation.prototype.row = function () {\n    // Multiple different ways to call 'row' function\n\n    // 1. Calling with Options object\n    if (typeof arguments[0] == 'object') {\n      var obj = arguments[0];\n      var args = arguments[1] || {};\n\n      // AQ.Relation.row({ where: { column_name: 'column_name', op: '=', value: 'value' } })\n      // Maybe it should be this one: AQ.Relation.row({ where: { column_name: value } })\n      if (typeof obj.where != 'undefined') {\n        args.where = obj.where;\n      }\n      // AQ.Relation.row({ column_name: 'column_name', op: '=', value: 'value' })\n      // Maybe it should be this one: AQ.Relation.row({ column_name: value })\n      else {\n        args.where = obj;\n      }\n    }\n    // 2. Calling with column_name and value\n    else if (typeof arguments[0] == 'string') {\n      // AQ.Relation.row(column_name, value [, options_obj])\n      var name = arguments[0];\n      var value = arguments[1];\n      var args = arguments[2] || {};\n\n      args.where = {name: name, op: '=', value: value};\n    }\n    // 3. Calling AQ.Relation.row() without arguments\n    else {\n      var args = {};\n    }\n\n    return this.schema.database.endpoint\n      .get(this, args)\n      .then(\n        function (row) {\n          if (row == null) {\n            throw 'Empty response';\n          } else if (row.result.length == 0) {\n            return null; // throw 'No row returned';\n          } else if (row.result.length > 1) {\n            throw 'Multiple rows returned';\n          }\n          const aqRow = new AQ.Row(this, row);\n          this.schema.database.track(aqRow.to_url(true), aqRow);\n          return aqRow;\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw 'Row request failed: ' + err;\n      });\n  };\n\n  /*--------------------------------- * Table * ---------------------------------*/\n  AQ.Table = function (schema, name) {\n    this.schema = schema;\n    this.name = name;\n    this.id = {schema_id: this.schema.id, name: this.name};\n  };\n  AQ.Table.prototype = Object.create(AQ.Relation.prototype);\n  AQ.Table.prototype.constructor = AQ.Table;\n  AQ.Table.prototype.insert = function (data) {\n    if (typeof data == 'undefined') {\n      // table.insert({}) is equivalent to table.insert()\n      // both will insert default values\n      data = {};\n    }\n\n    // Return inserted row promise\n    return this.schema.database.endpoint\n      .patch(this, data)\n      .then(\n        function (inserted_row) {\n          if (inserted_row == null) {\n            throw 'Empty response';\n          }\n          if (typeof data.length != 'undefined' && data.length > 1) {\n            return new AQ.Rowset(this, inserted_row, null);\n          }\n          return new AQ.Row(this, inserted_row);\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw 'Insert failed: ' + err;\n      });\n  };\n\n  /*--------------------------------- * View * ---------------------------------*/\n  AQ.View = function (schema, name) {\n    this.schema = schema;\n    this.name = name;\n    this.id = {schema_id: this.schema.id, name: this.name};\n  };\n  AQ.View.prototype = Object.create(AQ.Relation.prototype);\n  AQ.View.prototype.constructor = AQ.View;\n\n  /*--------------------------------- * Rowset * ---------------------------------*/\n  class Callbacks {\n    constructor() {\n      this.map = new Map();\n    }\n    call(cbType, payload) {\n      const callbacks = this.map.get(cbType) || [];\n      for (const callback of callbacks) {\n        callback(payload);\n      }\n    }\n    add(cbType, cb) {\n      this.map.set(\n        cbType,\n        this.map.has(cbType) ? this.map.get(cbType).concat(cb) : [cb]\n      );\n    }\n    remove(cbType, cb) {\n      const callbacks = this.map.get(cbType);\n      if (callbacks) {\n        this.map.set(\n          cbType,\n          callbacks.filter((callback) => callback !== cb)\n        );\n      }\n    }\n  }\n\n  AQ.Rowset = function (relation, response, server_arguments) {\n    this.relation = relation;\n    this.schema = relation.schema;\n    this.columns = response.columns || null;\n    this.pk_column_name = response.pk || null;\n    this.rows = response.result;\n    this.length = response.result.length;\n    this.server_arguments = server_arguments || {};\n    this.callbacks = new Callbacks();\n  };\n  AQ.Rowset.prototype.constructor = AQ.Rowset;\n  AQ.Rowset.prototype.map = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.Row(this.relation, {\n            columns: this.columns,\n            pk: this.pk_column_name,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .map(fn);\n  };\n  AQ.Rowset.prototype.forEach = function (fn) {\n    const newRow = (row) => {\n      return new AQ.Row(this.relation, {\n        columns: this.columns,\n        pk: this.pk_column_name,\n        result: [row],\n      });\n    };\n    this.onInsert((row) => {\n      // TODO: need a rewrite on datum to fix this\n      // imitate api response to create row\n      fn(newRow({row}));\n    });\n    this.rows.map(newRow).forEach(fn);\n    return this;\n  };\n  AQ.Rowset.prototype.reload = function () {\n    return this.relation.rows(this.server_arguments);\n  };\n  AQ.Rowset.prototype._triggerEvent = function (eventType, payload, newRowId) {\n    const relId = this.relation.id;\n    const pkColumn = this.pk_column_name;\n    const rowIdStr = rowId(\n      newRowId.pk_column_id.relation_id,\n      newRowId.pk_value\n    ).url();\n    switch (eventType) {\n      case 'insert':\n        this.rows.push(payload);\n        break;\n      case 'update': {\n        // TODO: I think payload is only the update fields, may need to reconstruct real row\n        let index = this.rows.findIndex(\n          (row) => rowId(relId, row[pkColumn]).url() === rowIdStr\n        );\n        if (!index) {\n          console.error(\n            'AQ.Rowset: trying to trigger update on nonexistant row'\n          );\n          break;\n        }\n        this.rows[index] = payload;\n        break;\n      }\n      case 'delete': {\n        // TODO: I think payload is only the row_id, may need to reconstruct real row\n        let index = this.rows.findIndex(\n          (row) => rowId(relId, row[pkColumn]).url() === rowIdStr\n        );\n        if (!index) {\n          console.error(\n            'AQ.Rowset: trying to trigger delete on nonexistant row'\n          );\n          break;\n        }\n        this.rows.splice(index, 1);\n        payload = rowIdStr;\n        break;\n      }\n    }\n    this.callbacks.call(eventType, payload);\n  };\n  AQ.Rowset.prototype.onInsert = function (fn) {\n    // TODO: maybe get rid of string\n    this.callbacks.add('insert', fn);\n  };\n  AQ.Rowset.prototype.onUpdate = function (fn) {\n    // TODO: can you update a rowset?\n    this.callbacks.add('update', fn);\n  };\n  AQ.Rowset.prototype.onDelete = function (fn) {\n    this.callbacks.add('delete', fn);\n  };\n\n  /**\n   * Call AQ.Rowset.where with (where_obj) or use shorthand notation (field, value) - filter results programmatically\n   *\n   * @param {Object} where_obj\n   * @param {[Boolean]} return_first\n   * @param {[Boolean]} async\n   *\n   * OR\n   *\n   * @param {String} field\n   * @param {Any} value\n   * @param {[Boolean]} return_first\n   * @param {[Boolean]} async\n   *\n   * @returns {Promise}\n   */\n  AQ.Rowset.prototype.where = function () {\n    var first = false,\n      async = true,\n      where_obj = {};\n    if (typeof arguments[0] == 'object') {\n      // AQ.Rowset.where(where_obj [, return_first] [, async]);\n      where_obj = arguments[0];\n      var field = where_obj.field;\n      var value = where_obj.value;\n      if (arguments.length > 1) first = arguments[1];\n      if (arguments.length > 2) async = arguments[2];\n    } else if (typeof arguments[0] == 'string' && arguments.length > 1) {\n      // AQ.Rowset.where(field, value [, return_first] [, async]);\n      var field = arguments[0];\n      var value = arguments[1];\n      if (arguments.length > 2) first = arguments[2];\n      if (arguments.length > 3) async = arguments[3];\n    }\n\n    return new Promise(\n      function (resolve, reject) {\n        // TODO lots of logic here\n        // The new rowset that is returned must be in the same format as the response from the server\n\n        if (first) {\n          for (var i = 0; i < this.rows.length; i++) {\n            if (this.rows[i].row[field] == value) {\n              resolve(\n                new AQ.Row(this.relation, {\n                  columns: this.columns,\n                  result: [this.rows[i]],\n                })\n              );\n            }\n          }\n          reject('could not find ' + field + ' ' + value);\n        } else {\n          var return_rowset = [];\n          for (var i = 0; i < this.rows.length; i++) {\n            if (this.rows[i].row[field] == value) {\n              return_rowset.push(this.rows[i]);\n            }\n          }\n          resolve(\n            new AQ.Rowset(this.relation, {\n              columns: this.columns,\n              result: return_rowset,\n            })\n          );\n        }\n\n        // 2\n\n        // maybe we don't need to search the entire row and instead we return the first item found\n        /*\n            var new_rowset = _.filter(this.rows, function(el) {\n                //return AQ.equals.call(this, el[field], val);\n            });\n*/\n        if (new_rowset.length == 1) {\n          return new AQ.Row(this.relation, new_rowset);\n        } else if (new_rowset.length > 1) {\n          throw 'Multiple Rows Returned';\n        }\n\n        // if row does not exist\n        return null;\n      }.bind(this)\n    );\n  };\n  AQ.Rowset.prototype.order_by = function (column, direction) {\n    /*\n        var ordered = _.sortBy(this.rows, function(el) {\n            return el.row[column];\n        });\n*/\n    if (direction !== 'asc') {\n      ordered.reverse();\n    }\n    return new AQ.Rowset(this.relation, {\n      columns: this.columns,\n      result: ordered,\n    });\n  };\n  AQ.Rowset.prototype.limit = function (lim) {\n    if (lim <= 0) {\n      throw 'Bad limit';\n    }\n    return new AQ.Rowset(this.relation, {\n      columns: this.columns,\n      result: this.rows.slice(0, lim),\n    });\n  };\n  AQ.Rowset.prototype.related_rows = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    var values = this.map(function (row) {\n      return row.get(self_column_name);\n    });\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: 'in',\n      value: values,\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n  };\n  AQ.Rowset.prototype.related_row = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    var values = this.map(function (row) {\n      return row.get(self_column_name);\n    });\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: 'in',\n      value: values,\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n  };\n\n  /*--------------------------------- * Row * ---------------------------------*/\n  function rowId(relId, pkValue) {\n    return {\n      url() {\n        return (\n          '/row/' + relId.schema_id.name + '/' + relId.name + '/' + pkValue\n        );\n      },\n    };\n  }\n  AQ.Row = function (relation, response) {\n    this.relation = relation;\n    this.schema = relation.schema;\n    this.row_data = response.result[0].row;\n\n    this.callbacks = new Callbacks();\n    this.cached_fields = {};\n    this.columns = response.columns || null;\n    this.pk_column_name = null;\n    this.pk_value = null;\n    this.id = null;\n    this.to_url = function () {\n      console.error(\n        'You must call a row with "meta_data: true" in order to use the to_url function'\n      );\n      throw 'Datum.js: Programming Error';\n    };\n\n    if (typeof response.pk != 'undefined') {\n      this.pk_column_name = response.pk;\n      this.pk_value = this.get(this.pk_column_name);\n      // this.id = {"pk_column_id":{"relation_id":{"schema_id":{"name":this.schema.name},"name":this.relation.name},"name":this.pk_column_name},"pk_value": this.pk_value}\n      this.id = {\n        pk_column_id: {\n          relation_id: this.relation.id,\n          name: this.pk_column_name,\n        },\n        pk_value: this.pk_value,\n      };\n\n      this.to_url = function (id_only) {\n        return id_only\n          ? '/row/' +\n              this.relation.schema.name +\n              '/' +\n              this.relation.name +\n              '/' +\n              /*JSON.stringify(this.pk_value)*/ this.pk_value\n          : this.relation.schema.database.endpoint.url +\n              '/row/' +\n              this.relation.schema.name +\n              '/' +\n              this.relation.name +\n              '/' +\n              /*JSON.stringify(this.pk_value)*/ this.pk_value;\n      };\n    }\n  };\n  AQ.Row.prototype = {\n    constructor: AQ.Row,\n    get: function (name) {\n      return this.row_data[name];\n    },\n    set: function (name, value) {\n      this.row_data[name] = value;\n      return this;\n    },\n    to_string: function () {\n      return JSON.stringify(this.row_data);\n    },\n    clone: function () {\n      return new AQ.Row(this.relation, {\n        columns: this.columns,\n        pk: this.pk_column_name,\n        result: [{row: this.row_data}],\n      });\n    },\n    field: function (name) {\n      if (typeof this.cached_fields[name] == 'undefined') {\n        this.cached_fields[name] = new AQ.Field(\n          this,\n          name,\n          name === this.pk_column_name\n        );\n      }\n      return this.cached_fields[name];\n    },\n    fields: function () {\n      if (this.columns != null) {\n        return this.columns.map(\n          function (c) {\n            return this.field(c.name);\n          }.bind(this)\n        );\n      }\n      return null;\n    },\n  };\n  AQ.Row.prototype._triggerEvent = function (eventType, payload) {\n    switch (eventType) {\n      case 'update': {\n        // TODO: update fields\n        break;\n      }\n    }\n    this.callbacks.call(eventType, payload);\n  };\n  AQ.Row.prototype.onUpdate = function (fn) {\n    this.callbacks.add('update', fn);\n  };\n  AQ.Row.prototype.onDelete = function (fn) {\n    this.callbacks.add('delete', fn);\n  };\n  AQ.Row.prototype.update = function () {\n    return this.relation.schema.database.endpoint\n      .patch(this, this.row_data)\n      .then(\n        function (response) {\n          if (response == null) {\n            throw 'Empty response';\n          }\n          return this;\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw 'Update failed: ' + err;\n      });\n  };\n  AQ.Row.prototype.delete = function () {\n    return this.relation.schema.database.endpoint\n      .delete(this)\n      .then(function (response) {\n        if (response == null) {\n          throw 'Empty response';\n        }\n      })\n      .catch(function (err) {\n        throw 'Delete failed: ' + err;\n      });\n  };\n  AQ.Row.prototype.related_rows = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: '=',\n      value: this.get(self_column_name),\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n  };\n  AQ.Row.prototype.related_row = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: '=',\n      value: this.get(self_column_name),\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n  };\n\n  /*--------------------------------- * Column * ---------------------------------*/\n  AQ.Column = function (relation, name) {\n    this.relation = relation;\n    this.name = name;\n    this.id = {relation_id: relation.id, name: name};\n  };\n  AQ.Column.prototype.constructor = AQ.Column;\n\n  /*--------------------------------- * Field * ---------------------------------*/\n  AQ.Field = function (row, name, pk) {\n    this.row = row;\n    this.column = new AQ.Column(row.relation, name);\n    this.is_primary_key = pk;\n    this.name = name;\n    this.value = row.get(name);\n    this.id = {row_id: this.row.id, column_id: this.column.id};\n    this.to_url = function (id_only) {\n      if (this.row.pk_value == null) {\n        console.error(\n          'You must call a row with "meta_data: true" in order to use the to_url function'\n        );\n        throw 'Datum.js: Programming Error';\n      }\n      return id_only\n        ? '/field/' +\n            this.row.relation.schema.name +\n            '/' +\n            this.row.relation.name +\n            '/' +\n            /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value +\n            '/' +\n            this.column.name\n        : this.row.relation.schema.database.endpoint.url +\n            '/field/' +\n            this.row.relation.schema.name +\n            '/' +\n            this.row.relation.name +\n            '/' +\n            /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value +\n            '/' +\n            this.column.name;\n    };\n  };\n  AQ.Field.prototype = {\n    constructor: AQ.Field,\n    get: function () {\n      return this.row.get(this.name);\n    },\n    set: function (value) {\n      this.value = value;\n      return this.row.set(this.name, value);\n    },\n    update: function () {\n      return this.row.update();\n    }, // TODO: This is wrong\n  };\n\n  /*--------------------------------- * Function * ---------------------------------*/\n  AQ.Function = function (schema, name, args) {\n    this.schema = schema;\n    this.name = name;\n\n    if (args instanceof Array) {\n      this.args = '{' + args.join(',') + '}';\n    } else {\n      this.args = args;\n    }\n\n    this.id = {schema_id: this.schema.id, name: this.name, args: this.args};\n    this.to_url = function (id_only) {\n      var base_url = id_only ? '' : this.schema.database.endpoint.url;\n      if (typeof this.args != 'undefined') {\n        return (\n          base_url +\n          '/function/' +\n          this.schema.name +\n          '/' +\n          this.name +\n          '/' +\n          this.args\n        );\n      }\n      return base_url + '/function/' + this.schema.name + '/' + this.name;\n    };\n  };\n  AQ.Function.prototype.constructor = AQ.Function;\n\n  /*--------------------------------- * Function Result * ---------------------------------*/\n  AQ.FunctionResult = function (fn, response) {\n    this.function = fn;\n    this.schema = fn.schema;\n    this.row_data = response.result[0].row;\n    this.rows = response.result;\n    this.columns = response.columns;\n  };\n  AQ.FunctionResult.prototype = {\n    constructor: AQ.FunctionResult,\n    get: function (name) {\n      return this.row_data[name];\n    },\n    to_string: function () {\n      return JSON.stringify(this.row_data);\n    },\n  };\n  AQ.FunctionResult.prototype.map = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.FunctionResult(this.function, {\n            columns: this.columns,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .map(fn);\n  };\n  AQ.FunctionResult.prototype.forEach = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.FunctionResult(this.function, {\n            columns: this.columns,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .forEach(fn);\n  };\n  AQ.FunctionResult.prototype.related_rows = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: '=',\n      value: this.get(self_column_name),\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n  };\n  AQ.FunctionResult.prototype.related_row = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: '=',\n      value: this.get(self_column_name),\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n  };\n\n  /*--------------------------------- * Function Result Set * ---------------------------------*/\n  AQ.FunctionResultSet = function (fn, response) {\n    this.function = fn;\n    this.schema = fn.schema;\n    this.columns = response.columns;\n    this.rows = response.result;\n  };\n  AQ.FunctionResultSet.prototype.constructor = AQ.FunctionResultSet;\n  AQ.FunctionResultSet.prototype.map = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.FunctionResult(this.function, {\n            columns: this.columns,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .map(fn);\n  };\n  AQ.FunctionResultSet.prototype.forEach = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.FunctionResult(this.function, {\n            columns: this.columns,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .forEach(fn);\n  };\n  AQ.FunctionResultSet.prototype.related_rows = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    var values = this.map(function (row) {\n      return row.get(self_column_name);\n    });\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: 'in',\n      value: values,\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n  };\n  AQ.FunctionResultSet.prototype.related_row = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    var values = this.map(function (row) {\n      return row.get(self_column_name);\n    });\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: 'in',\n      value: values,\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n  };\n\n  window.AQ = AQ;\n  return AQ;\n});\n
\\x3f407b12f645a7d80253e6728009293c3879f87943481712fb4eb90dc8debfbd	cbe96fbe-b996-4d5d-b5cb-bcdc028bd28d
\\x44896b09365746b5f7167ee4d64988a38f7f4628803cbf86224e74eeb7c69e9d	0.2
\\x44ab7a392da500dffc722bf1d3510e37c7e72710ea66d9a0431ad97505c9bbb5	6b0d717c-40e5-4a43-8170-9ab892c7950a
\\x46dab89117a0c20dc8f17b418795d8d706cf94afa2affda23822d658832ece04	/*\n * SystemJS v0.19.27\n */\n!function(){function e(){!function(e){function t(e,r){if("string"!=typeof e)throw new TypeError("URL must be a string");var n=String(e).replace(/^\\s+|\\s+$/g,"").match(/^([^:\\/?#]+:)?(?:\\/\\/(?:([^:@\\/?#]*)(?::([^:@\\/?#]*))?@)?(([^:\\/?#]*)(?::(\\d*))?))?([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/);if(!n)throw new RangeError("Invalid URL format");var a=n[1]||"",o=n[2]||"",i=n[3]||"",s=n[4]||"",l=n[5]||"",u=n[6]||"",d=n[7]||"",c=n[8]||"",f=n[9]||"";if(void 0!==r){var m=r instanceof t?r:new t(r),p=!a&&!s&&!o;!p||d||c||(c=m.search),p&&"/"!==d[0]&&(d=d?(!m.host&&!m.username||m.pathname?"":"/")+m.pathname.slice(0,m.pathname.lastIndexOf("/")+1)+d:m.pathname);var h=[];d.replace(/^(\\.\\.?(\\/|$))+/,"").replace(/\\/(\\.(\\/|$))+/g,"/").replace(/\\/\\.\\.$/,"/../").replace(/\\/?[^\\/]*/g,function(e){"/.."===e?h.pop():h.push(e)}),d=h.join("").replace(/^\\//,"/"===d[0]?"/":""),p&&(u=m.port,l=m.hostname,s=m.host,i=m.password,o=m.username),a||(a=m.protocol)}"file:"==a&&(d=d.replace(/\\\\/g,"/")),this.origin=s?a+(""!==a||""!==s?"//":"")+s:"",this.href=a+(a&&s||"file:"==a?"//":"")+(""!==o?o+(""!==i?":"+i:"")+"@":"")+s+d+c+f,this.protocol=a,this.username=o,this.password=i,this.host=s,this.hostname=l,this.port=u,this.pathname=d,this.search=c,this.hash=f}e.URLPolyfill=t}("undefined"!=typeof self?self:global),function(e){function t(e,t){if(!e.originalErr)for(var r=(e.stack||e.message||e).split("\\n"),n=[],a=0;a<r.length;a++)("undefined"==typeof $__curScript||-1==r[a].indexOf($__curScript.src))&&n.push(r[a]);var o=(n?n.join("\\n\t"):e.message)+"\\n\t"+t;F||(o=o.replace(D?/file:\\/\\/\\//g:/file:\\/\\//g,""));var i=C?new Error(o,e.fileName,e.lineNumber):new Error(o);return F?i.stack=null:i.stack=o,i.originalErr=e.originalErr||e,i}function r(e,r,n){try{new Function(e).call(n)}catch(a){throw t(a,"Evaluating "+r)}}function n(){}function a(t){this._loader={loaderObj:this,loads:[],modules:{},importPromises:{},moduleRecords:{}},q(this,"global",{get:function(){return e}})}function o(){a.call(this),this.paths={}}function i(e,t){var r,n="",a=0;for(var o in e){var i=o.split("*");if(i.length>2)throw new TypeError("Only one wildcard in a path is permitted");if(1==i.length){if(t==o)return e[o];if(t.substr(0,o.length-1)==o.substr(0,o.length-1)&&(t.length<o.length||t[o.length-1]==o[o.length-1])&&"/"==e[o][e[o].length-1])return e[o].substr(0,e[o].length-1)+(t.length>o.length?"/"+t.substr(o.length):"")}else{var s=i[0].length;s>=a&&t.substr(0,i[0].length)==i[0]&&t.substr(t.length-i[1].length)==i[1]&&(a=s,n=o,r=t.substr(i[0].length,t.length-i[1].length-i[0].length))}}var l=e[n];return"string"==typeof r&&(l=l.replace("*",r)),l}function s(){}function l(){o.call(this),V.call(this)}function u(){}function d(e,t){l.prototype[e]=t(l.prototype[e]||function(){})}function c(e){V=e(V||function(){})}function f(e){for(var t=[],r=[],n=0,a=e.length;a>n;n++){var o=J.call(t,e[n]);-1===o?(t.push(e[n]),r.push([n])):r[o].push(n)}return{names:t,indices:r}}function m(e){var t={};if("object"==typeof e||"function"==typeof e){var r=e&&e.hasOwnProperty;if(K)for(var n in e)h(t,e,n)||p(t,e,n,r);else for(var n in e)p(t,e,n,r)}return t["default"]=e,q(t,"__useDefault",{value:!0}),t}function p(e,t,r,n){(!n||t.hasOwnProperty(r))&&(e[r]=t[r])}function h(e,t,r){try{var n;return(n=Object.getOwnPropertyDescriptor(t,r))&&q(e,r,n),!0}catch(a){return!1}}function g(e,t,r){for(var n in t)r&&n in e||(e[n]=t[n]);return e}function v(e,t,r){for(var n in t){var a=t[n];n in e?a instanceof Array&&e[n]instanceof Array?e[n]=[].concat(r?a:e[n]).concat(r?e[n]:a):"object"==typeof a&&null!==a&&"object"==typeof e[n]?e[n]=g(g({},e[n]),a,r):r||(e[n]=a):e[n]=a}}function y(e){this.warnings&&"undefined"!=typeof console&&console.warn}function b(e,t){for(var r=e.split(".");r.length;)t=t[r.shift()];return t}function w(){if(te[this.baseURL])return te[this.baseURL];"/"!=this.baseURL[this.baseURL.length-1]&&(this.baseURL+="/");var e=new H(this.baseURL,U);return this.baseURL=e.href,te[this.baseURL]=e}function x(e,t){var r,n=0;for(var a in e)if(t.substr(0,a.length)==a&&(t.length==a.length||"/"==t[a.length])){var o=a.split("/").length;if(n>=o)continue;r=a,n=o}return r}function S(e){this.set("@system-env",this.newModule({browser:F,node:!!this._nodeRequire,production:e,"default":!0}))}function E(e){return("."!=e[0]||!!e[1]&&"/"!=e[1]&&"."!=e[1])&&"/"!=e[0]&&!e.match(ee)}function _(e,t){return t&&(t=t.replace(/#/g,"%05")),new H(e,t||re).href.replace(/%05/g,"#")}function j(e,t){return new H(t,w.call(e)).href}function k(e,t){if(!E(e))return _(e,t);var r=x(this.map,e);if(r&&(e=this.map[r]+e.substr(r.length),!E(e)))return _(e);if(this.has(e))return e;if("@node/"==e.substr(0,6)&&-1!=ne.indexOf(e.substr(6))){if(!this._nodeRequire)throw new TypeError("Error loading "+e+". Can only load node core modules in Node.");return this.set(e,this.newModule(m(this._nodeRequire(e.substr(6))))),e}var n=i(this.paths,e);return n&&!E(n)?_(n):j(this,n||e)}function R(e){var t=e.match(ie);return t&&"System.register"==e.substr(t[0].length,15)}function P(){return{name:null,deps:null,originalIndices:null,declare:null,execute:null,executingRequire:!1,declarative:!1,normalizedDeps:null,groupIndex:null,evaluated:!1,module:null,esModule:null,esmExports:!1}}function O(t){if("string"==typeof t)return b(t,e);if(!(t instanceof Array))throw new Error("Global exports must be a string or array.");for(var r={},n=!0,a=0;a<t.length;a++){var o=b(t[a],e);n&&(r["default"]=o,n=!1),r[t[a].split(".").pop()]=o}return r}function M(e){var t,r,n,n="~"==e[0],a=e.lastIndexOf("|");return-1!=a?(t=e.substr(a+1),r=e.substr(n,a-n)||"@system-env"):(t=null,r=e.substr(n)),{module:r,prop:t,negate:n}}function z(e){return(e.negate?"~":"")+e.module+(e.prop?"|"+e.prop:"")}function T(e,t,r){return this["import"](e.module,t).then(function(t){if(e.prop?t=b(e.prop,t):"object"==typeof t&&t+""=="Module"&&(t=t["default"]),r&&"boolean"!=typeof t)throw new TypeError("Condition "+z(e)+" did not resolve to a boolean.");return e.negate?!t:t})}function I(e,t){var r=e.match(le);if(!r)return Promise.resolve(e);var n=M(r[0].substr(2,r[0].length-3));return this.builder?this.normalize(n.module,t).then(function(t){return n.module=t,e.replace(le,"#{"+z(n)+"}")}):T.call(this,n,t,!1).then(function(r){if("string"!=typeof r)throw new TypeError("The condition value for "+e+" doesn't resolve to a string.");if(-1!=r.indexOf("/"))throw new TypeError("Unabled to interpolate conditional "+e+(t?" in "+t:"")+"\\n\tThe condition value "+r+' cannot contain a "/" separator.');return e.replace(le,r)})}function L(e,t){var r=e.lastIndexOf("#?");if(-1==r)return Promise.resolve(e);var n=M(e.substr(r+2));return this.builder?this.normalize(n.module,t).then(function(t){return n.module=t,e.substr(0,r)+"#?"+z(n)}):T.call(this,n,t,!0).then(function(t){return t?e.substr(0,r):"@empty"})}var A="undefined"==typeof window&&"undefined"!=typeof self&&"undefined"!=typeof importScripts,F="undefined"!=typeof window&&"undefined"!=typeof document,D="undefined"!=typeof process&&"undefined"!=typeof process.platform&&!!process.platform.match(/^win/);e.console||(e.console={assert:function(){}});var q,J=Array.prototype.indexOf||function(e){for(var t=0,r=this.length;r>t;t++)if(this[t]===e)return t;return-1};!function(){try{Object.defineProperty({},"a",{})&&(q=Object.defineProperty)}catch(e){q=function(e,t,r){try{e[t]=r.value||r.get.call(e)}catch(n){}}}}();var U,C="_"==new Error(0,"_").fileName;if("undefined"!=typeof document&&document.getElementsByTagName){if(U=document.baseURI,!U){var N=document.getElementsByTagName("base");U=N[0]&&N[0].href||window.location.href}U=U.split("#")[0].split("?")[0],U=U.substr(0,U.lastIndexOf("/")+1)}else if("undefined"!=typeof process&&process.cwd)U="file://"+(D?"/":"")+process.cwd()+"/",D&&(U=U.replace(/\\\\/g,"/"));else{if("undefined"==typeof location)throw new TypeError("No environment baseURI");U=e.location.href}try{var $="test:"==new e.URL("test:///").protocol}catch(B){}var H=$?e.URL:e.URLPolyfill;q(n.prototype,"toString",{value:function(){return"Module"}}),function(){function o(e){return{status:"loading",name:e,linkSets:[],dependencies:[],metadata:{}}}function i(e,t,r){return new Promise(c({step:r.address?"fetch":"locate",loader:e,moduleName:t,moduleMetadata:r&&r.metadata||{},moduleSource:r.source,moduleAddress:r.address}))}function s(e,t,r,n){return new Promise(function(a,o){a(e.loaderObj.normalize(t,r,n))}).then(function(t){var r;if(e.modules[t])return r=o(t),r.status="linked",r.module=e.modules[t],r;for(var n=0,a=e.loads.length;a>n;n++)if(r=e.loads[n],r.name==t)return r;return r=o(t),e.loads.push(r),l(e,r),r})}function l(e,t){u(e,t,Promise.resolve().then(function(){return e.loaderObj.locate({name:t.name,metadata:t.metadata})}))}function u(e,t,r){d(e,t,r.then(function(r){return"loading"==t.status?(t.address=r,e.loaderObj.fetch({name:t.name,metadata:t.metadata,address:r})):void 0}))}function d(t,n,a){a.then(function(a){return"loading"==n.status?Promise.resolve(t.loaderObj.translate({name:n.name,metadata:n.metadata,address:n.address,source:a})).then(function(e){return n.source=e,t.loaderObj.instantiate({name:n.name,metadata:n.metadata,address:n.address,source:e})}).then(function(a){if(void 0===a)return n.address=n.address||"<Anonymous Module "+ ++_+">",n.isDeclarative=!0,E.call(t.loaderObj,n).then(function(t){var a=e.System,o=a.register;a.register=function(e,t,r){"string"!=typeof e&&(r=t,t=e),n.declare=r,n.depsList=t},r(t,n.address,{}),a.register=o});if("object"!=typeof a)throw TypeError("Invalid instantiate return value");n.depsList=a.deps||[],n.execute=a.execute,n.isDeclarative=!1}).then(function(){n.dependencies=[];for(var e=n.depsList,r=[],a=0,o=e.length;o>a;a++)(function(e,a){r.push(s(t,e,n.name,n.address).then(function(t){if(n.dependencies[a]={key:e,value:t.name},"linked"!=t.status)for(var r=n.linkSets.concat([]),o=0,i=r.length;i>o;o++)m(r[o],t)}))})(e[a],a);return Promise.all(r)}).then(function(){n.status="loaded";for(var e=n.linkSets.concat([]),t=0,r=e.length;r>t;t++)h(e[t],n)}):void 0})["catch"](function(e){n.status="failed",n.exception=e;for(var t=n.linkSets.concat([]),r=0,a=t.length;a>r;r++)g(t[r],n,e)})}function c(e){return function(t,r){var n=e.loader,a=e.moduleName,i=e.step;if(n.modules[a])throw new TypeError('"'+a+'" already exists in the module table');for(var s,c=0,m=n.loads.length;m>c;c++)if(n.loads[c].name==a&&(s=n.loads[c],"translate"!=i||s.source||(s.address=e.moduleAddress,d(n,s,Promise.resolve(e.moduleSource))),s.linkSets.length&&s.linkSets[0].loads[0].name==s.name))return s.linkSets[0].done.then(function(){t(s)});var p=s||o(a);p.metadata=e.moduleMetadata;var h=f(n,p);n.loads.push(p),t(h.done),"locate"==i?l(n,p):"fetch"==i?u(n,p,Promise.resolve(e.moduleAddress)):(p.address=e.moduleAddress,d(n,p,Promise.resolve(e.moduleSource)))}}function f(e,t){var r={loader:e,loads:[],startingLoad:t,loadingCount:0};return r.done=new Promise(function(e,t){r.resolve=e,r.reject=t}),m(r,t),r}function m(e,t){if("failed"!=t.status){for(var r=0,n=e.loads.length;n>r;r++)if(e.loads[r]==t)return;e.loads.push(t),t.linkSets.push(e),"loaded"!=t.status&&e.loadingCount++;for(var a=e.loader,r=0,n=t.dependencies.length;n>r;r++)if(t.dependencies[r]){var o=t.dependencies[r].value;if(!a.modules[o])for(var i=0,s=a.loads.length;s>i;i++)if(a.loads[i].name==o){m(e,a.loads[i]);break}}}}function p(e){var t=!1;try{w(e,function(r,n){g(e,r,n),t=!0})}catch(r){g(e,null,r),t=!0}return t}function h(e,t){if(e.loadingCount--,!(e.loadingCount>0)){var r=e.startingLoad;if(e.loader.loaderObj.execute===!1){for(var n=[].concat(e.loads),a=0,o=n.length;o>a;a++){var t=n[a];t.module=t.isDeclarative?{name:t.name,module:j({}),evaluated:!0}:{module:j({})},t.status="linked",v(e.loader,t)}return e.resolve(r)}var i=p(e);i||e.resolve(r)}}function g(e,r,n){var a=e.loader;e:if(r)if(e.loads[0].name==r.name)n=t(n,"Error loading "+r.name);else{for(var o=0;o<e.loads.length;o++)for(var i=e.loads[o],s=0;s<i.dependencies.length;s++){var l=i.dependencies[s];if(l.value==r.name){n=t(n,"Error loading "+r.name+' as "'+l.key+'" from '+i.name);break e}}n=t(n,"Error loading "+r.name+" from "+e.loads[0].name)}else n=t(n,"Error linking "+e.loads[0].name);for(var u=e.loads.concat([]),o=0,d=u.length;d>o;o++){var r=u[o];a.loaderObj.failed=a.loaderObj.failed||[],-1==J.call(a.loaderObj.failed,r)&&a.loaderObj.failed.push(r);var c=J.call(r.linkSets,e);if(r.linkSets.splice(c,1),0==r.linkSets.length){var f=J.call(e.loader.loads,r);-1!=f&&e.loader.loads.splice(f,1)}}e.reject(n)}function v(e,t){if(e.loaderObj.trace){e.loaderObj.loads||(e.loaderObj.loads={});var r={};t.dependencies.forEach(function(e){r[e.key]=e.value}),e.loaderObj.loads[t.name]={name:t.name,deps:t.dependencies.map(function(e){return e.key}),depMap:r,address:t.address,metadata:t.metadata,source:t.source,kind:t.isDeclarative?"declarative":"dynamic"}}t.name&&(e.modules[t.name]=t.module);var n=J.call(e.loads,t);-1!=n&&e.loads.splice(n,1);for(var a=0,o=t.linkSets.length;o>a;a++)n=J.call(t.linkSets[a].loads,t),-1!=n&&t.linkSets[a].loads.splice(n,1);t.linkSets.splice(0,t.linkSets.length)}function y(e,t,r){try{var a=t.execute()}catch(o){return void r(t,o)}return a&&a instanceof n?a:void r(t,new TypeError("Execution must define a Module instance"))}function b(e,t,r){var n=e._loader.importPromises;return n[t]=r.then(function(e){return n[t]=void 0,e},function(e){throw n[t]=void 0,e})}function w(e,t){var r=e.loader;if(e.loads.length)for(var n=e.loads.concat([]),a=0;a<n.length;a++){var o=n[a],i=y(e,o,t);if(!i)return;o.module={name:o.name,module:i},o.status="linked",v(r,o)}}function x(e,t){return t.module.module}function S(){}function E(){throw new TypeError("ES6 transpilation is only provided in the dev module loader build.")}var _=0;a.prototype={constructor:a,define:function(e,t,r){if(this._loader.importPromises[e])throw new TypeError("Module is already loading.");return b(this,e,new Promise(c({step:"translate",loader:this._loader,moduleName:e,moduleMetadata:r&&r.metadata||{},moduleSource:t,moduleAddress:r&&r.address})))},"delete":function(e){var t=this._loader;return delete t.importPromises[e],delete t.moduleRecords[e],t.modules[e]?delete t.modules[e]:!1},get:function(e){return this._loader.modules[e]?(S(this._loader.modules[e],[],this),this._loader.modules[e].module):void 0},has:function(e){return!!this._loader.modules[e]},"import":function(e,t,r){"object"==typeof t&&(t=t.name);var n=this;return Promise.resolve(n.normalize(e,t)).then(function(e){var t=n._loader;return t.modules[e]?(S(t.modules[e],[],t._loader),t.modules[e].module):t.importPromises[e]||b(n,e,i(t,e,{}).then(function(r){return delete t.importPromises[e],x(t,r)}))})},load:function(e){var t=this._loader;return t.modules[e]?Promise.resolve():t.importPromises[e]||b(this,e,new Promise(c({step:"locate",loader:t,moduleName:e,moduleMetadata:{},moduleSource:void 0,moduleAddress:void 0})).then(function(){delete t.importPromises[e]}))},module:function(e,t){var r=o();r.address=t&&t.address;var n=f(this._loader,r),a=Promise.resolve(e),i=this._loader,s=n.done.then(function(){return x(i,r)});return d(i,r,a),s},newModule:function(e){if("object"!=typeof e)throw new TypeError("Expected object");var t=new n,r=[];if(Object.getOwnPropertyNames&&null!=e)r=Object.getOwnPropertyNames(e);else for(var a in e)r.push(a);for(var o=0;o<r.length;o++)(function(r){q(t,r,{configurable:!1,enumerable:!0,get:function(){return e[r]},set:function(){throw new Error("Module exports cannot be changed externally.")}})})(r[o]);return Object.freeze&&Object.freeze(t),t},set:function(e,t){if(!(t instanceof n))throw new TypeError("Loader.set("+e+", module) must be a module");this._loader.modules[e]={module:t}},normalize:function(e,t,r){return e},locate:function(e){return e.name},fetch:function(e){},translate:function(e){return e.source},instantiate:function(e){}};var j=a.prototype.newModule}();var X;s.prototype=a.prototype,o.prototype=new s;var Z;if("undefined"!=typeof XMLHttpRequest)Z=function(e,t,r,n){function a(){r(i.responseText)}function o(){n(new Error("XHR error"+(i.status?" ("+i.status+(i.statusText?" "+i.statusText:"")+")":"")+" loading "+e))}var i=new XMLHttpRequest,s=!0,l=!1;if(!("withCredentials"in i)){var u=/^(\\w+:)?\\/\\/([^\\/]+)/.exec(e);u&&(s=u[2]===window.location.host,u[1]&&(s&=u[1]===window.location.protocol))}s||"undefined"==typeof XDomainRequest||(i=new XDomainRequest,i.onload=a,i.onerror=o,i.ontimeout=o,i.onprogress=function(){},i.timeout=0,l=!0),i.onreadystatechange=function(){4===i.readyState&&(0==i.status?i.responseText?a():(i.addEventListener("error",o),i.addEventListener("load",a)):200===i.status?a():o())},i.open("GET",e,!0),i.setRequestHeader&&(i.setRequestHeader("Accept","application/x-es-module, */*"),t&&("string"==typeof t&&i.setRequestHeader("Authorization",t),i.withCredentials=!0)),l?setTimeout(function(){i.send()},0):i.send(null)};else if("undefined"!=typeof require&&"undefined"!=typeof process){var G;Z=function(e,t,r,n){if("file:///"!=e.substr(0,8))throw new Error('Unable to fetch "'+e+'". Only file URLs of the form file:/// allowed running in Node.');return G=G||require("fs"),e=D?e.replace(/\\//g,"\\\\").substr(8):e.substr(7),G.readFile(e,function(e,t){if(e)return n(e);var a=t+"";"\\ufeff"===a[0]&&(a=a.substr(1)),r(a)})}}else{if("undefined"==typeof self||"undefined"==typeof self.fetch)throw new TypeError("No environment fetch API available.");Z=function(e,t,r,n){var a={headers:{Accept:"application/x-es-module, */*"}};t&&("string"==typeof t&&(a.headers.Authorization=t),a.credentials="include"),fetch(e,a).then(function(e){if(e.ok)return e.text();throw new Error("Fetch error: "+e.status+" "+e.statusText)}).then(r,n)}}o.prototype.fetch=function(e){return new Promise(function(t,r){Z(e.address,void 0,t,r)})};var W=function(){function t(t){var n=this;return Promise.resolve(e["typescript"==n.transpiler?"ts":n.transpiler]||(n.pluginLoader||n)["import"](n.transpiler)).then(function(e){e.__useDefault&&(e=e["default"]);var a;return a=e.Compiler?r:e.createLanguageService?i:o,"(function(__moduleName){"+a.call(n,t,e)+'\\n})("'+t.name+'");\\n//# sourceURL='+t.address+"!transpiled"})}function r(e,t){var r=this.traceurOptions||{};r.modules="instantiate",r.script=!1,void 0===r.sourceMaps&&(r.sourceMaps="inline"),r.filename=e.address,r.inputSourceMap=e.metadata.sourceMap,r.moduleName=!1;var a=new t.Compiler(r);return n(e.source,a,r.filename)}function n(e,t,r){try{return t.compile(e,r)}catch(n){if(n.length)throw n[0];throw n}}function o(e,t){var r=this.babelOptions||{};return r.modules="system",void 0===r.sourceMap&&(r.sourceMap="inline"),r.inputSourceMap=e.metadata.sourceMap,r.filename=e.address,r.code=!0,r.ast=!1,t.transform(e.source,r).code}function i(e,t){var r=this.typescriptOptions||{};return r.target=r.target||t.ScriptTarget.ES5,void 0===r.sourceMap&&(r.sourceMap=!0),r.sourceMap&&r.inlineSourceMap!==!1&&(r.inlineSourceMap=!0),r.module=t.ModuleKind.System,t.transpile(e.source,r,e.address)}return a.prototype.transpiler="traceur",t}();u.prototype=o.prototype,l.prototype=new u,l.prototype.constructor=l,l.prototype.instantiate=function(){};var V,K=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(B){K=!1}var Y,Q=["main","format","defaultExtension","meta","map","basePath","depCache"];!function(){function r(e){var t=e.source.lastIndexOf("\\n"),r="global"!=e.metadata.format,n=e.metadata.sourceMap;if(n){if("object"!=typeof n)throw new TypeError("load.metadata.sourceMap must be set to an object.");n=JSON.stringify(n)}return(r?"(function(System, SystemJS) {":"")+e.source+(r?"\\n})(System, System);":"")+("\\n//# sourceURL="!=e.source.substr(t,15)?"\\n//# sourceURL="+e.address+(n?"!transpiled":""):"")+(n&&s&&"\\n//# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(n)))||"")}function n(t,r){i=r,0==c++&&(l=e.System),e.System=e.SystemJS=t}function a(){0==--c&&(e.System=e.SystemJS=l),i=void 0}function o(e){p||(p=document.head||document.body||document.documentElement);var o=document.createElement("script");o.text=r(e,!1);var i,s=window.onerror;if(window.onerror=function(r){i=t(r,"Evaluating "+e.address)},n(this,e),e.metadata.integrity&&o.setAttribute("integrity",e.metadata.integrity),e.metadata.nonce&&o.setAttribute("nonce",e.metadata.nonce),p.appendChild(o),p.removeChild(o),a(),window.onerror=s,i)throw i}var i,s="undefined"!=typeof btoa;d("pushRegister_",function(){return function(e){return i?(this.reduceRegister_(i,e),!0):!1}});var l,u,c=0;Y=function(e){if(e.source){if((e.metadata.integrity||e.metadata.nonce)&&f)return o.call(this,e);try{n(this,e),i=e,this._nodeRequire?(u=u||this._nodeRequire("vm"),u.runInThisContext(r(e))):(0,eval)(r(e)),a()}catch(s){throw a(),t(s,"Evaluating "+e.address)}}};var f=!1;if(F&&"undefined"!=typeof document&&document.getElementsByTagName){var m=document.getElementsByTagName("script");$__curScript=m[m.length-1],window.chrome&&window.chrome.extension||navigator.userAgent.match(/^Node\\.js/)||(f=!0)}var p}();var ee=/^[^\\/]+:\\/\\//,te={},re=new H(U);c(function(e){return function(){e.call(this),this.baseURL=U.substr(0,U.lastIndexOf("/")+1),this.map={},this.paths={},this.warnings=!1,this.defaultJSExtensions=!1,this.pluginFirst=!1,this.loaderErrorStack=!1,this.set("@empty",this.newModule({})),S.call(this,!1)}}),"undefined"==typeof require||"undefined"==typeof process||process.browser||(l.prototype._nodeRequire=require);var ne=["assert","buffer","child_process","cluster","console","constants","crypto","dgram","dns","domain","events","fs","http","https","module","net","os","path","process","punycode","querystring","readline","repl","stream","string_decoder","sys","timers","tls","tty","url","util","vm","zlib"];d("normalize",function(e){return function(e,t,r){var n=k.call(this,e,t);return r||!this.defaultJSExtensions||".js"==n.substr(n.length-3,3)||E(n)||(n+=".js"),n}});var ae="undefined"!=typeof XMLHttpRequest;d("locate",function(e){return function(t){return Promise.resolve(e.call(this,t)).then(function(e){return ae?e.replace(/#/g,"%23"):e})}}),d("fetch",function(){return function(e){return new Promise(function(t,r){Z(e.address,e.metadata.authorization,t,r)})}}),d("import",function(e){return function(t,r,n){return r&&r.name&&y.call(this,"SystemJS.import(name, { name: parentName }) is deprecated for SystemJS.import(name, parentName), while importing "+t+" from "+r.name),e.call(this,t,r,n).then(function(e){return e.__useDefault?e["default"]:e})}}),d("translate",function(e){return function(t){return"detect"==t.metadata.format&&(t.metadata.format=void 0),e.call(this,t)}}),d("instantiate",function(e){return function(e){if("json"==e.metadata.format&&!this.builder){var t=e.metadata.entry=P();t.deps=[],t.execute=function(){try{return JSON.parse(e.source)}catch(t){throw new Error("Invalid JSON file "+e.name)}}}}}),l.prototype.env="development";var oe;l.prototype.config=function(e){function t(e){for(var t in e)if(hasOwnProperty.call(e,t))return!0}var r=this;if("loaderErrorStack"in e&&(oe=$__curScript,e.loaderErrorStack?$__curScript=void 0:$__curScript=oe),"warnings"in e&&(r.warnings=e.warnings),e.transpilerRuntime===!1&&(r._loader.loadedTranspilerRuntime=!0),e.baseURL){if(t(r.packages)||t(r.meta)||t(r.depCache)||t(r.bundles)||t(r.packageConfigPaths))throw new TypeError("Incorrect configuration order. The baseURL must be configured with the first SystemJS.config call.");r.baseURL=e.baseURL,w.call(r)}if(e.defaultJSExtensions&&(r.defaultJSExtensions=e.defaultJSExtensions,y.call(r,"The defaultJSExtensions configuration option is deprecated, use packages configuration instead.")),e.pluginFirst&&(r.pluginFirst=e.pluginFirst),e.production&&S.call(r,!0),e.paths)for(var n in e.paths)r.paths[n]=e.paths[n];if(e.map){var a="";for(var n in e.map){var o=e.map[n];if("string"!=typeof o){a+=(a.length?", ":"")+'"'+n+'"';var i=r.defaultJSExtensions&&".js"!=n.substr(n.length-3,3),s=r.decanonicalize(n);i&&".js"==s.substr(s.length-3,3)&&(s=s.substr(0,s.length-3));var l="";for(var u in r.packages)s.substr(0,u.length)==u&&(!s[u.length]||"/"==s[u.length])&&l.split("/").length<u.split("/").length&&(l=u);l&&r.packages[l].main&&(s=s.substr(0,s.length-r.packages[l].main.length-1));var u=r.packages[s]=r.packages[s]||{};u.map=o}else r.map[n]=o}a&&y.call(r,"The map configuration for "+a+' uses object submaps, which is deprecated in global map.\\nUpdate this to use package contextual map with configs like SystemJS.config({ packages: { "'+n+'": { map: {...} } } }).')}if(e.packageConfigPaths){for(var d=[],c=0;c<e.packageConfigPaths.length;c++){var f=e.packageConfigPaths[c],m=Math.max(f.lastIndexOf("*")+1,f.lastIndexOf("/")),i=r.defaultJSExtensions&&".js"!=f.substr(m-3,3),p=r.decanonicalize(f.substr(0,m));i&&".js"==p.substr(p.length-3,3)&&(p=p.substr(0,p.length-3)),d[c]=p+f.substr(m)}r.packageConfigPaths=d}if(e.bundles)for(var n in e.bundles){for(var h=[],c=0;c<e.bundles[n].length;c++){var i=r.defaultJSExtensions&&".js"!=e.bundles[n][c].substr(e.bundles[n][c].length-3,3),g=r.decanonicalize(e.bundles[n][c]);i&&".js"==g.substr(g.length-3,3)&&(g=g.substr(0,g.length-3)),h.push(g)}r.bundles[n]=h}if(e.packages)for(var n in e.packages){if(n.match(/^([^\\/]+:)?\\/\\/$/))throw new TypeError('"'+n+'" is not a valid package name.');var s=k.call(r,n);"/"==s[s.length-1]&&(s=s.substr(0,s.length-1)),r.packages[s]=r.packages[s]||{};var u=e.packages[n];u.modules&&(y.call(r,"Package "+n+' is configured with "modules", which is deprecated as it has been renamed to "meta".'),u.meta=u.modules,delete u.modules),"object"==typeof u.main&&(u.map=u.map||{},u.map["./@main"]=u.main,u.main["default"]=u.main["default"]||"./",u.main="@main");for(var b in u)-1==J.call(Q,b)&&y.call(r,'"'+b+'" is not a valid package configuration option in package '+n);v(r.packages[s],u)}for(var x in e){var o=e[x];if("baseURL"!=x&&"map"!=x&&"packages"!=x&&"bundles"!=x&&"paths"!=x&&"warnings"!=x&&"packageConfigPaths"!=x&&"loaderErrorStack"!=x)if("object"!=typeof o||o instanceof Array)r[x]=o;else{r[x]=r[x]||{};for(var n in o)if("meta"==x&&"*"==n[0])r[x][n]=o[n];else if("meta"==x){var _=k.call(r,n);r.defaultJSExtensions&&".js"!=_.substr(_.length-3,3)&&!E(_)&&(_+=".js"),r[x][_]=o[n]}else if("depCache"==x){var i=r.defaultJSExtensions&&".js"!=n.substr(n.length-3,3),s=r.decanonicalize(n);i&&".js"==s.substr(s.length-3,3)&&(s=s.substr(0,s.length-3)),r[x][s]=o[n]}else r[x][n]=o[n]}}},function(){function e(e,t){var r,n,a=0;for(var o in e.packages)t.substr(0,o.length)!==o||t.length!==o.length&&"/"!==t[o.length]||(n=o.split("/").length,n>a&&(r=o,a=n));return r}function t(e,t,r,n,a){if(!n||"/"==n[n.length-1]||a||t.defaultExtension===!1)return n;if(n.match(le))return n;var o=!1;if(t.meta&&p(t.meta,n,function(e,t,r){return 0==r||e.lastIndexOf("*")!=e.length-1?o=!0:void 0}),!o&&e.meta&&p(e.meta,r+"/"+n,function(e,t,r){return 0==r||e.lastIndexOf("*")!=e.length-1?o=!0:void 0}),o)return n;var i="."+(t.defaultExtension||"js");return n.substr(n.length-i.length)!=i?n+i:n}function r(e,r,n,o,i){if(!o){if(!r.main)return n+(e.defaultJSExtensions?".js":"");o="./"==r.main.substr(0,2)?r.main.substr(2):r.main}if(r.map){var s="./"+o,l=x(r.map,s);if(l||(s="./"+t(e,r,n,o,i),s!="./"+o&&(l=x(r.map,s))),l)return a(e,r,n,l,s,i)}return n+"/"+t(e,r,n,o,i)}function n(e,t,r){if("."==e)throw new Error("Package "+r+' has a map entry for "." which is not permitted.');if(t.substr(0,e.length)==e&&"/"!=e[e.length-1]&&"/"==t[e.length])throw new Error("Package "+r+' has a recursive map for "'+e+'" which is not permitted.')}function a(e,r,a,o,i,s){var l=r.map[o];if("object"==typeof l)throw new Error("Synchronous conditional normalization not supported sync normalizing "+o+" in "+a);if(n(o,l,a),"string"!=typeof l&&(l=o=i),n(o,l,a),"."==l)l=a;else if("./"==l.substr(0,2))return a+"/"+t(e,r,a,l.substr(2)+i.substr(o.length),s);return e.normalizeSync(l+i.substr(o.length),a+"/")}function o(e,r,n,a,o){if(!a){if(!r.main)return Promise.resolve(n+(e.defaultJSExtensions?".js":""));a="./"==r.main.substr(0,2)?r.main.substr(2):r.main}var i,l;return r.map&&(i="./"+a,l=x(r.map,i),l||(i="./"+t(e,r,n,a,o),i!="./"+a&&(l=x(r.map,i)))),(l?s(e,r,n,l,i,o):Promise.resolve()).then(function(i){return i?Promise.resolve(i):Promise.resolve(n+"/"+t(e,r,n,a,o))})}function i(e,r,n,a,o,i,s){if("."==o)o=n;else if("./"==o.substr(0,2))return Promise.resolve(n+"/"+t(e,r,n,o.substr(2)+i.substr(a.length),s)).then(function(t){return I.call(e,t,n+"/")});return e.normalize(o+i.substr(a.length),n+"/")}function s(e,t,r,a,o,s){var l=t.map[a];return"string"==typeof l?(n(a,l,r),i(e,t,r,a,l,o,s)):e.builder?Promise.resolve(r+"/#:"+o):e["import"](t.map["@env"]||"@system-env",r).then(function(e){for(var t in l){var r="~"==t[0],n=b(r?t.substr(1):t,e);if(!r&&n||r&&!n)return l[t]}}).then(function(l){if(l){if("string"!=typeof l)throw new Error("Unable to map a package conditional to a package conditional.");return n(a,l,r),i(e,t,r,a,l,o,s)}})}function u(e){var t=e.lastIndexOf("*"),r=Math.max(t+1,e.lastIndexOf("/"));return{length:r,regEx:new RegExp("^("+e.substr(0,r).replace(/[.+?^${}()|[\\]\\\\]/g,"\\\\$&").replace(/\\*/g,"[^\\\\/]+")+")(\\\\/|$)"),wildcard:-1!=t}}function f(e,t){for(var r,n,a=!1,o=0;o<e.packageConfigPaths.length;o++){var i=e.packageConfigPaths[o],s=h[i]||(h[i]=u(i));if(!(t.length<s.length)){var l=t.match(s.regEx);!l||r&&(a&&s.wildcard||!(r.length<l[1].length))||(r=l[1],a=!s.wildcard,n=r+i.substr(s.length))}}return r?{packageName:r,configPath:n}:void 0}function m(e,t,r){var n=e.pluginLoader||e;return(n.meta[r]=n.meta[r]||{}).format="json",n.meta[r].loader=null,n.load(r).then(function(){var a=n.get(r)["default"];a.systemjs&&(a=a.systemjs),a.modules&&(a.meta=a.modules,y.call(e,"Package config file "+r+' is configured with "modules", which is deprecated as it has been renamed to "meta".'));for(var o in a)-1==J.call(Q,o)&&delete a[o];var i=e.packages[t]=e.packages[t]||{};if(v(i,a,!0),a.depCache){for(var s in a.depCache){var l;l="./"==s.substr(0,2)?t+"/"+s.substr(2):k.call(e,s),e.depCache[l]=(e.depCache[l]||[]).concat(a.depCache[s])}delete a.depCache}return"object"==typeof i.main&&(i.map=i.map||{},i.map["./@main"]=i.main,i.main["default"]=i.main["default"]||"./",i.main="@main"),i})}function p(e,t,r){var n;for(var a in e){var o="./"==a.substr(0,2)?"./":"";if(o&&(a=a.substr(2)),n=a.indexOf("*"),-1!==n&&a.substr(0,n)==t.substr(0,n)&&a.substr(n+1)==t.substr(t.length-a.length+n+1)&&r(a,e[o+a],a.split("/").length))return}var i=e[t]&&e.hasOwnProperty&&e.hasOwnProperty(t)?e[t]:e["./"+t];i&&r(i,i,0)}c(function(e){return function(){e.call(this),this.packages={},this.packageConfigPaths=[]}}),l.prototype.normalizeSync=l.prototype.decanonicalize=l.prototype.normalize,d("decanonicalize",function(t){return function(r,n){if(this.builder)return t.call(this,r,n,!0);var a=t.call(this,r,n);if(!this.defaultJSExtensions)return a;var o=e(this,a),i=this.packages[o],s=i&&i.defaultExtension;return void 0==s&&i&&i.meta&&p(i.meta,a.substr(o),function(e,t,r){return 0==r||e.lastIndexOf("*")!=e.length-1?(s=!1,!0):void 0}),(s===!1||s&&".js"!=s)&&".js"!=r.substr(r.length-3,3)&&".js"==a.substr(a.length-3,3)&&(a=a.substr(0,a.length-3)),a}}),d("normalizeSync",function(t){return function(n,o,i){y.call(this,"SystemJS.normalizeSync has been deprecated for SystemJS.decanonicalize.");var s=this;if(i=i===!0,o)var l=e(s,o)||s.defaultJSExtensions&&".js"==o.substr(o.length-3,3)&&e(s,o.substr(0,o.length-3));var u=l&&s.packages[l];if(u&&"."!=n[0]){var d=u.map,c=d&&x(d,n);if(c&&"string"==typeof d[c])return a(s,u,l,c,n,i)}var m=s.defaultJSExtensions&&".js"!=n.substr(n.length-3,3),p=t.call(s,n,o);m&&".js"!=p.substr(p.length-3,3)&&(m=!1),m&&(p=p.substr(0,p.length-3));var h=f(s,p),g=h&&h.packageName||e(s,p);if(!g)return p+(m?".js":"");var v=p.substr(g.length+1);return r(s,s.packages[g]||{},g,v,i)}}),d("normalize",function(t){return function(r,n,a){var i=this;return a=a===!0,Promise.resolve().then(function(){if(n)var t=e(i,n)||i.defaultJSExtensions&&".js"==n.substr(n.length-3,3)&&e(i,n.substr(0,n.length-3));var o=t&&i.packages[t];if(o&&"./"!=r.substr(0,2)){var l=o.map,u=l&&x(l,r);if(u)return s(i,o,t,u,r,a)}return Promise.resolve()}).then(function(s){if(s)return s;var l=i.defaultJSExtensions&&".js"!=r.substr(r.length-3,3),u=t.call(i,r,n);\nl&&".js"!=u.substr(u.length-3,3)&&(l=!1),l&&(u=u.substr(0,u.length-3));var d=f(i,u),c=d&&d.packageName||e(i,u);if(!c)return Promise.resolve(u+(l?".js":""));var p=i.packages[c],h=p&&(p.configured||!d);return(h?Promise.resolve(p):m(i,c,d.configPath)).then(function(e){var t=u.substr(c.length+1);return o(i,e,c,t,a)})})}});var h={};d("locate",function(t){return function(r){var n=this;return Promise.resolve(t.call(this,r)).then(function(t){var a=e(n,r.name);if(a){var o=n.packages[a],i=r.name.substr(a.length+1);o.format&&(r.metadata.format=r.metadata.format||o.format);var s={};if(o.meta){var l=0;p(o.meta,i,function(e,t,r){r>l&&(l=r),v(s,t,r&&l>r)}),v(r.metadata,s)}}return t})}})}(),function(){function t(){if(i&&"interactive"===i.script.readyState)return i.load;for(var e=0;e<u.length;e++)if("interactive"==u[e].script.readyState)return i=u[e],i.load}function r(e,t){return new Promise(function(e,r){t.metadata.integrity&&r(new Error("Subresource integrity checking is not supported in web workers.")),s=t;try{importScripts(t.address)}catch(n){s=null,r(n)}s=null,t.metadata.entry||r(new Error(t.address+" did not call System.register or AMD define")),e("")})}if("undefined"!=typeof document)var n=document.getElementsByTagName("head")[0];var a,o,i,s=null,l=n&&function(){var e=document.createElement("script"),t="undefined"!=typeof opera&&"[object Opera]"===opera.toString();return e.attachEvent&&!(e.attachEvent.toString&&e.attachEvent.toString().indexOf("[native code")<0)&&!t}(),u=[],c=0,f=[];d("pushRegister_",function(e){return function(r){return e.call(this,r)?!1:(s?this.reduceRegister_(s,r):l?this.reduceRegister_(t(),r):c?f.push(r):this.reduceRegister_(null,r),!0)}}),d("fetch",function(t){return function(s){var d=this;return"json"!=s.metadata.format&&s.metadata.scriptLoad&&(F||A)?A?r(d,s):new Promise(function(t,r){function m(e){if(!g.readyState||"loaded"==g.readyState||"complete"==g.readyState){if(c--,s.metadata.entry||f.length){if(!l){for(var n=0;n<f.length;n++)d.reduceRegister_(s,f[n]);f=[]}}else d.reduceRegister_(s);h(),s.metadata.entry||s.metadata.bundle||r(new Error(s.name+" did not call System.register or AMD define. If loading a global module configure the global name via the meta exports property for script injection support.")),t("")}}function p(e){h(),r(new Error("Unable to load script "+s.address))}function h(){if(e.System=a,e.require=o,g.detachEvent){g.detachEvent("onreadystatechange",m);for(var t=0;t<u.length;t++)u[t].script==g&&(i&&i.script==g&&(i=null),u.splice(t,1))}else g.removeEventListener("load",m,!1),g.removeEventListener("error",p,!1);n.removeChild(g)}var g=document.createElement("script");g.async=!0,s.metadata.crossOrigin&&(g.crossOrigin=s.metadata.crossOrigin),s.metadata.integrity&&g.setAttribute("integrity",s.metadata.integrity),l?(g.attachEvent("onreadystatechange",m),u.push({script:g,load:s})):(g.addEventListener("load",m,!1),g.addEventListener("error",p,!1)),c++,a=e.System,o=e.require,g.src=s.address,n.appendChild(g)}):t.call(this,s)}})}();var ie=/^(\\s*\\/\\*[^\\*]*(\\*(?!\\/)[^\\*]*)*\\*\\/|\\s*\\/\\/[^\\n]*|\\s*"[^"]+"\\s*;?|\\s*'[^']+'\\s*;?)*\\s*/;!function(){function t(e,r,n){if(n[e.groupIndex]=n[e.groupIndex]||[],-1==J.call(n[e.groupIndex],e)){n[e.groupIndex].push(e);for(var a=0,o=e.normalizedDeps.length;o>a;a++){var i=e.normalizedDeps[a],s=r.defined[i];if(s&&!s.evaluated){var l=e.groupIndex+(s.declarative!=e.declarative);if(null===s.groupIndex||s.groupIndex<l){if(null!==s.groupIndex&&(n[s.groupIndex].splice(J.call(n[s.groupIndex],s),1),0==n[s.groupIndex].length))throw new Error("Mixed dependency cycle detected");s.groupIndex=l}t(s,r,n)}}}}function r(e,r){var n=r.defined[e];if(!n.module){n.groupIndex=0;var a=[];t(n,r,a);for(var o=!!n.declarative==a.length%2,s=a.length-1;s>=0;s--){for(var l=a[s],d=0;d<l.length;d++){var c=l[d];o?i(c,r):u(c,r)}o=!o}}}function a(){}function o(e,t){return t[e]||(t[e]={name:e,dependencies:[],exports:new a,importers:[]})}function i(t,r){if(!t.module){var n=r._loader.moduleRecords,a=t.module=o(t.name,n),s=t.module.exports,l=t.declare.call(e,function(e,t){if(a.locked=!0,"object"==typeof e)for(var r in e)s[r]=e[r];else s[e]=t;for(var n=0,o=a.importers.length;o>n;n++){var i=a.importers[n];if(!i.locked){var l=J.call(i.dependencies,a);i.setters[l](s)}}return a.locked=!1,t},{id:t.name});if(a.setters=l.setters,a.execute=l.execute,!a.setters||!a.execute)throw new TypeError("Invalid System.register form for "+t.name);for(var u=0,d=t.normalizedDeps.length;d>u;u++){var c,f=t.normalizedDeps[u],m=r.defined[f],p=n[f];p?c=p.exports:m&&!m.declarative?c=m.esModule:m?(i(m,r),p=m.module,c=p.exports):c=r.get(f),p&&p.importers?(p.importers.push(a),a.dependencies.push(p)):a.dependencies.push(null);for(var h=t.originalIndices[u],g=0,v=h.length;v>g;++g){var y=h[g];a.setters[y]&&a.setters[y](c)}}}}function s(e,t){var r,n=t.defined[e];if(n)n.declarative?p(e,[],t):n.evaluated||u(n,t),r=n.module.exports;else if(r=t.get(e),!r)throw new Error("Unable to load dependency "+e+".");return(!n||n.declarative)&&r&&r.__useDefault?r["default"]:r}function u(t,r){if(!t.module){var a={},o=t.module={exports:a,id:t.name};if(!t.executingRequire)for(var i=0,l=t.normalizedDeps.length;l>i;i++){var d=t.normalizedDeps[i],c=r.defined[d];c&&u(c,r)}t.evaluated=!0;var f=t.execute.call(e,function(e){for(var n=0,a=t.deps.length;a>n;n++)if(t.deps[n]==e)return s(t.normalizedDeps[n],r);var o=r.normalizeSync(e,t.name);if(-1!=J.call(t.normalizedDeps,o))return s(o,r);throw new Error("Module "+e+" not declared as a dependency of "+t.name)},a,o);f&&(o.exports=f),a=o.exports,a&&(a.__esModule||a instanceof n)?t.esModule=a:t.esmExports&&a!==e?t.esModule=m(a):t.esModule={"default":a}}}function p(t,r,n){var a=n.defined[t];if(a&&!a.evaluated&&a.declarative){r.push(t);for(var o=0,i=a.normalizedDeps.length;i>o;o++){var s=a.normalizedDeps[o];-1==J.call(r,s)&&(n.defined[s]?p(s,r,n):n.get(s))}a.evaluated||(a.evaluated=!0,a.module.execute.call(e))}}l.prototype.register=function(e,t,r){if("string"!=typeof e&&(r=t,t=e,e=null),"boolean"==typeof r)return this.registerDynamic.apply(this,arguments);var n=P();n.name=e&&(this.decanonicalize||this.normalize).call(this,e),n.declarative=!0,n.deps=t,n.declare=r,this.pushRegister_({amd:!1,entry:n})},l.prototype.registerDynamic=function(e,t,r,n){"string"!=typeof e&&(n=r,r=t,t=e,e=null);var a=P();a.name=e&&(this.decanonicalize||this.normalize).call(this,e),a.deps=t,a.execute=n,a.executingRequire=r,this.pushRegister_({amd:!1,entry:a})},d("reduceRegister_",function(){return function(e,t){if(t){var r=t.entry,n=e&&e.metadata;if(r.name&&(r.name in this.defined||(this.defined[r.name]=r),n&&(n.bundle=!0)),!r.name||e&&r.name==e.name){if(!n)throw new TypeError("Invalid System.register call. Anonymous System.register calls can only be made by modules loaded by SystemJS.import and not via script tags.");if(n.entry)throw"register"==n.format?new Error("Multiple anonymous System.register calls in module "+e.name+". If loading a bundle, ensure all the System.register calls are named."):new Error("Module "+e.name+" interpreted as "+n.format+" module format, but called System.register.");n.format||(n.format="register"),n.entry=r}}}}),c(function(e){return function(){e.call(this),this.defined={},this._loader.moduleRecords={}}}),q(a,"toString",{value:function(){return"Module"}}),d("delete",function(e){return function(t){return delete this._loader.moduleRecords[t],delete this.defined[t],e.call(this,t)}}),d("fetch",function(e){return function(t){return this.defined[t.name]?(t.metadata.format="defined",""):(t.metadata.deps=t.metadata.deps||[],e.call(this,t))}}),d("translate",function(e){return function(t){return t.metadata.deps=t.metadata.deps||[],Promise.resolve(e.call(this,t)).then(function(e){return("register"==t.metadata.format||!t.metadata.format&&R(t.source))&&(t.metadata.format="register"),e})}}),d("instantiate",function(e){return function(t){"detect"==t.metadata.format&&(t.metadata.format=void 0),e.call(this,t);var n,a=this;if(a.defined[t.name])n=a.defined[t.name],n.declarative||(n.deps=n.deps.concat(t.metadata.deps));else if(t.metadata.entry)n=t.metadata.entry,n.deps=n.deps.concat(t.metadata.deps);else if(!(a.builder&&t.metadata.bundle||"register"!=t.metadata.format&&"esm"!=t.metadata.format&&"es6"!=t.metadata.format)){if("undefined"!=typeof Y&&Y.call(a,t),!t.metadata.entry&&!t.metadata.bundle)throw new Error(t.name+" detected as "+t.metadata.format+" but didn't execute.");n=t.metadata.entry,n&&t.metadata.deps&&(n.deps=n.deps.concat(t.metadata.deps))}n||(n=P(),n.deps=t.metadata.deps,n.execute=function(){}),a.defined[t.name]=n;var o=f(n.deps);n.deps=o.names,n.originalIndices=o.indices,n.name=t.name,n.esmExports=t.metadata.esmExports!==!1;for(var i=[],s=0,l=n.deps.length;l>s;s++)i.push(Promise.resolve(a.normalize(n.deps[s],t.name)));return Promise.all(i).then(function(e){return n.normalizedDeps=e,{deps:n.deps,execute:function(){return r(t.name,a),p(t.name,[],a),a.defined[t.name]=void 0,a.newModule(n.declarative?n.module.exports:n.esModule)}}})}})}(),function(){var t=/(^\\s*|[}\\);\\n]\\s*)(import\\s*(['"]|(\\*\\s+as\\s+)?[^"'\\(\\)\\n;]+\\s*from\\s*['"]|\\{)|export\\s+\\*\\s+from\\s+["']|export\\s*(\\{|default|function|class|var|const|let|async\\s+function))/,r=/\\$traceurRuntime\\s*\\./,n=/babelHelpers\\s*\\./;d("translate",function(a){return function(o){var i=this;return a.call(i,o).then(function(a){if("esm"==o.metadata.format||"es6"==o.metadata.format||!o.metadata.format&&a.match(t)){if("es6"==o.metadata.format&&y.call(i,"Module "+o.name+' has metadata setting its format to "es6", which is deprecated.\\nThis should be updated to "esm".'),o.metadata.format="esm",i.transpiler===!1){if(i.builder)return a;throw new TypeError("Unable to dynamically transpile ES module as SystemJS.transpiler set to false.")}return i._loader.loadedTranspiler=i._loader.loadedTranspiler||!1,i.pluginLoader&&(i.pluginLoader._loader.loadedTranspiler=i._loader.loadedTranspiler||!1),(i._loader.transpilerPromise||(i._loader.transpilerPromise=Promise.resolve(e["typescript"==i.transpiler?"ts":i.transpiler]||(i.pluginLoader||i)["import"](i.transpiler)))).then(function(e){return i._loader.loadedTranspilerRuntime=!0,e.translate?e==o.metadata.loaderModule?o.source:("string"==typeof o.metadata.sourceMap&&(o.metadata.sourceMap=JSON.parse(o.metadata.sourceMap)),Promise.resolve(e.translate.call(i,o)).then(function(e){var t=o.metadata.sourceMap;if(t&&"object"==typeof t){var r=o.name.split("!")[0];t.file=r+"!transpiled",(!t.sources||t.sources.length<=1)&&(t.sources=[r])}return"esm"==o.metadata.format&&!i.builder&&R(e)&&(o.metadata.format="register"),e})):(i.builder&&(o.metadata.originalSource=o.source),W.call(i,o).then(function(e){return o.metadata.sourceMap=void 0,e}))})}if(i.transpiler===!1)return a;if(i._loader.loadedTranspiler!==!1||"traceur"!=i.transpiler&&"typescript"!=i.transpiler&&"babel"!=i.transpiler||o.name!=i.normalizeSync(i.transpiler)||(a.length>100&&!o.metadata.format&&(o.metadata.format="global","traceur"===i.transpiler&&(o.metadata.exports="traceur"),"typescript"===i.transpiler&&(o.metadata.exports="ts")),i._loader.loadedTranspiler=!0),i._loader.loadedTranspilerRuntime===!1&&(o.name==i.normalizeSync("traceur-runtime")||o.name==i.normalizeSync("babel/external-helpers*"))&&(a.length>100&&(o.metadata.format=o.metadata.format||"global"),i._loader.loadedTranspilerRuntime=!0),("register"==o.metadata.format||o.metadata.bundle)&&i._loader.loadedTranspilerRuntime!==!0){if(!e.$traceurRuntime&&o.source.match(r))return i._loader.loadedTranspilerRuntime=i._loader.loadedTranspilerRuntime||!1,i["import"]("traceur-runtime").then(function(){return a});if(!e.babelHelpers&&o.source.match(n))return i._loader.loadedTranspilerRuntime=i._loader.loadedTranspilerRuntime||!1,i["import"]("babel/external-helpers").then(function(){return a})}return a})}})}();var se="undefined"!=typeof self?"self":"global";d("fetch",function(e){return function(t){return t.metadata.exports&&!t.metadata.format&&(t.metadata.format="global"),e.call(this,t)}}),d("instantiate",function(e){return function(t){var r=this;if(t.metadata.format||(t.metadata.format="global"),"global"==t.metadata.format&&!t.metadata.registered){var n=P();t.metadata.entry=n,n.deps=[];for(var a in t.metadata.globals){var o=t.metadata.globals[a];o&&n.deps.push(o)}n.execute=function(e,n,a){var o;if(t.metadata.globals){o={};for(var i in t.metadata.globals)t.metadata.globals[i]&&(o[i]=e(t.metadata.globals[i]))}var s=t.metadata.exports;s&&(t.source+="\\n"+se+'["'+s+'"] = '+s+";");var l=r.get("@@global-helpers").prepareGlobal(a.id,s,o);return Y.call(r,t),l()}}return e.call(this,t)}}),d("reduceRegister_",function(e){return function(t,r){if(r||!t.metadata.exports)return e.call(this,t,r);t.metadata.format="global";var n=t.metadata.entry=P();n.deps=t.metadata.deps;var a=O(t.metadata.exports);n.execute=function(){return a}}}),c(function(t){return function(){function r(t){if(Object.keys)Object.keys(e).forEach(t);else for(var r in e)i.call(e,r)&&t(r)}function n(t){r(function(r){if(-1==J.call(s,r)){try{var n=e[r]}catch(a){s.push(r)}t(r,n)}})}var a=this;t.call(a);var o,i=Object.prototype.hasOwnProperty,s=["_g","sessionStorage","localStorage","clipboardData","frames","frameElement","external","mozAnimationStartTime","webkitStorageInfo","webkitIndexedDB","mozInnerScreenY","mozInnerScreenX"];a.set("@@global-helpers",a.newModule({prepareGlobal:function(t,r,a){var i=e.define;e.define=void 0;var s;if(a){s={};for(var l in a)s[l]=e[l],e[l]=a[l]}return r||(o={},n(function(e,t){o[e]=t})),function(){var t;if(r)t=O(r);else{t={};var a,l;n(function(e,r){o[e]!==r&&"undefined"!=typeof r&&(t[e]=r,"undefined"!=typeof a?l||a===r||(l=!0):a=r)}),t=l?t:a}if(s)for(var u in s)e[u]=s[u];return e.define=i,t}}}))}}),function(){function t(e){function t(e,t){for(var r=0;r<e.length;r++)if(e[r][0]<t.index&&e[r][1]>t.index)return!0;return!1}n.lastIndex=a.lastIndex=o.lastIndex=0;var r,i=[],s=[],l=[];if(e.length/e.split("\\n").length<200){for(;r=o.exec(e);)s.push([r.index,r.index+r[0].length]);for(;r=a.exec(e);)t(s,r)||l.push([r.index,r.index+r[0].length])}for(;r=n.exec(e);)if(!t(s,r)&&!t(l,r)){var u=r[1].substr(1,r[1].length-2);if(u.match(/"|'/))continue;"/"==u[u.length-1]&&(u=u.substr(0,u.length-1)),i.push(u)}return i}var r=/(?:^\\uFEFF?|[^$_a-zA-Z\\xA0-\\uFFFF.])(exports\\s*(\\[['"]|\\.)|module(\\.exports|\\['exports'\\]|\\["exports"\\])\\s*(\\[['"]|[=,\\.]))/,n=/(?:^\\uFEFF?|[^$_a-zA-Z\\xA0-\\uFFFF."'])require\\s*\\(\\s*("[^"\\\\]*(?:\\\\.[^"\\\\]*)*"|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*')\\s*\\)/g,a=/(^|[^\\\\])(\\/\\*([\\s\\S]*?)\\*\\/|([^:]|^)\\/\\/(.*)$)/gm,o=/("[^"\\\\\\n\\r]*(\\\\.[^"\\\\\\n\\r]*)*"|'[^'\\\\\\n\\r]*(\\\\.[^'\\\\\\n\\r]*)*')/g,i=/^\\#\\!.*/;d("instantiate",function(a){return function(o){var s=this;if(o.metadata.format||(r.lastIndex=0,n.lastIndex=0,(n.exec(o.source)||r.exec(o.source))&&(o.metadata.format="cjs")),"cjs"==o.metadata.format){var l=o.metadata.deps,u=o.metadata.cjsRequireDetection===!1?[]:t(o.source);for(var d in o.metadata.globals)o.metadata.globals[d]&&u.push(o.metadata.globals[d]);var c=P();o.metadata.entry=c,c.deps=u,c.executingRequire=!0,c.execute=function(t,r,n){function a(e){return"/"==e[e.length-1]&&(e=e.substr(0,e.length-1)),t.apply(this,arguments)}if(a.resolve=function(e){return s.get("@@cjs-helpers").requireResolve(e,n.id)},!o.metadata.cjsDeferDepsExecute)for(var u=0;u<l.length;u++)a(l[u]);var d=s.get("@@cjs-helpers").getPathVars(n.id),c={exports:r,args:[a,r,n,d.filename,d.dirname,e,e]},f="(function(require, exports, module, __filename, __dirname, global, GLOBAL";if(o.metadata.globals)for(var m in o.metadata.globals)c.args.push(a(o.metadata.globals[m])),f+=", "+m;var p=e.define;e.define=void 0,e.__cjsWrapper=c,o.source=f+") {"+o.source.replace(i,"")+"\\n}).apply(__cjsWrapper.exports, __cjsWrapper.args);",Y.call(s,o),e.__cjsWrapper=void 0,e.define=p}}return a.call(s,o)}})}(),c(function(e){return function(){function t(e){return"file:///"==e.substr(0,8)?e.substr(7+!!D):n&&e.substr(0,n.length)==n?e.substr(n.length):e}var r=this;if(e.call(r),"undefined"!=typeof window&&"undefined"!=typeof document&&window.location)var n=location.protocol+"//"+location.hostname+(location.port?":"+location.port:"");r.set("@@cjs-helpers",r.newModule({requireResolve:function(e,n){return t(r.normalizeSync(e,n))},getPathVars:function(e){var r,n=e.lastIndexOf("!");r=-1!=n?e.substr(0,n):e;var a=r.split("/");return a.pop(),a=a.join("/"),{filename:t(r),dirname:t(a)}}}))}}),d("fetch",function(t){return function(r){return r.metadata.scriptLoad&&F&&(e.define=this.amdDefine),t.call(this,r)}}),c(function(t){return function(){function r(e,t){e=e.replace(i,"");var r=e.match(u),n=(r[1].split(",")[t]||"require").replace(c,""),a=f[n]||(f[n]=new RegExp(s+n+l,"g"));a.lastIndex=0;for(var o,d=[];o=a.exec(e);)d.push(o[2]||o[3]);return d}function n(e,t,r,a){if("object"==typeof e&&!(e instanceof Array))return n.apply(null,Array.prototype.splice.call(arguments,1,arguments.length-1));if("string"==typeof e&&"function"==typeof t&&(e=[e]),!(e instanceof Array)){if("string"==typeof e){var i=o.defaultJSExtensions&&".js"!=e.substr(e.length-3,3),s=o.decanonicalize(e,a);i&&".js"==s.substr(s.length-3,3)&&(s=s.substr(0,s.length-3));var l=o.get(s);if(!l)throw new Error('Module not already loaded loading "'+e+'" as '+s+(a?' from "'+a+'".':"."));return l.__useDefault?l["default"]:l}throw new TypeError("Invalid require")}for(var u=[],d=0;d<e.length;d++)u.push(o["import"](e[d],a));Promise.all(u).then(function(e){t&&t.apply(null,e)},r)}function a(t,a,i){function s(t,r,s){function c(e,r,a){return"string"==typeof e&&"function"!=typeof r?t(e):n.call(o,e,r,a,s.id)}for(var f=[],m=0;m<a.length;m++)f.push(t(a[m]));s.uri=s.id,s.config=function(){},-1!=d&&f.splice(d,0,s),-1!=u&&f.splice(u,0,r),-1!=l&&(c.toUrl=function(e){var t=o.defaultJSExtensions&&".js"!=e.substr(e.length-3,3),r=o.decanonicalize(e,s.id);return t&&".js"==r.substr(r.length-3,3)&&(r=r.substr(0,r.length-3)),r},f.splice(l,0,c));var p=e.require;e.require=n;var h=i.apply(-1==u?e:r,f);return e.require=p,"undefined"==typeof h&&s&&(h=s.exports),"undefined"!=typeof h?h:void 0}"string"!=typeof t&&(i=a,a=t,t=null),a instanceof Array||(i=a,a=["require","exports","module"].splice(0,i.length)),"function"!=typeof i&&(i=function(e){return function(){return e}}(i)),void 0===a[a.length-1]&&a.pop();var l,u,d;-1!=(l=J.call(a,"require"))&&(a.splice(l,1),t||(a=a.concat(r(i.toString(),l)))),-1!=(u=J.call(a,"exports"))&&a.splice(u,1),-1!=(d=J.call(a,"module"))&&a.splice(d,1);var c=P();c.name=t&&(o.decanonicalize||o.normalize).call(o,t),c.deps=a,c.execute=s,o.pushRegister_({amd:!0,entry:c})}var o=this;t.call(this);var i=/(\\/\\*([\\s\\S]*?)\\*\\/|([^:]|^)\\/\\/(.*)$)/gm,s="(?:^|[^$_a-zA-Z\\\\xA0-\\\\uFFFF.])",l="\\\\s*\\\\(\\\\s*(\\"([^\\"]+)\\"|'([^']+)')\\\\s*\\\\)",u=/\\(([^\\)]*)\\)/,c=/^\\s+|\\s+$/g,f={};a.amd={},d("reduceRegister_",function(e){return function(t,r){if(!r||!r.amd)return e.call(this,t,r);var n=t&&t.metadata,a=r.entry;if(n)if(n.format&&"detect"!=n.format){if(!a.name&&"amd"!=n.format)throw new Error("AMD define called while executing "+n.format+" module "+t.name)}else n.format="amd";if(a.name)n&&(n.entry||n.bundle?n.entry&&n.entry.name&&(n.entry=void 0):n.entry=a,n.bundle=!0),a.name in this.defined||(this.defined[a.name]=a);else{if(!n)throw new TypeError("Unexpected anonymous AMD define.");if(n.entry&&!n.entry.name)throw new Error("Multiple anonymous defines in module "+t.name);n.entry=a}}}),o.amdDefine=a,o.amdRequire=n}}),function(){var t=/(?:^\\uFEFF?|[^$_a-zA-Z\\xA0-\\uFFFF.])define\\s*\\(\\s*("[^"]+"\\s*,\\s*|'[^']+'\\s*,\\s*)?\\s*(\\[(\\s*(("[^"]+"|'[^']+')\\s*,|\\/\\/.*\\r?\\n|\\/\\*(.|\\s)*?\\*\\/))*(\\s*("[^"]+"|'[^']+')\\s*,?)?(\\s*(\\/\\/.*\\r?\\n|\\/\\*(.|\\s)*?\\*\\/))*\\s*\\]|function\\s*|{|[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*\\))/;d("instantiate",function(r){return function(n){var a=this;if("amd"==n.metadata.format||!n.metadata.format&&n.source.match(t))if(n.metadata.format="amd",a.builder||a.execute===!1)n.metadata.execute=function(){return n.metadata.builderExecute.apply(this,arguments)};else{var o=e.define;e.define=this.amdDefine;try{Y.call(a,n)}finally{e.define=o}if(!n.metadata.entry&&!n.metadata.bundle)throw new TypeError("AMD module "+n.name+" did not define")}return r.call(a,n)}})}(),function(){function e(e,t){if(t){var r;if(e.pluginFirst){if(-1!=(r=t.lastIndexOf("!")))return t.substr(r+1)}else if(-1!=(r=t.indexOf("!")))return t.substr(0,r);return t}}function t(e,t){var r,n,a=t.lastIndexOf("!");return-1!=a?(e.pluginFirst?(r=t.substr(a+1),n=t.substr(0,a)):(r=t.substr(0,a),n=t.substr(a+1)||r.substr(r.lastIndexOf(".")+1)),{argument:r,plugin:n}):void 0}function r(e,t,r,n){return n&&".js"==t.substr(t.length-3,3)&&(t=t.substr(0,t.length-3)),e.pluginFirst?r+"!"+t:t+"!"+r}function n(e,t){return e.defaultJSExtensions&&".js"!=t.substr(t.length-3,3)}function a(a){return function(o,i,s){var l=this;i=e(this,i);var u=t(l,o);if(!u)return a.call(this,o,i,s);var d=l.normalizeSync(u.argument,i,!0),c=l.normalizeSync(u.plugin,i,!0);return r(l,d,c,n(l,u.argument))}}d("decanonicalize",a),d("normalizeSync",a),d("normalize",function(a){return function(o,i,s){var l=this;i=e(this,i);var u=t(l,o);return u?Promise.all([l.normalize(u.argument,i,!0),l.normalize(u.plugin,i)]).then(function(e){return r(l,e[0],e[1],n(l,u.argument))}):a.call(l,o,i,s)}}),d("locate",function(e){return function(t){var r,n=this,a=t.name;return n.pluginFirst?-1!=(r=a.indexOf("!"))&&(t.metadata.loader=a.substr(0,r),t.name=a.substr(r+1)):-1!=(r=a.lastIndexOf("!"))&&(t.metadata.loader=a.substr(r+1),t.name=a.substr(0,r)),e.call(n,t).then(function(e){return-1==r&&t.metadata.loader?n.normalize(t.metadata.loader,t.name).then(function(r){return t.metadata.loader=r,e}):e}).then(function(e){var r=t.metadata.loader;if(!r)return e;if(t.name==r)throw new Error("Plugin "+r+" cannot load itself, make sure it is excluded from any wildcard meta configuration via a custom loader: false rule.");if(n.defined&&n.defined[a])return e;var o=n.pluginLoader||n;return o["import"](r).then(function(r){return t.metadata.loaderModule=r,t.address=e,r.locate?r.locate.call(n,t):e})})}}),d("fetch",function(e){return function(t){var r=this;return t.metadata.loaderModule&&t.metadata.loaderModule.fetch&&"defined"!=t.metadata.format?(t.metadata.scriptLoad=!1,t.metadata.loaderModule.fetch.call(r,t,function(t){return e.call(r,t)})):e.call(r,t)}}),d("translate",function(e){return function(t){var r=this;return t.metadata.loaderModule&&t.metadata.loaderModule.translate&&"defined"!=t.metadata.format?Promise.resolve(t.metadata.loaderModule.translate.call(r,t)).then(function(n){var a=t.metadata.sourceMap;if(a){if("object"!=typeof a)throw new Error("load.metadata.sourceMap must be set to an object.");var o=t.name.split("!")[0];a.file=o+"!transpiled",(!a.sources||a.sources.length<=1)&&(a.sources=[o])}return"string"==typeof n?t.source=n:y.call(this,"Plugin "+t.metadata.loader+" should return the source in translate, instead of setting load.source directly. This support will be deprecated."),e.call(r,t)}):e.call(r,t)}}),d("instantiate",function(e){return function(t){var r=this,n=!1;return t.metadata.loaderModule&&t.metadata.loaderModule.instantiate&&!r.builder&&"defined"!=t.metadata.format?Promise.resolve(t.metadata.loaderModule.instantiate.call(r,t,function(t){if(n)throw new Error("Instantiate must only be called once.");return n=!0,e.call(r,t)})).then(function(a){return n?a:(t.metadata.entry=P(),t.metadata.entry.execute=function(){return a},t.metadata.entry.deps=t.metadata.deps,t.metadata.format="defined",e.call(r,t))}):e.call(r,t)}})}();var le=/#\\{[^\\}]+\\}/;d("normalize",function(e){return function(t,r,n){var a=this;return L.call(a,t,r).then(function(t){return e.call(a,t,r,n)}).then(function(e){return I.call(a,e,r)})}}),function(){d("fetch",function(e){return function(t){var r=t.metadata.alias,n=t.metadata.deps||[];if(r){t.metadata.format="defined";var a=P();return this.defined[t.name]=a,a.declarative=!0,a.deps=n.concat([r]),a.declare=function(e){return{setters:[function(t){for(var r in t)e(r,t[r]);t.__useDefault&&(a.module.exports.__useDefault=!0)}],execute:function(){}}},""}return e.call(this,t)}})}(),function(){function e(e,t,r){for(var n,a=t.split(".");a.length>1;)n=a.shift(),e=e[n]=e[n]||{};n=a.shift(),n in e||(e[n]=r)}c(function(e){return function(){this.meta={},e.call(this)}}),d("locate",function(e){return function(t){var r,n=this.meta,a=t.name,o=0;for(var i in n)if(r=i.indexOf("*"),-1!==r&&i.substr(0,r)===a.substr(0,r)&&i.substr(r+1)===a.substr(a.length-i.length+r+1)){var s=i.split("/").length;s>o&&(o=s),v(t.metadata,n[i],o!=s)}return n[a]&&v(t.metadata,n[a]),e.call(this,t)}});var t=/^(\\s*\\/\\*[^\\*]*(\\*(?!\\/)[^\\*]*)*\\*\\/|\\s*\\/\\/[^\\n]*|\\s*"[^"]+"\\s*;?|\\s*'[^']+'\\s*;?)+/,r=/\\/\\*[^\\*]*(\\*(?!\\/)[^\\*]*)*\\*\\/|\\/\\/[^\\n]*|"[^"]+"\\s*;?|'[^']+'\\s*;?/g;d("translate",function(n){return function(a){var o=a.source.match(t);if(o)for(var i=o[0].match(r),s=0;s<i.length;s++){var l=i[s],u=l.length,d=l.substr(0,1);if(";"==l.substr(u-1,1)&&u--,'"'==d||"'"==d){var c=l.substr(1,l.length-3),f=c.substr(0,c.indexOf(" "));if(f){var m=c.substr(f.length+1,c.length-f.length-1);"[]"==f.substr(f.length-2,2)?(f=f.substr(0,f.length-2),a.metadata[f]=a.metadata[f]||[],a.metadata[f].push(m)):a.metadata[f]instanceof Array?(y.call(this,"Module "+a.name+' contains deprecated "deps '+m+'" meta syntax.\\nThis should be updated to "deps[] '+m+'" for pushing to array meta.'),a.metadata[f].push(m)):e(a.metadata,f,m)}else a.metadata[c]=!0}}return n.call(this,a)}})}(),function(){c(function(e){return function(){e.call(this),this.bundles={},this._loader.loadedBundles={}}}),d("locate",function(e){return function(t){var r=this,n=!1;if(!(t.name in r.defined))for(var a in r.bundles){for(var o=0;o<r.bundles[a].length;o++){var i=r.bundles[a][o];if(i==t.name){n=!0;break}if(-1!=i.indexOf("*")){var s=i.split("*");if(2!=s.length){r.bundles[a].splice(o--,1);continue}if(t.name.substring(0,s[0].length)==s[0]&&t.name.substr(t.name.length-s[1].length,s[1].length)==s[1]&&-1==t.name.substr(s[0].length,t.name.length-s[1].length-s[0].length).indexOf("/")){n=!0;break}}}if(n)return r["import"](a).then(function(){return e.call(r,t)})}return e.call(r,t)}})}(),function(){c(function(e){return function(){e.call(this),this.depCache={}}}),d("locate",function(e){return function(t){var r=this,n=r.depCache[t.name];if(n)for(var a=0;a<n.length;a++)r["import"](n[a],t.name);return e.call(r,t)}})}(),X=new l,e.SystemJS=X,X.version="0.19.27 Standard","object"==typeof exports&&(module.exports=a),e.Reflect=e.Reflect||{},e.Reflect.Loader=e.Reflect.Loader||a,e.Reflect.global=e.Reflect.global||e,e.LoaderPolyfill=a,X||(X=new o,X.constructor=o),"object"==typeof exports&&(module.exports=X),e.System=X}("undefined"!=typeof self?self:global)}var t="undefined"==typeof Promise;if("undefined"!=typeof document){var r=document.getElementsByTagName("script");if($__curScript=r[r.length-1],t){var n=$__curScript.src,a=n.substr(0,n.lastIndexOf("/")+1);window.systemJSBootstrap=e,document.write('<script type="text/javascript" src="'+a+'system-polyfills.js"></script>')}else e()}else if("undefined"!=typeof importScripts){var a="";try{throw new Error("_")}catch(o){o.stack.replace(/(?:at|@).*(http.+):[\\d]+:[\\d]+/,function(e,t){$__curScript={src:t},a=t.replace(/\\/[^\\/]*$/,"/")})}t&&importScripts(a+"system-polyfills.js"),e()}else $__curScript="undefined"!=typeof __filename?{src:__filename}:null,e()}();\n//# sourceMappingURL=system.js.map
\\x4bdfd03886ebae2898ed4a410d2767207e820a129699f346d88b7e5fce3df988	\\x0000010003003030000001001800a81c0000360000002020000001001800a80c0000de1c0000101000000100080068050000862900002800000030000000600000000100180000000000001b0000000000000000000000000000000000005347065246055346055346065346075245075144085044095043094f41074f41064f41064f41064f41064f41064f41064f41064f41074f41074f41074e40064e40064d3e054c3d054c3e054d3f054d3f054d3f054c3e044c3e044c3e044c3e044b3d034c3e044d3f054d3f054d3f054d3f054d3f054d3f054e40054e40054e40054e40054e40054e40054e40054e4006564b07564a07554a0754480753470752460751460851450a51450a5144085043065043065144075144075143065043065043065042075042085042085042085042084f41074e40064e40064e40064e40064d3f054d3f054d3f054e40064f41074e40054d3f054d3f054d3f054e40054e40054e40054e40054f40064f41064f41064f41064f41064f41064f41064f4106584e07584e08584d09564b075449075349085348095248095248095448085246055246055448085448075347065246065245065245075245085244085245085245085144075143075043085042084f41074f41064f41065042075042085143085043064f42054e41044e41044f41044f41054f41044f4205504205504205504205504205504205504205504205504205595006595007594f08584e08564d08554d08554d08544d08544d08564c08554906554906574c08564b07554a065449065448055347065347065347075347075346075246065145065145065245075245085345085245085245085245075245075245065145055044045044035145045145045145045144055144065144065144065144065144065144065144065144065950065950075a51075a510859520958510857510857510856510858500a574d08574d08594f0a574d08574c07564c06554b065549065549065549065449065348065347055246045246055448075549085649095549095548085447075346065348055348045247035246035347045347045347045247055245065245075245075245075245075245075245075245075a53055b53085c520b5c530c5c530b5c530b5c530b5b530b5b530c5b520c5a500a594f09594f09584e08584e08584e07574d07564c07564c07564c07564c06554b05554b05554b04564b06574c08564b08564a07564a07554a075449055348055449055449055449055348045247035348045449055449065347065447075448075448075347075347075347075347085b54055c54085d540b5d540b5d540b5c53095b52095b52095b52095c530a5c520a5a5108595007594f07594f07595007584f07574d07574e07574e06574e05564d04564d04564d04564d05564c06574d07574d07574d07564c06554b05544a04554a05554b05554b05554b05534903544a04554b05554a05544905554a06564b07564a07554a06554a06554a065449065d55065d55075d56075d56075d55085b53065a52065a52065a52065c54075b54075a5205595104595104595104595104595105584f06584f06584f05584f05574e04574e04574e03564d03554c03574e04584f06574e05564d04564d03554c03564d03564d03564d03564d03564d04564d04564d04564c04554b05564b06564c07564c07564c06564c06564c06554b055e55075e56065d57045d56065d56065d56075d55085d55085d55085c55065b54045a53035952025a53035a53035a53035a5203595003585003585002574f01574f01584f02584f02585003584f03574f02564e02574f02574f02564e01564d00564e01574f02574f02574f02595104585004574f02564d02564d04564d05574e05574e05574e05574e05574e05564c055e55055d54045d55045e55055e55065e54075d54075e54095e54095c53045b52035b52025b52025b52025b52025950005a510461580f655d156e672c746d376c6426665d155f560c594f015a50015a50025950025a5002594f015a50055e550c5c5208584e015950025950025a5002594f02584f01594f025b51065a5006594e04584d03594e04594e04594e04594d055e55055d54055d53055e54065f55075e54065d53065e54075f54085c53055c52045c52045c52045a500160560c7e7741aba789cfcdbee2e0d4e9e8e3ecece9e7e6e0dcdacdc4c1af9e9973776f375e540b594e005a500171692daeaa8fcac7b8bcb9a6857e4e5b51065a4f01584e00594f015b51035c52045c52055b51045a5003594f02594f02594f02594f03594f045e55055d54045d54045e55055f56065e55055d54045e55055f55065e54055d53055d53055c5204766e33bdbaa3f0efedfefefffffffffffffffffffffffffffffffffffffffffffffdfdfdecebe7bdbaa57f78456a6120cecbbcffffffffffffffffffebeae6817a44584e00584e01594f015c52045d53055c53035c53035b52035b52025a51025b51025b51025b51035e55055e55035d55035e56045f56045e55035d55025e56035f57045e55065e54065d5305847d49e0ded6ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffedede9cbc8b8f8f8f6ffffffffffffffffffffffffada886584e005b51035b51035b51035b52035c54025c54025d54025c54025b53015b53005a52005b52015f54045e53035f54046156066055055e54035f54046056056157066058085d5505797339e0dfd7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb9b4995b51045c52045d52055d53055e54055e55055e55055e55055d54045b53025952015750005a52025e53035d52025f54046156066055056055056055056156066156065f5706625b10c0bda7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbab59b5c52065d53045d53055e54065e55065e55055e55055e55055d54045c53035b53035952025b53035d52025d52025f54046156066055056257076257076156066056065d5403807a43f0f0edfffffffffffffffffffffffffffffffdfdfdf0efede1dfd4dddbcbe4e2dcf1f1effdfdfdffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbab69b5e53055e54045e55055f56065f56065e55055e55055e55055e55045d54045e55045e56055d55055e53035e53035f54046156066055056257076358086156065f55045d5404a5a07dfffffffffffffffffffffffffffffff9f9f8b7b3977e763c6a601b655b0f6f652581793fa09a72d4d2c4f9f9f8ffffffffffffffffffffffffffffffffffffffffffffffffbab69a5f54046055035f56035f57046057046055036055035f56035e56035e56035f57046058055f57056055056055056055056055056055056156066156066055055e530360570bbdbaa6ffffffffffffffffffffffffffffffd4d2c2675d135d52005e54015f54015e53005d52005d52016960179c966de4e2dbffffffffffffffffffffffffffffffffffffffffffbab69a5d53026056026056025f57025f57026156046156046056046057046058056058056058056058046055056055056055056055056055055f54045f5404605505605505635a0ec9c7b6ffffffffffffffffffffffffffffffbebaa36056045f55015f55015f55015f55015f55015f55015e54005e54017b7334ceccbcfdfdfdffffffffffffffffffffffffffffffbab69a5d53026056026056026056026056026056026056026056026057036058035f58035f58035f58036055056055056055056055056055056055056055056055055f540461580cc5c3b2ffffffffffffffffffffffffffffffc6c3ae6157065f55005f55015f55015f55015f55015f55015f55015e54005d53006e6520d3d0c1ffffffffffffffffffffffffffffffbab69a5d53026056026056026056026056025f55015f55015f55016056026057025e57025e57025f58036055056055056055056055056055056156066156066055055e53035d5304afab8dffffffffffffffffffffffffffffffeeede88e88556157075c52015c52005d53005d53005d53005c52005e54026359096b621ac6c3aeffffffffffffffffffffffffffffffbab69a5d53026056025f56025e55025e54025d54015d54025e55025f55025e55035e56035e56035e56036055056055056055056055056055056055056055056055056055055e53018d8654f7f7f6ffffffffffffffffffffffffffffffefeee9c0bca79c966a918a578e87548f8955938d599b9564aea98cc8c6b3e0dfd4f9f8f7ffffffffffffffffffffffffffffffbab69a5d52036055035d54045c53035b52025952025b53035d55055e55055d54045d54045d54045d54035f54045f54046055056055056055056055056055056055056055055f54046b611ad8d6c8fffffffffffffffffffffffffffffffffffffffffffefefefaf9faf7f7f7f8f8f8fafafafefefeffffffffffffffffffffffffffffffffffffffffffffffffffffffbab59a5d52035f55035d54045c53035b52025952025b53035e55055e55055d54045d54045d54045d53035d52035f54046055056055056055056055056055056055056055056055055f5403918a5cf3f3f1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbab59a5c53035e55045d54045c53035b52025a52025c53035e55055e55055d54045d54045e54045e53035e52055f530560550660540660540660540660550661550661550661550660550564580ea9a484f5f5f4ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb9b59a5b52045e55045e55055d54045d54045d54045d54045d54045d54045e55055e54045e53035e53035e51065f530660540660540660540660540660540661550761550761550760540760540564580f9c9571e5e4ddfefefeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb9b59a5b52045e55055e55055e55055d55055e55055d54045c53035c53035f55055f54045d52025d52025c4f055e51055f52055e52045e52045f53055f53056054066155076054066054066054065f5305605407776d31b0aa8ddddbd2f6f6f5fefefefffffffffffffffffffffffffffffffffffffffffff9f9f8e9e8e3f0efeaffffffffffffffffffffffffffffffb9b59b5c53055f56065f56065e56065d56065e55055d54045c53035d53036055055f54045e53035d52025b4e025c50035d51035d51035d51035e52045e52045f53056054065f53055f53055f53055f53055f53055c50015e52056c611f89814c9e9870b9b59fc5c2aecbc8b5cac7b4c5c2aeb7b39c9f99708e8652756c30bbb79cffffffffffffffffffffffffffffffb7b3945c53046057075f57075e57075e57075e55055d54045c53035e53036055055f54045e53035d52025a4e035b50035c50035c50035c50035d50035d50035d50045d51045d50055d4f055d50055c50035f530970652772682a60550a5a4f005c51015f550761560961570962580963580a6156095e52035d51005c5101bfbba1ffffffffffffffffffffffffffffffb1ad895d54036057075f57075f58085f58085e55065e54055d53045d53045f53045e52035d51035d5102584c045a4e035b4e025b4e025b4e025b4e035b4e035b4e035b4e045c4f065d4f065c4f04635714a9a385e3e1dce6e4e0bfbba5877f4c655a145c50025a4e005b4f005d51015e53035f54045f53035c500070682adfded5fffffffffffffffffffffffffefeffa7a37d5e5504625909625909615a0a625a0b6157096157096056085f54065e52045d51035c50035d5103554804574a03594b03594b03594b03594b03594b03594b03594b035b4e055c4f045b4e059c9471f9f9f8fffffffffffffffffff4f4f2d4d1c4aaa588887f4d796f376d6227645814665b1972692d88814ccac7b7fdfdfdfffffffffffffffffffffffff6f6f48983505e5504625909635a0a635a0a625b0b63590b62580a62580a6055075e52045d51035d51035d5103524403554604574705574705574705574705574804574804574804584a03574901615413d2cfc4fffffffffffffffffffffffffffffffffffffffffff9f8f8ecebe9e2e0dbdad8cbdcd9cfe6e5e1f6f5f4ffffffffffffffffffffffffffffffffffffdedcd26e65205f55065f55076056076057086158086157096157096056085f54065e52045d51035d51035d5103514205524306534306534306534306544507554506544506544405554603554501615317d7d4ccfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcfcfca49d7c6054086055085e54065e54065e54065e55066056086056086056086055075f53055e52045d51035c5002514006514107524108524108524107534208534308524207524206544304544304564509aca58ffefefeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffccc9b86c601f6053066154086055075f55075f55075f55075f55075f55075f55075f54065f53055e52045d51035d5103503f05503f0751400851400751400751410751410650400550400352410353410352400261521cb5af9befeeecfefefffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdfdfdd1cec1746a2f5d50056053086053086054085f55075f55075e54065d53055d53055d53055d52045d51035d51035d51035e52044f3e05503f06503f07503f065040065040055040044f3f034f3f02513f02513f02514002503f0056470a776b3fb0aa95e0ded7f7f7f6fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffefefeebeae6b1ab946d61255d4f065e51085f52085f52075e51055c51045c52045c52045c51045c51045c51045b50035b4f015c50025d51045f52054c3d054e3e06503f06503f06503f06503f06503f06503f06504005504004504103504103504103504002503e00534207635420847a56a9a28cc9c6bbdedcd3ebeae6f1f0eff4f4f4f3f2f2eeedebe3e1d9cbc7bba39c7f7468375b4d0a594b045d4f075d50075d4f075d50065c4f055b4e035c50045e52065c50055c4f045b4f045b4e035b4e035c4f035d50045d51054c3e064e3e054f3d044e3d044e3d044e3d044e3d044e3d054f3e04504004504103504103504103504103504103514003513f014e3f00504205594b106151186b5d2f776b437e744d7b704870633863541c5a4b0d5343025444005748025849045a4c055b4d055b4d055b4d055b4d045a4d035b4e035b4e035a4d035a4d035b4e045a4d03594c025a4d025b4e025b4e034e3f074f3f06503f05503f06503f06503f06503f06503f06503f05504004504103504103504103504103504103504103514003504102504102514203524203524102514000504000504000514100524200524200544401544501544501554601564702574803594a03594b04584a02594c02584b01564900574901584a02594c03594c02574a00584b01594c02594c024f40085141085242095242095242095242095242085241085141084f41054f4204504204514204504103514204514204514103504103504103514203514203524304534203524102524102524202524201524200534301544401534300534300544400554601574803584904574901584a02564901544600544600564800584a02584b02564900574a00584b01574a0152430b51430a5143095143095143095143095143094f41074f410650430751440651440652440652430553440653440652440651420451420451420451420350410251410252410253420354430453420353420252420153430054440155450255450255450255450255460256470156480056480055470053440054460056480157490157490157490157490157490152430b52430a52440a52440a52440a51430951430950420850420851440852450752450752450753450754450753440652440651430552430552430552430551420351420351420353430455440554430453420354430254440254440255450255450355450355450255450255450155460155460154450153440054450055470156480156480156480056480056480052430b52440b53450b53450b53450b51430950420851430952440a52450852450752450753460854470955460853440652440652450752450753450753440652430452430452430454430556440755430554430455450456460455450354440255450355450355450355450254440154440054450054450055460155460154450055460155470155470055470055470052430b53440b53450b54460c54460c52440a52440a53450b53450b53450953460853460854470955470954460853450752440652450753450754460854450753440553440553440554440655440755440654440555450655450554440353440355440355450455450455450454440254440254440154450256460256450255450155450155460155460155460155460152440a52440a53450b54460c55470d54460c54450c54450c53450c52440852450753460854470953460853460853460853450753440654450755460855460854450754450754450754450654450654450654450653440553440553440553440555440555440555440555440556450656450656450656450557450457450456450355450355450355450255450255450251430951430951430952440a53450b52440a52430a52430a52430a5244085245075245075245075245075245075245075245075445075445075445075445075445075445075445075445065445065445065445065445065546075546075546075544055544055544055544055544055544055544055544055644045645045646045646045646045646045646035646035042084f41074f41075042085143095042085042085042085042075244075245075144065043055144065144065144065244065445075344065243055344065445075445075445075445075445065445065445065344055243055243055243055443055544055544055543055442045442045442045442045443045544055747065747065646045646045646045647054f41074e40064e40054e40064e40064fc0000000000000000000000000000000000005448065348065347075246075144095044095042074f41065042074f42064f41064f41074f41074f41074e40064d3e054d3f054d3f054d3f054c3e044d3f054c3e044c3e044d3f054d3f054d3f054d3f054e40054e40054e40054e40054e4006574d07574d08554a075348075248095248095346075145065347075346075245065144075144085144085144085042075042074f41074e40064f41065042085042074f41054e40044e41054e41054f41054f42054f42054f42054f42054f4206595006595007584f08564e08554e08554e08564c08554a07574c08564a075449065448065448065347075346075245055245065346085346085346085245075246065246045045035145045145045145055144065144065144065144065144065a52065b52095c520a5b530a5a530a5a520a5a510b594f09594f09584e08574d07564b07564b06564b06554a05544a04554a06564a08564a08554a075448065448055449055348045247035348045348055347075447075347075347075346075c54065d55095d550a5c53095b52085b52085c53095a5208595006595006595006584e07584e06574e05574e04574e04564d04574d06574e07564c05554b04554b04554b04554b04544a04554b04554a05554a06564b07554a06554a06554a065e55065d56055d56065d55065c54075c54075c54065a53045952035a5303595202574f01564d01564d01554d00564d00574e02574e03574f03574e03554c00544c00564e02574e03585004574e03564d03564d05574d06574d05574d05564c055e54055d54045e55065e54065e54075e54085c53045b52035b5202595001645c137c753c8e875697926b908a5b7f783f675e1a5a5003584e005d5308746c3078713860560e594f01594f02594f015a50045b5005594e03594e03594e04594e045e55055d54045e55055e55055d54055e55065d53055c520461580e958f62d5d3c4f3f3f0fdfcfcfefefffdfdfdf5f4f2dddbd0aba786726a2c9d976fedece8f2f2f0b5b1945e550a584e005b51035c53045c52035b52025a51025a51025a50025e54045e55035f56045e55045e55035f57055e5506635a10b1ad8ef8f8f7fffffffffffffffffffffffffffffffffffffffffffefefee6e5deeeede8ffffffffffffebeae37067255a50015c52045c53045d54035d55035b53025a52015a52015e53035f54046156066055056055056156065d5505989367f9f9f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0efea756c2f5b51025e54055e55065e55055e55055c53035a52025a52035d52025f5404615606615606625707605505675e15d4d2c3fffffffffffffffffff0f0ebc9c6b1b8b493c4c0aadfddd1f9f9f7fffffffffffffffffffffffffffffff0efea776e2e5d53015f56055f56055f55045e55045d55035e56045e56055f54046055056055056156066156065e5302777032eeede9fffffffffffffafaf89993656156075d52016056066b6118958e5edbd9ccfefefefffffffffffffffffff0efea776e2c5e54005f57026057036156036057045f57046058056058056055056055056055056055056055055e5302807940f4f4f2fffffffffffff1f0ed7971325d52005f55015f55015e54005d5200706721c2bfa6fdfdfdfffffffffffff0efea766e2c5e54006056026056026056026056026057035f58035f58036055056055056055056156066155055d5201766e2fedede7fffffffffffffbfafaa09a6e6257085d53005d53005d53005e540262580888814af4f3f0fffffffffffff0efea776e2c5e54005f55025e55025e55015f55025f56025e56035e5603605505605505605505605505605505605404665b10d0cdbafffffffffffffffffff4f4f0cbc8b3b3ae8baea985b2ad89bcb899d1cfbeeae9e1fefefefffffffffffff0efea766d2d5d53015c53035a52025b53035d55045d54045d54045d54045e53036055056055056055056055056055055e5302938c5bf6f6f4fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0efea766d2d5d53015c53035b52025c53035e55055d54045d54045e53045f520560540660540660540660550661550760550663580da9a380f5f4f2fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0efea756d2d5c53025d54045d54045d54045c53035e54045e54045e53035d50055f53055f53055f53056054066155076054065f530562560b8d8553cdcab7f0efebfcfcfcfffffffffffffffffffefefef7f7f5edece6fcfbfafffffffffffff0efea756d2e5d54035e56065e56065d54045c53035f54045f54035d52025b4f035d51035d51035d51045e52045f53055f52055e52055d51035d5103645911796f31928b5ba6a07aaba681a9a37d9a9469847c4287804aefeee9ffffffffffffefeee7746d2a5e55055e57075e56065d54045d53035f54045e53035d5202594d045b4f025b4e025b4e035b4e035c4f045c4f065b4e04706528b5b094bab59b867e4963580f5a4e01594d005a4e005b4f00594d008b8451f8f8f6ffffffffffffe8e7de7169246057066159096159096056085f55075e53045d51035d5103554703584a03594a03594a04594a03594a035a4c035e520cc0bba6fffffffffffff6f5f3d6d3c6b1ab8c9992698a81518c8454a5a07ae1e0d6ffffffffffffffffffcfcdba655c1161580862590962590a62580a6157095e53055d51035d5103524205544406544406554506554606554505554602635518dddbd2fffffffffffffffffffffffffffffffdfdfefbfafafbfbfbfefefffffffffffffffffffffbfbfb9c956c5e53055e54065e55065f56076056086055075f53055e52045c5002504006514008514007524208524207514205534203564609aea78ffbfbfbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffefeffc4c0aa685c176053076055075f55075f55075e54065e54065e52045d51035d51034f3e05503f075140075140065040044f4003514003513f015a4b11908763cdc9bcf1f0edfefefefffffffffffffffffffffffffffffffffffff0efecb6b0976b5f205e50065f52075e52065d53055d52055c52045c51045c50025d50035e52044d3d054f3e06503f06503f06503f054f3f055040035041035040024f3e0059480f736738968e6eb4ad96c6c1b2d0cdc2cdcabebfb9a5a29a7b776b395b4d0a5b4c055d4f075d4f065b4e045b4f035d50055b4f045b4e045b4e035c4f035d50044e3e064f3e054f3e054f3e054f3e054f3f055040045041035041035041035040024f3f004f3f0052420356460a594a0f58490c534404514100534300554601574802584a045a4c04594c03594c02584a01584b025a4d03584b02594c025a4c02504109514209524209524209514208504107504205504204514204514204514204504103514203514203524203524101524102534202534201534300544401544401554602574803574902574901544600554700584a02574901574a01574a0152430b52440a52440a51430950420850420751440752450652450753450753440651430552430552430451420351420354430454430453430354440254440255450255450355450255460155460154450054450056470156480156480056490052430b53450b53450b52440a51430952440a52450853460753460855460853440652440653450753440652430452430455440655440655440556450454440354440355450355450354440154440054450155460154450155460155470055470052440a53450b54460c54460c53450b53450c52450853460854460853460853450753450754460855460854450754450654450654450654450654450553440554440555440555440555450555450456450457450355450355450255450255450250420851430952440a52440a51430a5143095244085245075144065245075245075345075445075344065445075445075445065445065445065445065445065544065544055544055543055543055543045644045746055646045646045646044f41074e40064f41074fb0600564d0300f9f8f600585003005a4d03005a5003005b5200005c5003005b530300d8d5c5005e5303005e5406005f5603005f5406006056030097905d00514104005145070052450700554404005546010053450700544507005448070057490100564b0700b3ae8900c6c2a9005d500400a39a7b00fdfdfd005f560400dbd9c900635616004f410500f2f1ec005141050050420800534405005245080055460200c0bca1005646020054480800554c020057470500f8f7f500b2ae8a00b3ae8a005a520200b3af8d005a510800fcfcfb0080783c005e5305005f55020092886200a8a37c00f0f0ea004f3f0000503f00004f3e06004f4003004f410600514406005142090052440600534406005444060053470600aea9850055440600f6f6f300554a06008d855100584e0000594f0300584e09007e743a005b4f0300c5c1a8005c520300918a57005d5203005e530600615606007269230082774c0061570900736b290064580c004f41070051410700514407005246040065562100544b01005648010056460400554b0100d4d1bd005a4c04008f88520059500700fcfbfa005b5307005d5401005d520400dad7c6005f560700645a0a004e40050052430500544305005545020053450b00f6f5f2005546050056460500564c0500c3c0a7005a4e0200fafaf8005c5308005f5205005e5505005f55050060550500979062004e40060051410000bcb99c005040060051430600aca8850052460600d1cfb9005247090079713400d2d0bc0054490600c2bea2009f996b00564c0600574e030057500900a29b7100595009007e773d005d5103005d5300005c540300b5af91005e5403005f570300dbd8cb00ffffff00958f6000dedcce00766e2c006659120050430700544401008a824c00f4f4f1005445040052440a00aeaa830056470100e4e2d700e6e4dd00574e0400f9f9f7005a5001005b5104005c4d0a005d5404005e5404005d5507005f5404005e570400503f050051430800f4f3ef00786c39005445050052440b0053460800574c08005c5302005d5105005e5302005e5405005d5508005f54050060540500dcdaca00958b68004f400000aaa57f00503f06005041030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000211f91191a8da96347894777772a2a473b9b9955c45194051f334d66668f0101bac983710b986fb36b346834097f97088585135961cf808ba59c8e9253b60d54b986a1a7a6a4a4a47042a44eb5b89f39bb5da141a4cc17966c3ca438722727bc8787123aa49576165e93a4229e3f14a2cb87c76e360a749028bfa4370e10b8b884cacb629ab1b426507ca437c5b8b812570f24c6568852ab3d58a4af8575c85b7d350629a30a1131232b825ab960159d8c642c0725b23ca4a4aca0a83e5c739d45d0bd4618675fcd40c0b76d0c0c0c8149492d8d78d1ce43448aaa32b0026920c27bae2fc31d1d4b4cc1ad1b037a301c2d00be65484a4b1e044b2e4f791b7e6a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
\\x4bf7bab8b39aaa0beb884154b208584b3b5dc0fb8322b93ddb394ccf83ef1f10	var AQ = AQ || {};\nAQ.Template = {}\nAQ.Template.template = function( bundle_name, template_name, args ) {\n    var context = args || {};\n\tvar template_row;    \n    context.template = AQ.Template.template;\n    \n    // fetch the template\n    try {\n        var template_rows = plv8.execute('select * from endpoint.bundled_template($1, $2)', [ bundle_name, template_name ]);\n        template_row = template_rows[0];\n    }\n    catch( e ) {\n        plv8.elog( ERROR, e, e)\n        return false;\n    }\n\n    // render the template\n    var htmlTemplate = doT.template(template_row.content);\n    var html = htmlTemplate(context);\n\n    return html;\n}\n
\\x4c984061a14cc2aa9a736058cdae017f5330b2eeb019200bbc661d85b4213be4	/widget.bak.js
\\x56aa08d87438e9daec218e2623f7da0fe040a6d9c9d155d8cccbabb952769ebd	doT
\\x58e60517cfe0070bf99402ca0f2112ea969adf4f455ee98f3facca9885955ff9	/*******************************************************************************\n* Widget.js\n*\n* Created by Aquameta Labs, an open source company in Portland Oregon, USA.\n* Project: http://aquameta.com/\n******************************************************************************/\ndefine(['/doT.min.js', '/jQuery.min.js', '/datum.js'], function(doT, $, AQ, undefined) {\n\n    'use strict';\n\n    doT.templateSettings.strip = false;\n\n    var widget_promises = {};\n    var containers = {};\n    var namespaces = {};\n\n\n    AQ.Widget = {};\n\n\n    AQ.Widget.widget = function ( selector, input, extra ) {\n\n        if (!selector || typeof selector != 'string') {\n            throw "Widget - Selector argument is invalid or missing";\n        }\n\n        // Same namespace as calling widget, instead of global '' namespace\n        var default_namespace = (typeof this != 'undefined' && typeof this.namespace != 'undefined') ? this.namespace : '';\n\n        var is_semantic_dsl_lookup = selector.indexOf('/') != -1;\n\n        // For semantic lookup\n        // * selector is 'semantics/purpose/default_bundle'\n        // * input is AQ.* object\n        // * extra is {} to send to widget\n        if (is_semantic_dsl_lookup) {\n\n            if (!input) {\n                throw "Semantics requires an AQ.* to be passed in";\n            }\n\n            var context = extra || {};\n            var semantics = selector.split('/');\n            var args_object = {};\n\n            // If input is a promise (that will resolve as a Rowset or a Row), resolve it first\n            if (input instanceof Promise) {\n\n                var url_id;\n                var widget_getter = input.then(function(input) {\n\n                    context.datum = input;\n\n                    // These are the same for both Rowset and Row\n                    var endpoint = input.relation.schema.database;\n                    var fn = 'relation_widget';\n                    var type = 'meta.relation_id';\n                    args_object.relation_id = input.relation.id;\n\n                    if (input instanceof AQ.Rowset) {\n                        context.rows = input;\n                        url_id = input.relation.to_url(true);\n                    }\n                    else if (input instanceof AQ.Row) {\n                        context.row = input;\n                        url_id = input.to_url(true);\n                    }\n                    args_object.widget_purpose = semantics[1];\n                    args_object.default_bundle = semantics.length >= 3 ? semantics[2] : 'org.aquameta.core.semantics';\n                    \n                    return endpoint.schema('semantics').function({\n                        name: fn,\n                        parameters: [type,'text','text']\n                    }, args_object, { use_cache: true, meta_data: false });\n\n                });\n\n            }\n            // Else, check which type it is\n            else {\n\n                context.datum = input;\n\n                if (input instanceof AQ.Relation || input instanceof AQ.Table || input instanceof AQ.View) {\n                    var endpoint = input.schema.database;\n                    var fn = 'relation_widget';\n                    var type = 'meta.relation_id';\n                    args_object.relation_id = input.id;\n                    var url_id = input.to_url(true);\n                    context.relation = input;\n                }\n                else if (input instanceof AQ.Row) {\n                    var endpoint = input.relation.schema.database;\n                    var fn = 'relation_widget';\n                    var type = 'meta.relation_id';\n                    args_object.relation_id = input.relation.id;\n                    var url_id = input.to_url(true);\n                    context.row = input;\n                }\n                else if (input instanceof AQ.Rowset) {\n                    var endpoint = input.relation.schema.database;\n                    var fn = 'relation_widget';\n                    var type = 'meta.relation_id';\n                    args_object.relation_id = input.relation.id;\n                    var url_id = input.relation.to_url(true);\n                    context.rows = input;\n                }\n                else if (input instanceof AQ.Column) {\n                    var endpoint = input.relation.schema.database;\n                    var fn = 'column_widget';\n                    var type = 'meta.column_id';\n                    args_object.column_id = input.id;\n                    var url_id = input.relation.to_url(true);\n                    context.column = input;\n                }\n                else if (input instanceof AQ.Field) {\n                    var endpoint = input.row.relation.schema.database;\n                    var fn = 'column_widget';\n                    var type = 'meta.column_id';\n                    args_object.column_id = input.column.id;\n                    var url_id = input.to_url(true);\n                    context.field = input;\n                }\n                \n                args_object.widget_purpose = semantics[1];\n                args_object.default_bundle = semantics.length >= 3 ? semantics[2] : 'org.aquameta.core.semantics';\n                \n                var widget_getter = endpoint.schema('semantics').function({\n                    name: fn,\n                    parameters: [type,'text','text']\n                }, args_object, { use_cache: true, meta_data: false });\n            }\n\n            // Go get this widget - retrieve_promises don't change for calls to the same widget - they are cached by the widget name\n            var widget_retrieve_promise = retrieve(widget_getter, {\n                semantic_selector: selector,\n                url_id: url_id\n            });\n\n        }\n\n        // For regular widget lookup\n        // * selector is '[namespace:]widget_name'\n        // * input is {} to send to widget\n        // * extra is ignored\n        else {\n\n            //var context = typeof input != 'undefined' ? Object.assign({}, input) : {};\n            var context = input || {};\n\n            var name_parts = selector.split(':');\n\n            if (name_parts.length == 1) {\n                // Default namespace lookup\n                context.namespace = default_namespace;\n                context.name = name_parts[0];\n            }\n            else {\n                // Namespaced lookup\n                context.namespace = name_parts[0];\n                context.name = name_parts[1];\n                context.bundle_name = namespaces[context.namespace].bundle_name;\n            }\n\n            // Namespace not found\n            if (!(context.namespace in namespaces)) {\n                throw 'Widget namespace "'+context.namespace+'" has not been imported - Call AQ.Widget.import( bundle_name, namespace, endpoint ) to import bundled widgets to a namespace';\n            }\n    \n            var widget_getter = namespaces[context.namespace].endpoint.schema('widget').function('bundled_widget',\n                [ namespaces[context.namespace].bundle_name, context.name ], {\n                    use_cache: true,\n                    meta_data: false\n                });\n\n            // Go get this widget - retrieve_promises don't change for calls to the same widget - they are cached by the widget name\n            var widget_retrieve_promise = retrieve(widget_getter, {\n                namespace: context.namespace,\n                name: context.name\n            });\n\n        }\n\n        context.id = AQ.uuid();\n\n        // Setup default namespace for child widget\n        context.widget = AQ.Widget.widget.bind({ namespace: context.namespace });\n        context.widget.sync = AQ.Widget.widget.sync;\n\n        // Prepare and render the widget - each prepare_promise is unique because inputs are different - they are cached by the unique uuid created for the context\n        widget_promises[context.id] = prepare(widget_retrieve_promise, context);\n\n        // Return script that calls swap\n        return '<script id="widget-stub_' + context.id  + '" data-widget_id="' + context.id + '">' +\n                  'AQ.Widget.swap($("#widget-stub_' +  context.id  + '"), "' + context.id + '");'  + \n               '</script>';\n\n    }\n\n\n\n    /* Import a bundle name to a local namespace */\n    AQ.Widget.import = function( bundle_name, namespace, endpoint ) {\n\n        namespaces[namespace] = {\n            endpoint: endpoint,\n            bundle_name: bundle_name\n        };\n\n    };\n\n\n    /* Return an array bundle of imported bundle names */\n    AQ.Widget.bundles = function() {\n        return Object.keys(namespaces).map(function(key) {\n            return namespaces[key].bundle_name;\n        });\n    };\n\n\n\n    /* Find the bundle that was imported to this namespace */\n    AQ.Widget.bundle = function( namespace ) {\n        return namespaces[namespace].bundle_name;\n    };\n\n\n\n    /* Find the namespace that uses this bundle */\n    AQ.Widget.namespace = function( bundle_name ) {\n        return Object.keys(namespaces).find(function(namespace) {\n            return namespaces[namespace].bundle_name == bundle_name;\n        });\n    };\n\n\n\n    function retrieve( widget_getter, selector ) {\n\n        if ('semantic_selector' in selector) {\n            var semantic_lookup = true;\n        }\n\n        return widget_getter.then(function(row) {\n\n            // Get all related widget data\n            return Promise.all([\n                row,/* VIEWSIGNORE\n                row.related_rows('id', 'widget.input', 'widget_id', { use_cache: true, meta_data: true }).catch(function(){ return; }), \n                row.related_rows('id', 'widget.widget_view', 'widget_id', { use_cache: true, meta_data: true })\n                    .then(function(widget_views) {\n\n                        var db = row.schema.database;\n                        return widget_views.map(function(widget_view) {\n                            var view_id = widget_view.get('view_id');\n                            return db.schema(view_id.schema_id.name).view(view_id.name);\n                        });\n\n                    }).catch(function(err) { return; }), */\n                row.related_rows('id', 'widget.widget_dependency_js', 'widget_id', { use_cache: true, meta_data: true })\n                    .then(function(deps_js) {\n\n                        if (!deps_js.length) { return; }\n                        return deps_js.related_rows('dependency_js_id', 'widget.dependency_js', 'id', { use_cache: true, meta_data: true });\n\n                    }).then(function(deps) {\n\n                        return Promise.all(\n\n                            deps.map(function(dep) {\n                                return System.import(dep.field('content').to_url()).then(function(dep_module) {\n                                    //console.log('my module', dep_module);\n                                    \n                                    return {\n                                        url: dep.field('content').to_url(),\n                                        name: dep.get('variable') || 'non_amd_module',\n                                        /* TODO: This value thing is a hack. For some reason, jwerty doesn't load properly here */\n                                        value: typeof dep_module == 'object' ? dep_module[Object.keys(dep_module)[0]] : dep_module\n                                        //value: dep_module\n                                    };\n                                });\n                            })\n                        );\n\n                    }).catch(function() { return; })\n            ]);\n        }).catch(function(err) {\n            if (semantic_lookup) {\n                throw 'Widget not found from semantic lookup with ' + selector.semantic_selector + ' on ' + selector.url_id;\n            }\n            else {\n                throw 'Widget does not exist, ' + selector.namespace + ':' + selector.name;\n            }\n        });\n    };\n\n\n\n    function prepare( retrieve_promise, context ) {\n\n        return retrieve_promise.then(function( widget_data ) {\n\n            //console.log('retrieve_promise resolved', widget_data);\n\t\t\tvar [ widget_row,  /* inputs, VIEWSIGNORE views, */ deps_js ] = widget_data;\n\n            context.name = widget_row.get('name');\n\n            var xinput = context;\n            context = Object.assign({\n                    db: widget_row.schema.database,\n                    endpoint: widget_row.schema.database,\n                    input: {},\n                    xinput: xinput\n                }, context);\n\n            delete context.xinput.id;\n            delete context.xinput.name;\n            delete context.xinput.namespace;\n            delete context.xinput.widget;\n\n            // Process inputs\n            if (typeof inputs != 'undefined') {\n\n                inputs.forEach(function(input) {\n                    var input_name = input.get('name');\n\n                    if (typeof context[input_name] == 'undefined') {\n                        if (input.get('optional')) {\n                            var default_code = input.get('default_value');\n                            try {\n\n                                if (default_code) {\n                                    context[input_name] = eval('(' + default_code + ')');\n                                }\n                                else {\n                                    context[input_name] =  undefined;\n                                }\n\n                            }\n                            catch (e) {\n                                error(e, context.name, "Widget default eval failure: " + default_code);\n                                /*\n                                console.error("Widget default eval failure", default_code);\n                                throw e;\n                                */\n                            }\n\n                        }\n                        else {\n                            error('Missing required input ' + input_name, context.name, 'Inputs');\n                        }\n                    }\n                    context.input[input_name] = context[input_name];\n                    delete context.xinput[input_name];\n                });\n            }\n\n            // Load views into context\n            if (typeof views != 'undefined') {\n                views.forEach(function(view) {\n                    context[view.schema.name + '_' + view.name] = view;\n                });\n            }\n\n            var rendered_widget = render(widget_row, context);\n            var post_js_function = create_post_js_function(widget_row, context, deps_js);\n\n            // Return rendered widget and post_js function\n            return {\n                html: rendered_widget,\n                widget_id: context.id,\n                widget_name: context.name,\n                post_js: post_js_function\n            };\n\n        });\n    };\n\n\n\n    function render( widget_row, context ) {\n\n        // Create html template\n        var html_template = doT.template(widget_row.get('html') || '');\n\n        // Compile html template\n        try {\n            var html = html_template(context);\n        } catch(e) {\n            error(e, context.name, 'HTML');\n        }\n\n        // Render html\n        try {\n            var rendered = $(html).attr('data-widget', context.name)\n                .attr('data-widget_id', context.id)\n                .attr('data-bundle_alias', context.namespace)\n                .attr('data-bundle_name', context.bundle_name)\n                .attr('data-widget_row_id', widget_row.get('id'))\n                .data('help', widget_row.get('help'));\n        } catch(e) {\n            error(e, context.name, 'HTML (adding data-* attributes)');\n        }\n                                \n        // If CSS exists and has not yet been applied\n        if (widget_row.get('css') != null && $('style[data-widget="' + context.name + '"]').length == 0) {\n\n            // Create css template\n            var css_template = doT.template(widget_row.get('css') || '');\n\n            // Try to run css template\n            try {\n                var css = css_template(context);\n            } catch(e) {\n                error(e, context.name, 'CSS');\n            }\n\n            // Add css to dom\n            $('<style type="text/css" data-widget="' + context.name + '">' + css + '</style>').appendTo(document.head);\n        }\n\n        return rendered;\n    };\n\n\n\n    function create_post_js_function( widget_row, context, deps_js ) {\n\n        var context_keys = Object.keys(context).sort();\n\n        // Get context values\n        var context_vals = context_keys.map(function(key) {\n            return context[key];\n        });\n\n        // Dependency names and values\n        var dep_names = [],\n            dep_values = [];\n        if (deps_js != null) {\n            deps_js.forEach(function(dep_js) {\n                dep_names.push(dep_js.name);\n                dep_values.push(dep_js.value);\n            });\n        }\n\n        try {\n            /*\n            * Creating an script that looks like this\n            * function(dep1_name, dep2_name, ...) {\n            *   function(input1, input2) {\n            *       post_js\n            *   }.apply(this.this.context_vals);\n            * }.apply(this, this.dep_vals);\n            */\n            var post_js = Function(\n                '(function(' + dep_names.join(',') + ') { \\n' +\n                    '(function(' + context_keys.join(',') + ') { \\n' +\n                        'var w = $("#"+id);\\n\\n' +\n                        widget_row.get('post_js') +\n                        '\\n//# sourceURL=' + widget_row.get('id') + '/' + widget_row.get('name') + '/post_js\\n' +\n                    '}).apply(this, this.context_vals);' +\n                '}).apply(this, this.dep_values);'\n            ).bind({ context_vals: context_vals, dep_values: dep_values });\n        }\n        catch(e) {\n            error(e, widget_row.get('name'), 'Creating post_js function');\n        }\n\n        return post_js;\n\n    };\n\n\n    // detect svg widgets by tag name.  might be better to check the dom to see if we're inside an svg tag?\n    AQ.Widget.is_svg = function( e ) {\n        var svg_tags = ['circle','rect','polygon','g']; // TODO: add more, or change approach?\n        for (var i=0;i<svg_tags.length;i++) {\n            if (e.tagName.toUpperCase() == svg_tags[i].toUpperCase()) {\n                // console.log('svg  widget: ' + svg_tags[i]);\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n\n    AQ.Widget.swap = function( $element, id ) {\n        widget_promises[id].then(function(rendered_widget) {\n\n            // Replace stub\n            // special case for svg elements - http://stackoverflow.com/questions/3642035/jquerys-append-not-working-with-svg-element\n            if (AQ.Widget.is_svg(rendered_widget.html[0])) { // TODO: is there ever a case where there is more than one element in this array?\n                var div = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n                div.innerHTML= '<svg xmlns="http://www.w3.org/2000/svg">'+rendered_widget.html[0].outerHTML+'</svg>';\n\n                var frag= document.createDocumentFragment();\n                while (div.firstChild.firstChild)\n                    frag.appendChild(div.firstChild.firstChild);\n\n                $element.replaceWith(frag);\n            }\n            else $element.replaceWith(rendered_widget.html);\n\n            // Run post_js - or this may have to be done with a script tag appended to the widget\n            try {\n                rendered_widget.post_js();\n            }\n            catch(e) {\n                error(e, rendered_widget.widget_name, 'Running post_js function');\n            }\n\n            var w = $('#' + rendered_widget.widget_id);\n\n            // notify the world that a widget has loaded.  debugger uses this to detect widget tree changes\n            w.trigger('widget_loaded', { widget: w });\n\n            // Delete prepeared_promise\n            delete widget_promises[id];\n\n        }).catch(function(error) {\n            //console.error('Widget swap failed - ', error);\n            console.error(error);\n            // Remove stub\n            $element.remove();\n            // Delete promise\n            delete widget_promises[id];\n        });\n    };\n\n\n\n    function error( err, widget_name, step_name ) {\n        console.error("widget('" + widget_name + "', ...) " + step_name + " failed!");\n        //window.setTimeout(function() { throw err; }, 100);\n        throw err;\n    }\n\n\n\n    AQ.Widget.sync = function(rowset_promise, container, widget_maker, handlers) {\n\n        if(handlers === undefined) {\n            handlers = {};\n        }\n\n        if (widget_maker === undefined) {\n            throw 'widget.sync missing widget_maker argument';\n        }\n\n        if (container.length < 1) {\n            throw 'widget.sync failed: The specified container is empty or not found';\n            return;\n        }\n\n        if (container.length > 1) {\n            throw 'widget.sync failed: The specified container contains multiple elements';\n            return;\n        }\n\n        if (!container instanceof jQuery) {\n            throw 'widget.sync failed: The specified container is not a jQuery object';\n            return;\n        }\n\n        if (typeof rowset_promise == 'undefined' ||\n            (!(rowset_promise instanceof Promise) && !(rowset_promise instanceof AQ.Rowset) && !(rowset_promise instanceof AQ.FunctionResultSet))) {\n            throw 'widget.sync failed: rowset_promise must be a "thenable" promise or a resolved AQ.Rowset or a resolved AQ.FunctionResultSet';\n        }\n\n        if (!(rowset_promise instanceof Promise)) {\n            rowset_promise = Promise.resolve(rowset_promise);\n        }\n\n        rowset_promise.then(function(rowset) {\n\n            if (typeof rowset == 'undefined' || typeof rowset.forEach == 'undefined') {\n                throw 'Rowset is not defined. First argument to widget.sync must return a Rowset';\n            }\n\n            var container_id = AQ.uuid();\n\n            container.attr('data-container_id', container_id)\n            containers[container_id] = {\n                container: container,\n                widget_maker: widget_maker,\n                handlers: handlers\n            };\n\n            rowset.forEach(function(row) {\n                container.append(widget_maker(row));\n            });\n\n        }).catch(function(error) {\n            console.error('widget.sync failed: ', error);\n        });\n\n    }\n\n    // duplicate name for backwards compatibility\n    AQ.Widget.widget.sync = AQ.Widget.sync;\n\n    return AQ.Widget.widget;\n\n});\n
\\x5aed3b40c04ba9727c3eaa3284b8c73416ec9f642085a475372533324fb7eb82	plv8.elog(WARNING,'Loading datum-plv8.js......');\n\nvar AQ = AQ || {};\n\nAQ.uuid = function() {\n    var d = new Date().getTime();\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = (d + Math.random()*16)%16 | 0;\n        d = Math.floor(d/16);\n        return (c=='x' ? r : (r&0x7|0x8)).toString(16);\n    });\n}\n\n\nfunction query_options( options ) {\n\n    var keys = [];\n\n    if (typeof options != 'undefined') {\n\n        // Meta data defaults to true;\n        if (typeof options.meta_data == 'undefined') {\n            options.meta_data = true;\n        }\n\n        // Map the keys of the options object to an array of encoded url components\n        Object.keys(options).sort().map(function(key_name) {\n\n            var key = options[key_name];\n\n            switch(key_name) {\n\n                case 'where':\n                    // where: { name: 'column_name', op: '=', value: 'value' }\n                    // where: [{ name: 'column_name', op: '=', value: 'value' }]\n                    if (typeof key.length == 'undefined') key = [key];\n\n                    return key.map(function(where) {\n                        return 'where=' + encodeURIComponent(JSON.stringify(where));\n                    }).join('&');\n\n                case 'order_by':\n                    // So many possibilities...\n                    // order_by: '-?column_name'\n                    // order_by: ['-?column_name']\n                    // order_by: { 'column_name': 'asc|desc' }\n                    // order_by: [{ 'column_name': 'asc|desc' }]\n                    // order_by: { column: 'column_name', direction: 'asc|desc' }\n                    // order_by: [{ column: 'column_name', direction: 'asc|desc' }]\n                    if (typeof key.length == 'undefined') key = [key];\n\n                    return key_name + '=' + encodeURIComponent(key.map(function(o,i) {\n                        return ((typeof o.direction != 'undefined' && o.direction != 'asc') ? '-' : '') + o.column;\n                    }).join(','));\n\n                case 'limit':\n                    // limit: number\n                case 'offset':\n                    // offset: number\n                    var parsedNum = parseInt(key);\n                    if (!isNaN(parsedNum)) {\n                        return key_name + '=' + parsedNum;\n                    }\n                    return;\n                case 'meta_data':\n                case 'args':\n                case 'exclude':\n                case 'include':\n                    return key_name + '=' + encodeURIComponent(JSON.stringify(key));\n            }\n        }\n\n                                        // Remove all undefined elements of the array\n                                       ).forEach(function(e) {\n            if (typeof e != 'undefined') keys.push(e);\n        });\n    }\n\n    // Return the query string by joining the array with &'s\n    return keys.length ? '?' + keys.join('&') : '?';\n}\n\n\n\n/*--------------------------------- * Database * ---------------------------------*/\nfunction Endpoint( url ) {\n\n    this.url = url;\n    \n    var resource = function( method, meta_id, args, data ) {\n\n        args = args || {};\n\n        // URLs\n        var id_url = meta_id.to_url(true); // ID part of the URL only\n        var url_without_query = this.url + id_url;\n        var query_ops = query_options(args);\n        var url_with_query = url_without_query + query_ops;\n\n        // Settings object to send with 'fetch' method\n        var init_obj = {\n            method: method\n        };\n\n        // Don't add data on GET requests\n        if (method != 'GET') {\n            init_obj.body = JSON.stringify(data);\n        }\n\n        // var request = fetch(method == 'GET' ? url_with_query : url_without_query, init_obj);\n        var request = {\n            "then": function(f) {\n                plv8.elog(WARNING, 'THEN: this: '+JSON.stringify(this)+', f: '+JSON.stringify(f));\n                return f;\n            },\n            "catch": function(f) {\n                plv8.elog(WARNING, 'CATCH: this: '+JSON.stringify(this)+', f: '+JSON.stringify(f));\n                return f;\n            },\n            "bind": function(f) {\n                plv8.elog(WARNING, 'BIND: this: '+JSON.stringify(this)+', f: '+JSON.stringify(f));\n                return f;\n            }\n        }\n\n        var response = plv8.execute('select * from endpoint.request($1,$2,$3,$4,$5)', [\n            '0.2',\n            method,\n            url_without_query,\n            JSON.stringify(query_ops),\n            '{}'\n        ]);\n\n        plv8.elog(WARNING, 'FAT ASS RESPONSE: '+JSON.stringify(response));\n\n        // Read json stream\n        /*\n        var json = response.json();\n\n        if (response.status >= 200 && response.status < 300) {\n            return json;\n        }\n        */\n        \n        return request;\n    }\n\n/*\n\treturn {\n        url: this.url,\n        get: function( meta_id, args )        { return resource.call(this, 'GET', meta_id, args); }.bind(this),\n        post: function( meta_id, data )       { return resource.call(this, 'POST', meta_id, {}, data); }.bind(this),\n            patch: function( meta_id, data )      { return resource.call(this, 'PATCH', meta_id, {}, data); }.bind(this),\n                delete: function( meta_id, args )     { return resource.call(this, 'DELETE', meta_id, args); }.bind(this)\n};\n*/\n    \n    \n    \n    return {\n        "url": this.url,\n        "get": function( meta_id, args )        { return resource.call(this, 'GET', meta_id, args); },\n        "post": function( meta_id, data )       { return resource.call(this, 'POST', meta_id, {}, data); },\n        "patch": function( meta_id, data )      { return resource.call(this, 'PATCH', meta_id, {}, data); },\n        "delete": function( meta_id, args )     { return resource.call(this, 'DELETE', meta_id, args); }\n    };\n}\n\n\n/*--------------------------------- * Database * ---------------------------------*/\nAQ.Database = function( url, settings ) {\n    this.settings = settings;\n\n    // Not sure which name is better\n    this.endpoint = this.connection = new Endpoint(url);\n    this.query_string = query_options;\n};\nAQ.Database.prototype.constructor = AQ.Database;\nAQ.Database.prototype.schema = function( name ) { return new AQ.Schema(this, name); };\n\n/*--------------------------------- * Schema * ---------------------------------*/\nAQ.Schema = function( database, name ) {\n    this.database = database;\n    this.name = name;\n    this.id = { name: this.name };\n};\nAQ.Schema.prototype.constructor = AQ.Schema;\nAQ.Schema.prototype.relation = function( name )         { return new AQ.Relation(this, name); };\nAQ.Schema.prototype.table = function( name )            { return new AQ.Table(this, name); };\nAQ.Schema.prototype.view = function( name )             { return new AQ.View(this, name); };\nAQ.Schema.prototype.function = function( identifier, args, options )   {\n\n    // Function identifier (name and parameter list)\n    if (typeof identifier == 'object') {\n        var name = identifier.name;\n        var parameter_type_list = identifier.parameters;\n    }\n    // Selecting a function without specifying the parameters\n    else {\n        var name = identifier;\n    }\n\n    options = options || {};\n\n    // Arguments\n    options.args = {};\n\n    // `args = undefined` will pass no arguments into the server-side function\n    if (typeof args != 'undefined') {\n\n        // some_function?args={ kwargs: {} } -- Key/value object\n        if (!(args instanceof Array) && args instanceof Object) {\n            options.args.kwargs = args;\n        }\n        // some_function?args={ vals: [] } -- Array\n        else {\n            if (!(args instanceof Array)) {\n                // Regular value is placed into array\n                args = [ args ];\n            }\n            options.args.vals = args;\n        }\n    }\n\n    var fn = new AQ.Function(this, name, parameter_type_list);\n\n    return this.database.endpoint.get(fn, options)\n    .then(function(response) {\n\n        if (!response) {\n            throw 'Empty response';\n        }\n        else if (!response.result.length) {\n            throw 'Result set empty';\n        }\n        if(response.result.length > 1) {\n            return new AQ.FunctionResultSet(fn, response);\n        }\n        return new AQ.FunctionResult(fn, response);\n\n    }.bind(this)).catch(function(err) {\n        throw 'Function call request failed: ' + err;\n    });\n};\n\n/*--------------------------------- * Relation * ---------------------------------*/\nAQ.Relation = function( schema, name ) {\n    this.schema = schema;\n    this.name = name;\n    this.id = { schema_id: this.schema.id, name: this.name };\n};\nAQ.Relation.prototype.constructor = AQ.Relation;\nAQ.Relation.prototype.to_url = function( id_only ) {\n    return id_only ? '/relation/' + this.schema.name + '/' + this.name :\n    this.schema.database.endpoint.url + '/relation/' + this.schema.name + '/' + this.name;\n};\nAQ.Relation.prototype.column = function( name ) {\n    return new AQ.Column(this, name);\n};\nAQ.Relation.prototype.rows = function( options ) {\n\n    return this.schema.database.endpoint.get(this, options)\n    .then(function(rows) {\n\n        if (rows == null) {\n            throw 'Empty response';\n        }/*\n                else if (rows.result.length < 1) {\n                    throw 'No rows returned';\n                }*/\n        return new AQ.Rowset(this, rows, options);\n\n    }.bind(this)).catch(function(err) {\n        throw 'Rows request failed: ' + err;\n    });\n};\nAQ.Relation.prototype.row = function() {\n\n    // Multiple different ways to call 'row' function\n\n    // 1. Calling with Options object\n    if (typeof arguments[0] == 'object') {\n\n        var obj = arguments[0];\n        var args = arguments[1] || {};\n\n        // AQ.Relation.row({ where: { column_name: 'column_name', op: '=', value: 'value' } })\n        // Maybe it should be this one: AQ.Relation.row({ where: { column_name: value } })\n        if (typeof obj.where != 'undefined') {\n            args.where = obj.where;\n        }\n        // AQ.Relation.row({ column_name: 'column_name', op: '=', value: 'value' })\n        // Maybe it should be this one: AQ.Relation.row({ column_name: value })\n        else {\n            args.where = obj;\n        }\n\n    }\n    // 2. Calling with column_name and value\n    else if (typeof arguments[0] == 'string') {\n\n        // AQ.Relation.row(column_name, value [, options_obj])\n        var name = arguments[0];\n        var value = arguments[1];\n        var args = arguments[2] || {};\n\n        args.where = { name: name, op: '=', value: value };\n\n    }\n    // 3. Calling AQ.Relation.row() without arguments\n    else {\n        var args = {};\n    }\n\n    return this.schema.database.endpoint.get(this, args)\n    .then(function(row) {\n\n        if (row == null) {\n            throw 'Empty response';\n        }\n        else if (row.result.length == 0) {\n            throw 'No row returned';\n        }\n        else if (row.result.length > 1) {\n            throw 'Multiple rows returned';\n        }\n        return new AQ.Row(this, row);\n\n    }.bind(this)).catch(function(err) {\n        throw 'Row request failed: ' + err;\n    });\n};\n\n/*--------------------------------- * Table * ---------------------------------*/\nAQ.Table = function( schema, name ) {\n    this.schema = schema;\n    this.name = name;\n    this.id = { schema_id: this.schema.id, name: this.name };\n};\nAQ.Table.prototype = Object.create(AQ.Relation.prototype);\nAQ.Table.prototype.constructor = AQ.Table;\nAQ.Table.prototype.insert = function( data ) {\n\n    if (typeof data == 'undefined') {\n        // table.insert({}) is equivalent to table.insert()\n        // both will insert default values\n        data = {};\n    }\n\n    // Return inserted row promise\n    return this.schema.database.endpoint.patch(this, data)\n    .then(function(inserted_row) {\n\n        if (inserted_row == null) {\n            throw 'Empty response';\n        }\n        if (typeof data.length != 'undefined' && data.length > 1) {\n            return new AQ.Rowset(this, inserted_row, null);\n        }\n        return new AQ.Row(this, inserted_row);\n\n    }.bind(this)).catch(function(err) {\n        throw 'Insert failed: ' + err;\n    });\n\n};\n\n/*--------------------------------- * View * ---------------------------------*/\nAQ.View = function( schema, name ) {\n    this.schema = schema;\n    this.name = name;\n    this.id = { schema_id: this.schema.id, name: this.name };\n};\nAQ.View.prototype = Object.create(AQ.Relation.prototype);\nAQ.View.prototype.constructor = AQ.View;\n\n/*--------------------------------- * Rowset * ---------------------------------*/\nAQ.Rowset = function( relation, response, server_arguments ) {\n    this.relation = relation;\n    this.schema = relation.schema;\n    this.columns = response.columns || null;\n    this.pk_column_name = response.pk || null;\n    this.rows = response.result;\n    this.length = response.result.length;\n    this.server_arguments = server_arguments || {};\n};\nAQ.Rowset.prototype.constructor = AQ.Rowset;\nAQ.Rowset.prototype.map = function(fn) {\n    return this.rows.map(function(row) {\n        return new AQ.Row(this.relation, { columns: this.columns, pk: this.pk_column_name, result: [ row ] });\n    }.bind(this)).map(fn);\n};\nAQ.Rowset.prototype.forEach = function(fn) {\n    return this.rows.map(function(row) {\n        return new AQ.Row(this.relation, { columns: this.columns, pk: this.pk_column_name, result: [ row ] });\n    }.bind(this)).forEach(fn);\n};\nAQ.Rowset.prototype.reload = function() {\n    return this.relation.rows(this.server_arguments);\n};\n\n/**\n     * Call AQ.Rowset.where with (where_obj) or use shorthand notation (field, value) - filter results programmatically\n     *\n     * @param {Object} where_obj\n     * @param {[Boolean]} return_first\n     * @param {[Boolean]} async\n     *\n     * OR\n     *\n     * @param {String} field\n     * @param {Any} value\n     * @param {[Boolean]} return_first\n     * @param {[Boolean]} async\n     *\n     * @returns {Promise}\n     */\nAQ.Rowset.prototype.where = function() {\n\n    var first = false, async = true, where_obj = {};\n    if (typeof arguments[0] == 'object') {\n        // AQ.Rowset.where(where_obj [, return_first] [, async]);\n        where_obj = arguments[0];\n        var field = where_obj.field;\n        var value = where_obj.value;\n        if (arguments.length > 1) first = arguments[1];\n        if (arguments.length > 2) async = arguments[2];\n\n    }\n    else if (typeof arguments[0] == 'string' && arguments.length > 1) {\n        // AQ.Rowset.where(field, value [, return_first] [, async]);\n        var field = arguments[0];\n        var value = arguments[1];\n        if (arguments.length > 2) first = arguments[2];\n        if (arguments.length > 3) async = arguments[3];\n    }\n\n    return new Promise(function(resolve, reject) {\n\n        // TODO lots of logic here\n        // The new rowset that is returned must be in the same format as the response from the server\n\n        if (first) {\n            for (var i = 0; i < this.rows.length; i++) {\n                if (this.rows[i].row[field] == value) {\n                    resolve(new AQ.Row(this.relation, { columns: this.columns, result: [ this.rows[i] ] }));\n                }\n            }\n            reject('could not find ' + field + ' ' + value);\n        }\n        else {\n            var return_rowset = [];\n            for (var i = 0; i < this.rows.length; i++) {\n                if (this.rows[i].row[field] == value) {\n                    return_rowset.push(this.rows[i]);\n                }\n            }\n            resolve(new AQ.Rowset(this.relation, { columns: this.columns, result: return_rowset }));\n        }\n\n\n        // 2\n\n        // maybe we don't need to search the entire row and instead we return the first item found\n        /*\n            var new_rowset = _.filter(this.rows, function(el) {\n                //return AQ.equals.call(this, el[field], val);\n            });\n*/\n        if (new_rowset.length == 1) {\n            return new AQ.Row(this.relation, new_rowset);\n        }\n        else if (new_rowset.length > 1) {\n            throw 'Multiple Rows Returned';\n        }\n\n        // if row does not exist\n        return null;\n\n    }.bind(this));\n\n};\nAQ.Rowset.prototype.order_by = function( column, direction ) {\n    /*\n        var ordered = _.sortBy(this.rows, function(el) {\n            return el.row[column];\n        });\n*/\n    if (direction !== 'asc') {\n        ordered.reverse();\n    }\n    return new AQ.Rowset(this.relation, { columns: this.columns, result: ordered });\n};\nAQ.Rowset.prototype.limit = function( lim ) {\n    if (lim <= 0) {\n        throw 'Bad limit';\n    }\n    return new AQ.Rowset(this.relation, { columns: this.columns, result: this.rows.slice(0, lim) });\n};\nAQ.Rowset.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n        console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n        // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    var values = this.map(function(row) {\n        return row.get(self_column_name);\n    });\n\n    options = options || {};\n    options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n    options.where.push({\n        name: related_column_name,\n        op: 'in',\n        value: values\n    });\n\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n};\nAQ.Rowset.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n        console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n        // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    var values = this.map(function(row) {\n        return row.get(self_column_name);\n    });\n\n    options = options || {};\n    options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n    options.where.push({\n        name: related_column_name,\n        op: 'in',\n        value: values\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n\n};\n\n/*--------------------------------- * Row * ---------------------------------*/\nAQ.Row = function( relation, response ) {\n    this.relation = relation;\n    this.schema = relation.schema;\n    this.row_data = response.result[0].row;\n\n    this.cached_fields = {};\n    this.columns = response.columns || null;\n    this.pk_column_name = null;\n    this.pk_value = null;\n    this.id = null;\n    this.to_url = function() {\n        console.error('You must call a row with "meta_data: true" in order to use the to_url function');\n        throw 'Datum.js: Programming Error';\n    };\n\n    if (typeof response.pk != 'undefined') {\n        this.pk_column_name = response.pk;\n        this.pk_value = this.get(this.pk_column_name);\n        // this.id = {"pk_column_id":{"relation_id":{"schema_id":{"name":this.schema.name},"name":this.relation.name},"name":this.pk_column_name},"pk_value": this.pk_value}\n        this.id = {\n            pk_column_id: {\n                relation_id: this.relation.id,\n                name: this.pk_column_name\n            },\n            pk_value: this.pk_value\n        };\n\n        this.to_url = function( id_only ) {\n            return id_only ? '/row/' + this.relation.schema.name + '/' + this.relation.name + '/' + /*JSON.stringify(this.pk_value)*/ this.pk_value :\n            this.relation.schema.database.endpoint.url + '/row/' + this.relation.schema.name + '/' + this.relation.name + '/' + /*JSON.stringify(this.pk_value)*/ this.pk_value;\n        };\n\n    }\n};\nAQ.Row.prototype = {\n    constructor: AQ.Row,\n    get: function( name )           { return this.row_data[name]; },\n    set: function( name, value )    { this.row_data[name] = value; return this; },\n    to_string: function()           { return JSON.stringify(this.row_data); },\n    clone: function()               { return new AQ.Row(this.relation, { columns: this.columns, pk: this.pk_column_name, result: [{ row: this.row_data }]}); },\n    field: function( name ) {\n        if (typeof this.cached_fields[name] == 'undefined') {\n            this.cached_fields[name] = new AQ.Field(this, name, name === this.pk_column_name);\n        }\n        return this.cached_fields[name];\n    },\n    fields: function() {\n        if (this.columns != null) {\n            return this.columns.map(function(c) {\n                return this.field(c.name);\n            }.bind(this));\n        }\n        return null;\n    }\n};\nAQ.Row.prototype.update = function() {\n    return this.relation.schema.database.endpoint.patch(this, this.row_data)\n    .then(function(response) {\n\n        if(response == null) {\n            throw 'Empty response';\n        }\n        return this;\n\n    }.bind(this)).catch(function(err) {\n        throw 'Update failed: ' + err;\n    });\n};\nAQ.Row.prototype.delete = function() { \n    return this.relation.schema.database.endpoint.delete(this)\n    .then(function(response) {\n\n        if(response == null) {\n            throw 'Empty response';\n        }\n\n    }).catch(function(err) {\n        throw 'Delete failed: ' + err;\n    });\n};\nAQ.Row.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options )  {\n\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n        console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n        // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    options = options || {};\n    options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n    options.where.push({\n        name: related_column_name,\n        op: '=',\n        value: this.get(self_column_name)\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n};\nAQ.Row.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n        console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n        // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    options = options || {};\n    options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n    options.where.push({\n        name: related_column_name,\n        op: '=',\n        value: this.get(self_column_name)\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n};\n\n/*--------------------------------- * Column * ---------------------------------*/\nAQ.Column = function( relation, name ) {\n    this.relation = relation;\n    this.name = name;\n    this.id = { relation_id: relation.id, name: name };\n};\nAQ.Column.prototype.constructor = AQ.Column;\n\n/*--------------------------------- * Field * ---------------------------------*/\nAQ.Field = function( row, name, pk ) {\n    this.row = row;\n    this.column = new AQ.Column(row.relation, name);\n    this.is_primary_key = pk;\n    this.name = name;\n    this.value = row.get(name);\n    this.id = { row_id: this.row.id, column_id: this.column.id };\n    this.to_url = function( id_only ) {\n        if (this.row.pk_value == null) {\n            console.error('You must call a row with "meta_data: true" in order to use the to_url function');\n            throw 'Datum.js: Programming Error';\n        }\n        return id_only ? '/field/' + this.row.relation.schema.name + '/' + this.row.relation.name + '/' + /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value + '/' + this.column.name :\n        this.row.relation.schema.database.endpoint.url + '/field/' + this.row.relation.schema.name + '/' + this.row.relation.name + '/' + /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value + '/' + this.column.name;\n    };\n};\nAQ.Field.prototype = {\n    constructor: AQ.Field,\n    get: function()          { return this.row.get(this.name); },\n    set: function(value)     { this.value = value; return this.row.set(this.name, value); },\n    update: function()       { return this.row.update(); } // TODO: This is wrong\n};\n\n/*--------------------------------- * Function * ---------------------------------*/\nAQ.Function = function( schema, name, args ) {\n    this.schema = schema;\n    this.name = name;\n\n    if(args instanceof Array) {\n        this.args = '{' + args.join(',') + '}';\n    }\n    else {\n        this.args = args;\n    }\n\n    this.id = { schema_id: this.schema.id, name: this.name, args: this.args };\n    this.to_url = function( id_only ) {\n        var base_url = id_only ? '' : this.schema.database.endpoint.url;\n        if (typeof this.args != 'undefined') {\n            return base_url + '/function/' + this.schema.name + '/' + this.name + '/' + this.args;\n        }\n        return base_url + '/function/' + this.schema.name + '/' + this.name;\n    };\n};\nAQ.Function.prototype.constructor = AQ.Function;\n\n/*--------------------------------- * Function Result * ---------------------------------*/\nAQ.FunctionResult = function( fn, response ) {\n    this.function = fn;\n    this.schema = fn.schema;\n    this.row_data = response.result[0].row;\n    this.rows = response.result;\n    this.columns = response.columns;\n};\nAQ.FunctionResult.prototype = {\n    constructor: AQ.FunctionResult,\n    get: function( name )           { return this.row_data[name]; },\n    to_string: function()           { return JSON.stringify(this.row_data); }\n};\nAQ.FunctionResult.prototype.map = function(fn) {\n    return this.rows.map(function(row) {\n        return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n    }.bind(this)).map(fn);\n};\nAQ.FunctionResult.prototype.forEach = function(fn) {\n    return this.rows.map(function(row) {\n        return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n    }.bind(this)).forEach(fn);\n};\nAQ.FunctionResult.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options )  {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n        console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n        // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    options = options || {};\n    options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n    options.where.push({\n        name: related_column_name,\n        op: '=',\n        value: this.get(self_column_name)\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n};\nAQ.FunctionResult.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n        console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n        // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    options = options || {};\n    options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n    options.where.push({\n        name: related_column_name,\n        op: '=',\n        value: this.get(self_column_name)\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n};\n\n/*--------------------------------- * Function Result Set * ---------------------------------*/\nAQ.FunctionResultSet = function( fn, response ) {\n    this.function = fn;\n    this.schema = fn.schema;\n    this.columns = response.columns;\n    this.rows = response.result;\n};\nAQ.FunctionResultSet.prototype.constructor = AQ.FunctionResultSet;\nAQ.FunctionResultSet.prototype.map = function(fn) {\n    return this.rows.map(function(row) {\n        return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n    }.bind(this)).map(fn);\n};\nAQ.FunctionResultSet.prototype.forEach = function(fn) {\n    return this.rows.map(function(row) {\n        return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n    }.bind(this)).forEach(fn);\n};\nAQ.FunctionResultSet.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n        console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n        // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    var values = this.map(function(row) {\n        return row.get(self_column_name);\n    });\n\n    options = options || {};\n    options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n    options.where.push({\n        name: related_column_name,\n        op: 'in',\n        value: values\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n};\nAQ.FunctionResultSet.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n        console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n        // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    var values = this.map(function(row) {\n        return row.get(self_column_name);\n    });\n\n    options = options || {};\n    options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n    options.where.push({\n        name: related_column_name,\n        op: 'in',\n        value: values\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n\n};\n\n\n\nvar endpoint = new AQ.Database();\n
\\x5feceb66ffc86f38d952786c6d696c79c2dbc239dd4e91b46729d73a27fb57e9	0
\\x6155800c12f7d35e9fe99b7fc4cec3cc7932f83bf9bf8eed2e70eadded226742	c571e872-be3a-4510-8fdd-a20cacc4c1bc
\\x63bf33fe51bbd62f4b38ff3dea918cae934af53ccb727450b5ce17be57e3679e	/widget.js
\\x6580e4267254a9b7bcf2499349de4368c5b277fd540313613adc0c01e4862778	ce9d7eac-b62f-4c6c-ac48-b09f4c5d263c
\\x705acf730d45520e6613053ece50632145d592927e186fead25b6ff0ad8013bc	/jQuery.min.js
\\x79b89ec15cf2d7113073ed5483c18e770569f3464958771e5e7b7f61d9d4c431	/*******************************************************************************\n* Widget.js\n*\n* Created by Aquameta Labs, an open source company in Portland Oregon, USA.\n* Project: http://aquameta.com/\n******************************************************************************/\ndefine(['/doT.js', '/jQuery.min.js', '/datum.js'], function(doT, $, AQ, undefined) {\n\n    'use strict';\n\n    doT.templateSettings.strip = false;\n\n    var widget_promises = {};\n    var containers = {};\n    var namespaces = {};\n\n\n    AQ.Widget = {};\n\n\n    AQ.Widget.widget = function ( selector, input, extra ) {\n\n        if (!selector || typeof selector != 'string') {\n            throw "Widget - Selector argument is invalid or missing";\n        }\n\n        // Same namespace as calling widget, instead of global '' namespace\n        var default_namespace = (typeof this != 'undefined' && typeof this.namespace != 'undefined') ? this.namespace : '';\n\n        var is_semantic_dsl_lookup = selector.indexOf('/') != -1;\n\n        // For semantic lookup\n        // * selector is 'semantics/purpose/default_bundle'\n        // * input is AQ.* object\n        // * extra is {} to send to widget\n        if (is_semantic_dsl_lookup) {\n\n            if (!input) {\n                throw "Semantics requires an AQ.* to be passed in";\n            }\n\n            var context = extra || {};\n            var semantics = selector.split('/');\n            var args_object = {};\n\n            // If input is a promise (that will resolve as a Rowset or a Row), resolve it first\n            if (input instanceof Promise) {\n\n                var url_id;\n                var widget_getter = input.then(function(input) {\n\n                    context.datum = input;\n\n                    // These are the same for both Rowset and Row\n                    var endpoint = input.relation.schema.database;\n                    var fn = 'relation_widget';\n                    var type = 'meta.relation_id';\n                    args_object.relation_id = input.relation.id;\n\n                    if (input instanceof AQ.Rowset) {\n                        context.rows = input;\n                        url_id = input.relation.to_url(true);\n                    }\n                    else if (input instanceof AQ.Row) {\n                        context.row = input;\n                        url_id = input.to_url(true);\n                    }\n                    args_object.widget_purpose = semantics[1];\n                    args_object.default_bundle = semantics.length >= 3 ? semantics[2] : 'org.aquameta.core.semantics';\n                    \n                    return endpoint.schema('semantics').function({\n                        name: fn,\n                        parameters: [type,'text','text']\n                    }, args_object, { use_cache: true, meta_data: false });\n\n                });\n\n            }\n            // Else, check which type it is\n            else {\n\n                context.datum = input;\n\n                if (input instanceof AQ.Relation || input instanceof AQ.Table || input instanceof AQ.View) {\n                    var endpoint = input.schema.database;\n                    var fn = 'relation_widget';\n                    var type = 'meta.relation_id';\n                    args_object.relation_id = input.id;\n                    var url_id = input.to_url(true);\n                    context.relation = input;\n                }\n                else if (input instanceof AQ.Row) {\n                    var endpoint = input.relation.schema.database;\n                    var fn = 'relation_widget';\n                    var type = 'meta.relation_id';\n                    args_object.relation_id = input.relation.id;\n                    var url_id = input.to_url(true);\n                    context.row = input;\n                }\n                else if (input instanceof AQ.Rowset) {\n                    var endpoint = input.relation.schema.database;\n                    var fn = 'relation_widget';\n                    var type = 'meta.relation_id';\n                    args_object.relation_id = input.relation.id;\n                    var url_id = input.relation.to_url(true);\n                    context.rows = input;\n                }\n                else if (input instanceof AQ.Column) {\n                    var endpoint = input.relation.schema.database;\n                    var fn = 'column_widget';\n                    var type = 'meta.column_id';\n                    args_object.column_id = input.id;\n                    var url_id = input.relation.to_url(true);\n                    context.column = input;\n                }\n                else if (input instanceof AQ.Field) {\n                    var endpoint = input.row.relation.schema.database;\n                    var fn = 'column_widget';\n                    var type = 'meta.column_id';\n                    args_object.column_id = input.column.id;\n                    var url_id = input.to_url(true);\n                    context.field = input;\n                }\n                \n                args_object.widget_purpose = semantics[1];\n                args_object.default_bundle = semantics.length >= 3 ? semantics[2] : 'org.aquameta.core.semantics';\n                \n                var widget_getter = endpoint.schema('semantics').function({\n                    name: fn,\n                    parameters: [type,'text','text']\n                }, args_object, { use_cache: true, meta_data: false });\n            }\n\n            // Go get this widget - retrieve_promises don't change for calls to the same widget - they are cached by the widget name\n            var widget_retrieve_promise = retrieve(widget_getter, {\n                semantic_selector: selector,\n                url_id: url_id\n            });\n\n        }\n\n        // For regular widget lookup\n        // * selector is '[namespace:]widget_name'\n        // * input is {} to send to widget\n        // * extra is ignored\n        else {\n\n            //var context = typeof input != 'undefined' ? Object.assign({}, input) : {};\n            var context = input || {};\n\n            var name_parts = selector.split(':');\n\n            if (name_parts.length == 1) {\n                // Default namespace lookup\n                context.namespace = default_namespace;\n                context.name = name_parts[0];\n            }\n            else {\n                // Namespaced lookup\n                context.namespace = name_parts[0];\n                context.name = name_parts[1];\n                context.bundle_name = namespaces[context.namespace].bundle_name;\n            }\n\n            // Namespace not found\n            if (!(context.namespace in namespaces)) {\n                throw 'Widget namespace "'+context.namespace+'" has not been imported - Call AQ.Widget.import( bundle_name, namespace, endpoint ) to import bundled widgets to a namespace';\n            }\n    \n            var widget_getter = namespaces[context.namespace].endpoint.schema('widget').function('bundled_widget',\n                [ namespaces[context.namespace].bundle_name, context.name ], {\n                    use_cache: true,\n                    meta_data: false\n                });\n\n            // Go get this widget - retrieve_promises don't change for calls to the same widget - they are cached by the widget name\n            var widget_retrieve_promise = retrieve(widget_getter, {\n                namespace: context.namespace,\n                name: context.name\n            });\n\n        }\n\n        context.id = AQ.uuid();\n\n        // Setup default namespace for child widget\n        context.widget = AQ.Widget.widget.bind({ namespace: context.namespace });\n        context.widget.sync = AQ.Widget.widget.sync;\n\n        // Prepare and render the widget - each prepare_promise is unique because inputs are different - they are cached by the unique uuid created for the context\n        widget_promises[context.id] = prepare(widget_retrieve_promise, context);\n\n        // Return script that calls swap\n        return '<script id="widget-stub_' + context.id  + '" data-widget_id="' + context.id + '">' +\n                  'AQ.Widget.swap($("#widget-stub_' +  context.id  + '"), "' + context.id + '");'  + \n               '</script>';\n\n    }\n\n\n\n    /* Import a bundle name to a local namespace */\n    AQ.Widget.import = function( bundle_name, namespace, endpoint ) {\n\n        namespaces[namespace] = {\n            endpoint: endpoint,\n            bundle_name: bundle_name\n        };\n\n    };\n\n\n    /* Return an array bundle of imported bundle names */\n    AQ.Widget.bundles = function() {\n        return Object.keys(namespaces).map(function(key) {\n            return namespaces[key].bundle_name;\n        });\n    };\n\n\n\n    /* Find the bundle that was imported to this namespace */\n    AQ.Widget.bundle = function( namespace ) {\n        return namespaces[namespace].bundle_name;\n    };\n\n\n\n    /* Find the namespace that uses this bundle */\n    AQ.Widget.namespace = function( bundle_name ) {\n        return Object.keys(namespaces).find(function(namespace) {\n            return namespaces[namespace].bundle_name == bundle_name;\n        });\n    };\n\n\n\n    function retrieve( widget_getter, selector ) {\n\n        if ('semantic_selector' in selector) {\n            var semantic_lookup = true;\n        }\n\n        return widget_getter.then(function(row) {\n\n            // Get all related widget data\n            return Promise.all([\n                row,/* VIEWSIGNORE\n                row.related_rows('id', 'widget.input', 'widget_id', { use_cache: true, meta_data: true }).catch(function(){ return; }), \n                row.related_rows('id', 'widget.widget_view', 'widget_id', { use_cache: true, meta_data: true })\n                    .then(function(widget_views) {\n\n                        var db = row.schema.database;\n                        return widget_views.map(function(widget_view) {\n                            var view_id = widget_view.get('view_id');\n                            return db.schema(view_id.schema_id.name).view(view_id.name);\n                        });\n\n                    }).catch(function(err) { return; }), */\n                row.related_rows('id', 'widget.widget_dependency_js', 'widget_id', { use_cache: true, meta_data: true })\n                    .then(function(deps_js) {\n\n                        if (!deps_js.length) { return; }\n                        return deps_js.related_rows('dependency_js_id', 'widget.dependency_js', 'id', { use_cache: true, meta_data: true });\n\n                    }).then(function(deps) {\n\n                        return Promise.all(\n\n                            deps.map(function(dep) {\n                                return System.import(dep.field('content').to_url()).then(function(dep_module) {\n                                    //console.log('my module', dep_module);\n                                    \n                                    return {\n                                        url: dep.field('content').to_url(),\n                                        name: dep.get('variable') || 'non_amd_module',\n                                        /* TODO: This value thing is a hack. For some reason, jwerty doesn't load properly here */\n                                        value: typeof dep_module == 'object' ? dep_module[Object.keys(dep_module)[0]] : dep_module\n                                        //value: dep_module\n                                    };\n                                });\n                            })\n                        );\n\n                    }).catch(function() { return; })\n            ]);\n        }).catch(function(err) {\n            if (semantic_lookup) {\n                throw 'Widget not found from semantic lookup with ' + selector.semantic_selector + ' on ' + selector.url_id;\n            }\n            else {\n                throw 'Widget does not exist, ' + selector.namespace + ':' + selector.name;\n            }\n        });\n    };\n\n\n\n    function prepare( retrieve_promise, context ) {\n\n        return retrieve_promise.then(function( widget_data ) {\n\n            //console.log('retrieve_promise resolved', widget_data);\n\t\t\tvar [ widget_row,  /* inputs, VIEWSIGNORE views, */ deps_js ] = widget_data;\n\n            context.name = widget_row.get('name');\n\n            var xinput = context;\n            context = Object.assign({\n                    db: widget_row.schema.database,\n                    endpoint: widget_row.schema.database,\n                    input: {},\n                    xinput: xinput\n                }, context);\n\n            delete context.xinput.id;\n            delete context.xinput.name;\n            delete context.xinput.namespace;\n            delete context.xinput.widget;\n\n            // Process inputs\n            if (typeof inputs != 'undefined') {\n\n                inputs.forEach(function(input) {\n                    var input_name = input.get('name');\n\n                    if (typeof context[input_name] == 'undefined') {\n                        if (input.get('optional')) {\n                            var default_code = input.get('default_value');\n                            try {\n\n                                if (default_code) {\n                                    context[input_name] = eval('(' + default_code + ')');\n                                }\n                                else {\n                                    context[input_name] =  undefined;\n                                }\n\n                            }\n                            catch (e) {\n                                error(e, context.name, "Widget default eval failure: " + default_code);\n                                /*\n                                console.error("Widget default eval failure", default_code);\n                                throw e;\n                                */\n                            }\n\n                        }\n                        else {\n                            error('Missing required input ' + input_name, context.name, 'Inputs');\n                        }\n                    }\n                    context.input[input_name] = context[input_name];\n                    delete context.xinput[input_name];\n                });\n            }\n\n            // Load views into context\n            if (typeof views != 'undefined') {\n                views.forEach(function(view) {\n                    context[view.schema.name + '_' + view.name] = view;\n                });\n            }\n\n            var rendered_widget = render(widget_row, context);\n            var post_js_function = create_post_js_function(widget_row, context, deps_js);\n\n            // Return rendered widget and post_js function\n            return {\n                html: rendered_widget,\n                widget_id: context.id,\n                widget_name: context.name,\n                post_js: post_js_function\n            };\n\n        });\n    };\n\n\n\n    function render( widget_row, context ) {\n\n        // Create html template\n        var html_template = doT.template(widget_row.get('html') || '');\n\n        // Compile html template\n        try {\n            var html = html_template(context);\n        } catch(e) {\n            error(e, context.name, 'HTML');\n        }\n\n        // Render html\n        try {\n            var rendered = $(html).attr('data-widget', context.name)\n                .attr('data-widget_id', context.id)\n                .attr('data-bundle_alias', context.namespace)\n                .attr('data-bundle_name', context.bundle_name)\n                .attr('data-widget_row_id', widget_row.get('id'))\n                .data('help', widget_row.get('help'));\n        } catch(e) {\n            error(e, context.name, 'HTML (adding data-* attributes)');\n        }\n                                \n        // If CSS exists and has not yet been applied\n        if (widget_row.get('css') != null && $('style[data-widget="' + context.name + '"]').length == 0) {\n\n            // Create css template\n            var css_template = doT.template(widget_row.get('css') || '');\n\n            // Try to run css template\n            try {\n                var css = css_template(context);\n            } catch(e) {\n                error(e, context.name, 'CSS');\n            }\n\n            // Add css to dom\n            $('<style type="text/css" data-widget="' + context.name + '">' + css + '</style>').appendTo(document.head);\n        }\n\n        return rendered;\n    };\n\n\n\n    function create_post_js_function( widget_row, context, deps_js ) {\n\n        var context_keys = Object.keys(context).sort();\n\n        // Get context values\n        var context_vals = context_keys.map(function(key) {\n            return context[key];\n        });\n\n        // Dependency names and values\n        var dep_names = [],\n            dep_values = [];\n        if (deps_js != null) {\n            deps_js.forEach(function(dep_js) {\n                dep_names.push(dep_js.name);\n                dep_values.push(dep_js.value);\n            });\n        }\n\n        try {\n            /*\n            * Creating an script that looks like this\n            * function(dep1_name, dep2_name, ...) {\n            *   function(input1, input2) {\n            *       post_js\n            *   }.apply(this.this.context_vals);\n            * }.apply(this, this.dep_vals);\n            */\n            var post_js = Function(\n                '(function(' + dep_names.join(',') + ') { \\n' +\n                    '(function(' + context_keys.join(',') + ') { \\n' +\n                        'var w = $("#"+id);\\n\\n' +\n                        widget_row.get('post_js') +\n                        '\\n//# sourceURL=' + widget_row.get('id') + '/' + widget_row.get('name') + '/post_js\\n' +\n                    '}).apply(this, this.context_vals);' +\n                '}).apply(this, this.dep_values);'\n            ).bind({ context_vals: context_vals, dep_values: dep_values });\n        }\n        catch(e) {\n            error(e, widget_row.get('name'), 'Creating post_js function');\n        }\n\n        return post_js;\n\n    };\n\n\n    // detect svg widgets by tag name.  might be better to check the dom to see if we're inside an svg tag?\n    AQ.Widget.is_svg = function( e ) {\n        var svg_tags = ['circle','rect','polygon','g']; // TODO: add more, or change approach?\n        for (var i=0;i<svg_tags.length;i++) {\n            if (e.tagName.toUpperCase() == svg_tags[i].toUpperCase()) {\n                // console.log('svg  widget: ' + svg_tags[i]);\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n\n    AQ.Widget.swap = function( $element, id ) {\n        widget_promises[id].then(function(rendered_widget) {\n\n            // Replace stub\n            // special case for svg elements - http://stackoverflow.com/questions/3642035/jquerys-append-not-working-with-svg-element\n            if (AQ.Widget.is_svg(rendered_widget.html[0])) { // TODO: is there ever a case where there is more than one element in this array?\n                var div = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n                div.innerHTML= '<svg xmlns="http://www.w3.org/2000/svg">'+rendered_widget.html[0].outerHTML+'</svg>';\n\n                var frag= document.createDocumentFragment();\n                while (div.firstChild.firstChild)\n                    frag.appendChild(div.firstChild.firstChild);\n\n                $element.replaceWith(frag);\n            }\n            else $element.replaceWith(rendered_widget.html);\n\n            // Run post_js - or this may have to be done with a script tag appended to the widget\n            try {\n                rendered_widget.post_js();\n            }\n            catch(e) {\n                error(e, rendered_widget.widget_name, 'Running post_js function');\n            }\n\n            var w = $('#' + rendered_widget.widget_id);\n\n            // notify the world that a widget has loaded.  debugger uses this to detect widget tree changes\n            w.trigger('widget_loaded', { widget: w });\n\n            // Delete prepeared_promise\n            delete widget_promises[id];\n\n        }).catch(function(error) {\n            //console.error('Widget swap failed - ', error);\n            console.error(error);\n            // Remove stub\n            $element.remove();\n            // Delete promise\n            delete widget_promises[id];\n        });\n    };\n\n\n\n    function error( err, widget_name, step_name ) {\n        console.error("widget('" + widget_name + "', ...) " + step_name + " failed!");\n        //window.setTimeout(function() { throw err; }, 100);\n        throw err;\n    }\n\n\n\n    AQ.Widget.sync = function(rowset_promise, container, widget_maker, handlers) {\n\n        if(handlers === undefined) {\n            handlers = {};\n        }\n\n        if (widget_maker === undefined) {\n            throw 'widget.sync missing widget_maker argument';\n        }\n\n        if (container.length < 1) {\n            throw 'widget.sync failed: The specified container is empty or not found';\n            return;\n        }\n\n        if (container.length > 1) {\n            throw 'widget.sync failed: The specified container contains multiple elements';\n            return;\n        }\n\n        if (!container instanceof jQuery) {\n            throw 'widget.sync failed: The specified container is not a jQuery object';\n            return;\n        }\n\n        if (typeof rowset_promise == 'undefined' ||\n            (!(rowset_promise instanceof Promise) && !(rowset_promise instanceof AQ.Rowset) && !(rowset_promise instanceof AQ.FunctionResultSet))) {\n            throw 'widget.sync failed: rowset_promise must be a "thenable" promise or a resolved AQ.Rowset or a resolved AQ.FunctionResultSet';\n        }\n\n        if (!(rowset_promise instanceof Promise)) {\n            rowset_promise = Promise.resolve(rowset_promise);\n        }\n\n        rowset_promise.then(function(rowset) {\n\n            if (typeof rowset == 'undefined' || typeof rowset.forEach == 'undefined') {\n                throw 'Rowset is not defined. First argument to widget.sync must return a Rowset';\n            }\n\n            var container_id = AQ.uuid();\n\n            container.attr('data-container_id', container_id)\n            containers[container_id] = {\n                container: container,\n                widget_maker: widget_maker,\n                handlers: handlers\n            };\n\n            rowset.forEach(function(row) {\n                container.append(widget_maker(row));\n            });\n\n        }).catch(function(error) {\n            console.error('widget.sync failed: ', error);\n        });\n\n    }\n\n    // duplicate name for backwards compatibility\n    AQ.Widget.widget.sync = AQ.Widget.sync;\n\n    return AQ.Widget.widget;\n\n});\n
\\x810928c4564c0ce4157875d290a2dbc9e5329824a54708a923319994ef299d8f	/*******************************************************************************\n * Datum.js\n ******************************************************************************/\n\n/* eslint-env browser */\n/* globals Set Map define */\ndefine(['/jQuery.min.js', '/socket.io-client-1.4.8.min.js'], function (\n  $,\n  io,\n  undefined // eslint-disable-line\n) {\n  'use strict';\n  var AQ = AQ || {};\n\n  // Note: Add `?events=false` to a url to stop all events\n  const query = new Set(location.search.slice(1).split('&'));\n\n  // TODO: how does session persistence work for events\n  const sessionId = getPersistedSessionId();\n  if (sessionId) {\n    // TODO: Can we use beacon or beforeunload to send detach event?\n    fetch(`/_socket/detach/${sessionId}`);\n  }\n  // TODO: Maybe sessionIds should be stored in localStorage as an array and when\n  // we try to detach them, we can get a payload back that says whether it was\n  // successful or not\n  sessionStorage.clear();\n\n  function flattenIfId(obj) {\n      if (obj && typeof obj === 'object') {\n          console.log(obj);\n          if (obj.relation_id) {\n              console.log('got row');\n          }\n          if (obj.schema_id) {\n              console.log('got relation');\n          }\n          if (obj.schema_id) {\n              console.log('got function?');\n          }\n          if (obj.pk_column_id) {\n              console.log('got field?');\n          }\n      }\n      return obj;\n  }\n\n  function buildQueryString(options) {\n    const keys = [];\n\n    if (typeof options != 'undefined') {\n      // Meta data defaults to true;\n      if (typeof options.meta_data == 'undefined') {\n        options.meta_data = true;\n      }\n\n      // Map the keys of the options object to an array of encoded url components\n      const params = Object.entries(options).sort(([a], [b]) =>\n        a.localeCompare(b)\n      );\n      for (let [key, value] of params) {\n        switch (key) {\n          case 'where':\n            // where: { name: 'column_name', op: '=', value: 'value' }\n            // where: [{ name: 'column_name', op: '=', value: 'value' }]\n            if (typeof value.length == 'undefined') value = [value];\n\n            keys.push(\n              value\n                .map(function (where) {\n                  return 'where=' + encodeURIComponent(JSON.stringify(where));\n                })\n                .join('&')\n            );\n            break;\n\n          case 'order_by':\n            // So many possibilities...\n            // order_by: '-?column_name'\n            // order_by: ['-?column_name']\n            // order_by: { 'column_name': 'asc|desc' }\n            // order_by: [{ 'column_name': 'asc|desc' }]\n            // order_by: { column: 'column_name', direction: 'asc|desc' }\n            // order_by: [{ column: 'column_name', direction: 'asc|desc' }]\n            if (typeof value.length == 'undefined') value = [value];\n\n            keys.push(\n              key +\n                '=' +\n                encodeURIComponent(\n                  value\n                    .map(function (o) {\n                      return (\n                        (typeof o.direction != 'undefined' &&\n                        o.direction != 'asc'\n                          ? '-'\n                          : '') + o.column\n                      );\n                    })\n                    .join(',')\n                )\n            );\n            break;\n\n          case 'limit':\n          // limit: number\n          /* eslint-disable-next-line no-fallthrough */\n          case 'offset':\n            // offset: number\n            var parsedNum = parseInt(value);\n            if (!isNaN(parsedNum)) {\n              keys.push(key + '=' + parsedNum);\n            }\n            break;\n\n          case 'session_id':\n            keys.push(\n              'session_id=' + encodeURIComponent(JSON.stringify(value))\n            );\n            break;\n\n          case 'meta_data':\n          case 'args':\n          case 'exclude':\n          case 'include':\n            keys.push(key + '=' + encodeURIComponent(JSON.stringify(value)));\n            break;\n          default:\n            console.log('query_options: could not find key', key, value);\n        }\n      }\n    }\n\n    // Return the query string by joining the array with &'s\n    return keys.length ? '?' + keys.join('&') : '?';\n  }\n\n  function getPersistedSessionId() {\n    return sessionStorage.getItem('sessionId') || null;\n  }\n\n  function persistSessionId(sessionId) {\n    if (sessionId) {\n      sessionStorage.setItem('sessionId', sessionId);\n    }\n  }\n\n  class Socket {\n    constructor(handleEvent) {\n      this.handleEvent = handleEvent;\n      this.isAttached = false;\n      this.sessionId = null;\n      this.intendedSessionId = null;\n      this._socket = io('/');\n      this._socket.on('event', this.onMessage.bind(this));\n      this._socket.on('connect', () => {\n        if (!this.isAttached) {\n          if (this.sessionId) {\n            this.attach(this.sessionId);\n          } else if (this.intendedSessionId) {\n            this.attach(this.intendedSessionId);\n          }\n          // else { connectSession has not been called yet }\n        }\n      });\n      this._socket.on('disconnect', () => {\n        this.isAttached = false;\n        // socket.io will handle reconnecting\n      });\n      this.cache = {};\n    }\n    onMessage(event) {\n      let response;\n      try {\n        response = JSON.parse(event);\n      } catch (e) {\n        console.error('socket: error while parsing event', e);\n        return;\n      }\n\n      switch (response.type) {\n        case 'attached':\n          this.isAttached = true;\n          this.sessionId = response.sessionId;\n          this.intendedSessionId = null;\n          console.log('socket attached', response.sessionId);\n          break;\n\n        case 'event':\n          this.handleEvent(response.data);\n          break;\n      }\n    }\n    attach(sessionId) {\n      if (!this.sessionId) {\n        this.intendedSessionId = sessionId;\n      }\n      if (this._socket.connected) {\n        if (!sessionId) {\n          console.error('socket error: invalid session id', sessionId);\n        }\n        this._socket.emit('attach', sessionId);\n      }\n      // else { socket will attempt to attach when connected }\n    }\n  }\n\n  class Endpoint {\n    constructor(url, database, evented) {\n      this.url = url;\n      this.database = database;\n      this.evented = query.has('events=false') ? false : evented;\n      this.cache = {};\n      this.sessionId = null; // = getPersistedSessionId();\n      this.socket = this.evented\n        ? new Socket(this.handleEvent.bind(this))\n        : null;\n    }\n    connectSession(sessionId) {\n      this.sessionId = sessionId;\n      if (this.socket) {\n        this.socket.attach(sessionId);\n      }\n    }\n    handleEvent(event) {\n      const {\n        subscription_type: subscriptionType,\n        payload,\n        operation,\n        row_id: rowId,\n      } = event;\n      console.log({subscriptionType, payload, operation, rowId});\n\n      switch (subscriptionType) {\n        case 'table': {\n          console.log(subscriptionType + ':' + operation);\n          const rowsets = this.database.getTracked(\n            relationId(rowId.pk_column_id.relation_id).url()\n          );\n          for (const rowset of rowsets) {\n            rowset._triggerEvent(operation, payload, rowId);\n          }\n          break;\n        }\n        case 'column':\n          console.log(subscriptionType + ':' + operation);\n          break;\n        case 'row':\n          console.log(subscriptionType + ':' + operation);\n          break;\n        case 'field':\n          console.log(subscriptionType + ':' + operation);\n          break;\n        default:\n          break;\n      }\n      // TODO: Delete event\n    }\n    _resource(method, meta_id, args, data) {\n      args = args || {};\n\n      $('.debugger3').trigger('debugger_request', {\n        method: method,\n        meta_id: meta_id,\n        args: args,\n        data: data,\n      });\n\n      // Get use_cache from args or data\n      let use_cache = false;\n      if (!data && args.use_cache) {\n        use_cache = args.use_cache;\n        delete args.use_cache;\n      } else if (data?.use_cache) {\n        use_cache = data.use_cache;\n        delete data.use_cache;\n      }\n\n      // allow un-evented call by passing false for 'events'\n      const passed = Object.hasOwn(args, 'events');\n      const isTruthy = Boolean(args.events);\n      if (!passed || isTruthy) {\n        // If this connection is evented, get event_session_id\n        if (this.evented && this.sessionId) {\n          args.session_id = this.sessionId;\n        }\n      }\n      delete args.events;\n\n      // URLs\n      const id_url = meta_id.to_url(true); // ID part of the URL only\n      const url_without_query = this.url + id_url;\n      const url_with_query = url_without_query + buildQueryString(args);\n\n      // Check cache\n      if (use_cache && url_with_query in this.cache) {\n        return this.cache[url_with_query];\n      }\n\n      // If query string is too long, upgrade GET method to POST\n      if (method == 'GET' && (location.host + url_with_query).length > 1000) {\n        method = 'POST';\n      }\n\n      const headers = new Headers();\n      headers.append('Content-Type', 'application/json');\n\n      const init_obj = {\n        method: method,\n        headers: headers,\n        credentials: 'same-origin',\n      };\n\n      // Don't add data on GET requests\n      if (method !== 'GET') {\n        init_obj.body = JSON.stringify(data);\n      }\n\n      const request = fetch(\n        method === 'GET' ? url_with_query : url_without_query,\n        init_obj\n      )\n        .then(function (response) {\n          // this will never happen\n          // JSON was returned from WebSocket\n          if (typeof response.json == 'undefined') {\n            // TODO: ? Unfortunately this has no HTTP status like the result of fetch\n            return response;\n          }\n\n          // Request object was returned from fetch\n          // Read json stream\n          var json = response.json();\n\n          if (response.status >= 200 && response.status < 300) {\n            return json;\n          }\n\n          // If bad request (code 300 or higher), reject promise\n          return json.then(Promise.reject.bind(Promise));\n        })\n        .catch(function (server_error) {\n          // Construct real Error object\n          const err = new Error(server_error.message.message);\n          err.metadata = server_error.message || {};\n          err.metadata.status_code = server_error.status_code;\n          err.metadata.title = server_error.title;\n\n          // Log error in collapsed group\n          console.groupCollapsed(\n            method,\n            server_error.status_code,\n            server_error.title\n          );\n          // console.error(url_without_query);\n          if ('message' in server_error) {\n            console.error(method == 'GET' ? url_with_query : url_without_query);\n            console.error(server_error.message.message);\n            console.error(server_error.message.context);\n          }\n          console.groupEnd();\n\n          throw err;\n        });\n\n      // Check cache for GET/POST\n      if (use_cache && (method == 'GET' || method == 'POST')) {\n        this.cache[url_with_query] = request;\n      }\n\n      return request;\n    }\n\n    get(meta_id, args) {\n      return this._resource('GET', meta_id, args);\n    }\n\n    post(meta_id, data) {\n      return this._resource('POST', meta_id, {}, data);\n    }\n\n    patch(meta_id, data) {\n      return this._resource('PATCH', meta_id, {}, data);\n    }\n\n    delete(meta_id, args) {\n      return this._resource('DELETE', meta_id, args);\n    }\n  }\n\n  AQ.uuid = function () {\n    var d = new Date().getTime();\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n      /[xy]/g,\n      function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == 'x' ? r : (r & 0x7) | 0x8).toString(16);\n      }\n    );\n  };\n  /*--------------------------------- * Database * ---------------------------------*/\n  AQ.Database = function (url, settings) {\n    this.settings = settings;\n\n    if (typeof this.settings.evented === 'string') {\n      console.warn(\n        'AQ.Database: `evented` setting has been deprecated. Use `events=true|false` instead'\n      );\n      delete this.settings.evented;\n    }\n\n    this.settings.events = Object.hasOwn(this.settings, 'events')\n\t\t? this.settings.events\n\t\t: false;\n    this.endpoint = new Endpoint(url, this, this.settings.events);\n    this.tracked = {relation: {}, row: {}, field: {}};\n\n    if (this.settings.events) {\n      this.schema('event')\n        .function('session_create')\n        .then(\n          function (result) {\n            const sessionId = result.get('session_create');\n            if (sessionId) {\n              this.endpoint.connectSession(sessionId);\n              persistSessionId(sessionId);\n            } else {\n              console.log('got a null sessionId', sessionId);\n            }\n          }.bind(this)\n        );\n    }\n  };\n  AQ.Database.prototype.constructor = AQ.Database;\n  AQ.Database.prototype.schema = function (name) {\n    return new AQ.Schema(this, name);\n  };\n  AQ.Database.prototype.getTracked = function (id) {\n    let idType;\n    if (id.startsWith('/relation/')) {\n      idType = 'relation';\n    } else if (id.startsWith('/row/')) {\n      idType = 'row';\n    } else if (id.startsWith('/field/')) {\n      idType = 'field';\n    }\n    const tracked = this.tracked[idType][id];\n    if (!tracked) {\n      return [];\n    }\n    return tracked;\n  };\n  AQ.Database.prototype.track = function (id, obj) {\n    // TODO: db.track should only be called when events are set up on this query\n    let idType;\n    if (id.startsWith('/relation/')) {\n      idType = 'relation';\n    } else if (id.startsWith('/row/')) {\n      idType = 'row';\n    } else if (id.startsWith('/field/')) {\n      idType = 'field';\n    }\n\n    // columns are supposed to have events, but what does that mean?\n    // functions do not have events\n    // schema do not have events\n\n    switch (idType) {\n      case 'relation':\n        this.tracked.relation[id] = this.tracked.relation[id] || [];\n        this.tracked.relation[id].push(obj);\n        break;\n      case 'row':\n        this.tracked.row[id] = obj;\n        break;\n      case 'field':\n        this.tracked.field[id] = obj;\n        break;\n    }\n  };\n\n  /*--------------------------------- * Schema * ---------------------------------*/\n  AQ.Schema = function (database, name) {\n    this.database = database;\n    this.name = name;\n    this.id = {name: this.name};\n  };\n  AQ.Schema.prototype.constructor = AQ.Schema;\n  AQ.Schema.prototype.relation = function (name) {\n    return new AQ.Relation(this, name);\n  };\n  AQ.Schema.prototype.table = function (name) {\n    return new AQ.Table(this, name);\n  };\n  AQ.Schema.prototype.view = function (name) {\n    return new AQ.View(this, name);\n  };\n  AQ.Schema.prototype.function = function (identifier, args, options) {\n    // Function identifier (name and parameter list)\n    if (typeof identifier == 'object') {\n      var name = identifier.name;\n      var parameter_type_list = identifier.parameters;\n    }\n    // Selecting a function without specifying the parameters\n    else {\n      var name = identifier;\n    }\n\n    options = options || {};\n\n    // Arguments\n    options.args = {};\n\n    // `args = undefined` will pass no arguments into the server-side function\n    if (typeof args != 'undefined') {\n      // some_function?args={ kwargs: {} } -- Key/value object\n      if (!(args instanceof Array) && args instanceof Object) {\n        options.args.kwargs = args;\n      }\n      // some_function?args={ vals: [] } -- Array\n      else {\n        if (!(args instanceof Array)) {\n          // Regular value is placed into array\n          args = [args];\n        }\n        options.args.vals = args;\n      }\n    }\n\n    var fn = new AQ.Function(this, name, parameter_type_list);\n\n    return this.database.endpoint\n      .get(fn, options)\n      .then(\n        function (response) {\n          if (!response) {\n            throw 'Empty response';\n          }\n          /* sometimes results can be empty and that is ok.\n                else if (!response.result.length) {\n                    throw 'Result set empty';\n                }\n\t\t\t\t*/\n          if (response.result.length === 0) {\n              return null;\n          }\n          if (response.result.length != 1) {\n            return new AQ.FunctionResultSet(fn, response);\n          }\n          return new AQ.FunctionResult(fn, response);\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw err;\n      });\n  };\n\n  /*--------------------------------- * Relation * ---------------------------------*/\n  function relationId(id) {\n    return {\n      url() {\n        return '/relation/' + id.schema_id.name + '/' + id.name;\n      },\n    };\n  }\n  AQ.Relation = function (schema, name) {\n    this.schema = schema;\n    this.name = name;\n    this.id = {schema_id: this.schema.id, name: this.name};\n  };\n  AQ.Relation.prototype.constructor = AQ.Relation;\n  AQ.Relation.prototype.to_url = function (id_only) {\n    return id_only\n      ? '/relation/' + this.schema.name + '/' + this.name\n      : this.schema.database.endpoint.url +\n          '/relation/' +\n          this.schema.name +\n          '/' +\n          this.name;\n  };\n  AQ.Relation.prototype.column = function (name) {\n    return new AQ.Column(this, name);\n  };\n  AQ.Relation.prototype.rows = function (options) {\n    return this.schema.database.endpoint\n      .get(this, options)\n      .then(\n        function (rows) {\n          if (rows == null) {\n            throw 'Empty response';\n          } /*\n                else if (rows.result.length < 1) {\n                    throw 'No rows returned';\n                }*/\n          const rowset = new AQ.Rowset(this, rows, options);\n          this.schema.database.track(this.to_url(true), rowset);\n          return rowset;\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw 'Rows request failed: ' + err;\n      });\n  };\n  AQ.Relation.prototype.row = function () {\n    // Multiple different ways to call 'row' function\n\n    // 1. Calling with Options object\n    if (typeof arguments[0] == 'object') {\n      var obj = arguments[0];\n      var args = arguments[1] || {};\n\n      // AQ.Relation.row({ where: { column_name: 'column_name', op: '=', value: 'value' } })\n      // Maybe it should be this one: AQ.Relation.row({ where: { column_name: value } })\n      if (typeof obj.where != 'undefined') {\n        args.where = obj.where;\n      }\n      // AQ.Relation.row({ column_name: 'column_name', op: '=', value: 'value' })\n      // Maybe it should be this one: AQ.Relation.row({ column_name: value })\n      else {\n        args.where = obj;\n      }\n    }\n    // 2. Calling with column_name and value\n    else if (typeof arguments[0] == 'string') {\n      // AQ.Relation.row(column_name, value [, options_obj])\n      var name = arguments[0];\n      var value = arguments[1];\n      var args = arguments[2] || {};\n\n      args.where = {name: name, op: '=', value: value};\n    }\n    // 3. Calling AQ.Relation.row() without arguments\n    else {\n      var args = {};\n    }\n\n    return this.schema.database.endpoint\n      .get(this, args)\n      .then(\n        function (row) {\n          if (row == null) {\n            throw 'Empty response';\n          } else if (row.result.length == 0) {\n            return null; // throw 'No row returned';\n          } else if (row.result.length > 1) {\n            throw 'Multiple rows returned';\n          }\n          const aqRow = new AQ.Row(this, row);\n          this.schema.database.track(aqRow.to_url(true), aqRow);\n          return aqRow;\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw 'Row request failed: ' + err;\n      });\n  };\n\n  /*--------------------------------- * Table * ---------------------------------*/\n  AQ.Table = function (schema, name) {\n    this.schema = schema;\n    this.name = name;\n    this.id = {schema_id: this.schema.id, name: this.name};\n  };\n  AQ.Table.prototype = Object.create(AQ.Relation.prototype);\n  AQ.Table.prototype.constructor = AQ.Table;\n  AQ.Table.prototype.insert = function (data) {\n    if (typeof data == 'undefined') {\n      // table.insert({}) is equivalent to table.insert()\n      // both will insert default values\n      data = {};\n    }\n\n    // Return inserted row promise\n    return this.schema.database.endpoint\n      .patch(this, data)\n      .then(\n        function (inserted_row) {\n          if (inserted_row == null) {\n            throw 'Empty response';\n          }\n          if (typeof data.length != 'undefined' && data.length > 1) {\n            return new AQ.Rowset(this, inserted_row, null);\n          }\n          return new AQ.Row(this, inserted_row);\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw 'Insert failed: ' + err;\n      });\n  };\n\n  /*--------------------------------- * View * ---------------------------------*/\n  AQ.View = function (schema, name) {\n    this.schema = schema;\n    this.name = name;\n    this.id = {schema_id: this.schema.id, name: this.name};\n  };\n  AQ.View.prototype = Object.create(AQ.Relation.prototype);\n  AQ.View.prototype.constructor = AQ.View;\n\n  /*--------------------------------- * Rowset * ---------------------------------*/\n  class Callbacks {\n    constructor() {\n      this.map = new Map();\n    }\n    call(cbType, payload) {\n      const callbacks = this.map.get(cbType) || [];\n      for (const callback of callbacks) {\n        callback(payload);\n      }\n    }\n    add(cbType, cb) {\n      this.map.set(\n        cbType,\n        this.map.has(cbType) ? this.map.get(cbType).concat(cb) : [cb]\n      );\n    }\n    remove(cbType, cb) {\n      const callbacks = this.map.get(cbType);\n      if (callbacks) {\n        this.map.set(\n          cbType,\n          callbacks.filter((callback) => callback !== cb)\n        );\n      }\n    }\n  }\n\n  AQ.Rowset = function (relation, response, server_arguments) {\n    this.relation = relation;\n    this.schema = relation.schema;\n    this.columns = response.columns || null;\n    this.pk_column_name = response.pk || null;\n    this.rows = response.result;\n    this.length = response.result.length;\n    this.server_arguments = server_arguments || {};\n    this.callbacks = new Callbacks();\n  };\n  AQ.Rowset.prototype.constructor = AQ.Rowset;\n  AQ.Rowset.prototype.map = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.Row(this.relation, {\n            columns: this.columns,\n            pk: this.pk_column_name,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .map(fn);\n  };\n  AQ.Rowset.prototype.forEach = function (fn) {\n    const newRow = (row) => {\n      return new AQ.Row(this.relation, {\n        columns: this.columns,\n        pk: this.pk_column_name,\n        result: [row],\n      });\n    };\n    this.onInsert(fn);\n    this.rows.map(newRow).forEach(fn);\n    return this;\n  };\n  AQ.Rowset.prototype.reload = function () {\n    return this.relation.rows(this.server_arguments);\n  };\n  AQ.Rowset.prototype._triggerEvent = function (eventType, payload, newRowId) {\n    const relId = this.relation.id;\n    const pkColumn = this.pk_column_name;\n    const rowIdStr = rowId(\n      newRowId.pk_column_id.relation_id,\n      newRowId.pk_value\n    ).url();\n    // TODO: need a rewrite on datum to fix this\n    // imitate api response to create row\n    const newRow = (row, pk) => {\n      return new AQ.Row(this.relation, {\n        columns: this.columns,\n        pk: pk || this.pk_column_name,\n        result: [row],\n      });\n    };\n    switch (eventType) {\n      case 'insert': {\n        const completeRow = {row: payload};\n        this.rows.push(completeRow);\n        payload = newRow(completeRow);\n        break;\n      }\n      case 'update': {\n        // TODO: I think payload is only the update fields, may need to reconstruct real row\n        let index = this.rows.findIndex(\n          ({row}) => rowId(relId, row[pkColumn]).url() === rowIdStr\n        );\n        if (index < 0) {\n          console.error(\n            'AQ.Rowset: trying to trigger update on nonexistant row'\n          );\n          break;\n        }\n        const completeRow = {row: {...this.rows[index].row, ...payload}};\n        this.rows[index] = completeRow;\n        payload = newRow(completeRow, pkColumn);\n        break;\n      }\n      case 'delete': {\n        // TODO: I think payload is only the row_id, may need to reconstruct real row\n        let index = this.rows.findIndex(\n          (row) => rowId(relId, row[pkColumn]).url() === rowIdStr\n        );\n        if (!index) {\n          console.error(\n            'AQ.Rowset: trying to trigger delete on nonexistant row'\n          );\n          break;\n        }\n        this.rows.splice(index, 1);\n        payload = rowIdStr;\n        break;\n      }\n    }\n    this.callbacks.call(eventType, payload);\n  };\n  AQ.Rowset.prototype.onInsert = function (fn) {\n    // TODO: maybe get rid of string\n    this.callbacks.add('insert', fn);\n  };\n  AQ.Rowset.prototype.onUpdate = function (fn) {\n    // TODO: can you update a rowset?\n    this.callbacks.add('update', fn);\n  };\n  AQ.Rowset.prototype.onDelete = function (fn) {\n    this.callbacks.add('delete', fn);\n  };\n\n  /**\n   * Call AQ.Rowset.where with (where_obj) or use shorthand notation (field, value) - filter results programmatically\n   *\n   * @param {Object} where_obj\n   * @param {[Boolean]} return_first\n   * @param {[Boolean]} async\n   *\n   * OR\n   *\n   * @param {String} field\n   * @param {Any} value\n   * @param {[Boolean]} return_first\n   * @param {[Boolean]} async\n   *\n   * @returns {Promise}\n   */\n  AQ.Rowset.prototype.where = function () {\n    var first = false,\n      async = true,\n      where_obj = {};\n    if (typeof arguments[0] == 'object') {\n      // AQ.Rowset.where(where_obj [, return_first] [, async]);\n      where_obj = arguments[0];\n      var field = where_obj.field;\n      var value = where_obj.value;\n      if (arguments.length > 1) first = arguments[1];\n      if (arguments.length > 2) async = arguments[2];\n    } else if (typeof arguments[0] == 'string' && arguments.length > 1) {\n      // AQ.Rowset.where(field, value [, return_first] [, async]);\n      var field = arguments[0];\n      var value = arguments[1];\n      if (arguments.length > 2) first = arguments[2];\n      if (arguments.length > 3) async = arguments[3];\n    }\n\n    return new Promise(\n      function (resolve, reject) {\n        // TODO lots of logic here\n        // The new rowset that is returned must be in the same format as the response from the server\n\n        if (first) {\n          for (var i = 0; i < this.rows.length; i++) {\n            if (this.rows[i].row[field] == value) {\n              resolve(\n                new AQ.Row(this.relation, {\n                  columns: this.columns,\n                  result: [this.rows[i]],\n                })\n              );\n            }\n          }\n          reject('could not find ' + field + ' ' + value);\n        } else {\n          var return_rowset = [];\n          for (var i = 0; i < this.rows.length; i++) {\n            if (this.rows[i].row[field] == value) {\n              return_rowset.push(this.rows[i]);\n            }\n          }\n          resolve(\n            new AQ.Rowset(this.relation, {\n              columns: this.columns,\n              result: return_rowset,\n            })\n          );\n        }\n\n        // 2\n\n        // maybe we don't need to search the entire row and instead we return the first item found\n        /*\n            var new_rowset = _.filter(this.rows, function(el) {\n                //return AQ.equals.call(this, el[field], val);\n            });\n*/\n        if (new_rowset.length == 1) {\n          return new AQ.Row(this.relation, new_rowset);\n        } else if (new_rowset.length > 1) {\n          throw 'Multiple Rows Returned';\n        }\n\n        // if row does not exist\n        return null;\n      }.bind(this)\n    );\n  };\n  AQ.Rowset.prototype.order_by = function (column, direction) {\n    /*\n        var ordered = _.sortBy(this.rows, function(el) {\n            return el.row[column];\n        });\n*/\n    if (direction !== 'asc') {\n      ordered.reverse();\n    }\n    return new AQ.Rowset(this.relation, {\n      columns: this.columns,\n      result: ordered,\n    });\n  };\n  AQ.Rowset.prototype.limit = function (lim) {\n    if (lim <= 0) {\n      throw 'Bad limit';\n    }\n    return new AQ.Rowset(this.relation, {\n      columns: this.columns,\n      result: this.rows.slice(0, lim),\n    });\n  };\n  AQ.Rowset.prototype.related_rows = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    var values = this.map(function (row) {\n      return flattenIfId(row.get(self_column_name));\n    });\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: 'in',\n      value: values,\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n  };\n  AQ.Rowset.prototype.related_row = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    var values = this.map(function (row) {\n      return flattenIfId(row.get(self_column_name));\n    });\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: 'in',\n      value: values,\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n  };\n\n  /*--------------------------------- * Row * ---------------------------------*/\n  function rowId(relId, pkValue) {\n    return {\n      url() {\n        return (\n          '/row/' + relId.schema_id.name + '/' + relId.name + '/' + pkValue\n        );\n      },\n    };\n  }\n  AQ.Row = function (relation, response) {\n    this.relation = relation;\n    this.schema = relation.schema;\n    this.row_data = response.result[0].row;\n\n    this.callbacks = new Callbacks();\n    this.cached_fields = {};\n    this.columns = response.columns || null;\n    this.pk_column_name = null;\n    this.pk_value = null;\n    this.id = null;\n    this.to_url = function () {\n      console.error(\n        'You must call a row with "meta_data: true" in order to use the to_url function'\n      );\n      throw 'Datum.js: Programming Error';\n    };\n\n    if (typeof response.pk != 'undefined') {\n      this.pk_column_name = response.pk;\n      this.pk_value = this.get(this.pk_column_name);\n      // this.id = {"pk_column_id":{"relation_id":{"schema_id":{"name":this.schema.name},"name":this.relation.name},"name":this.pk_column_name},"pk_value": this.pk_value}\n      this.id = {\n        pk_column_id: {\n          relation_id: this.relation.id,\n          name: this.pk_column_name,\n        },\n        pk_value: this.pk_value,\n      };\n\n      this.to_url = function (id_only) {\n        return id_only\n          ? '/row/' +\n              this.relation.schema.name +\n              '/' +\n              this.relation.name +\n              '/' +\n              this.pk_column_name +\n              '/' +\n              /*JSON.stringify(this.pk_value)*/ this.pk_value\n          : this.relation.schema.database.endpoint.url +\n              '/row/' +\n              this.relation.schema.name +\n              '/' +\n              this.relation.name +\n              '/' +\n              this.pk_column_name +\n              '/' +\n              /*JSON.stringify(this.pk_value)*/ this.pk_value;\n      };\n    }\n  };\n  AQ.Row.prototype = {\n    constructor: AQ.Row,\n    get: function (name) {\n      return this.row_data[name];\n    },\n    set: function (name, value) {\n      this.row_data[name] = value;\n      return this;\n    },\n    to_string: function () {\n      return JSON.stringify(this.row_data);\n    },\n    clone: function () {\n      return new AQ.Row(this.relation, {\n        columns: this.columns,\n        pk: this.pk_column_name,\n        result: [{row: this.row_data}],\n      });\n    },\n    field: function (name) {\n      if (typeof this.cached_fields[name] == 'undefined') {\n        this.cached_fields[name] = new AQ.Field(\n          this,\n          name,\n          name === this.pk_column_name\n        );\n      }\n      return this.cached_fields[name];\n    },\n    fields: function () {\n      if (this.columns != null) {\n        return this.columns.map(\n          function (c) {\n            return this.field(c.name);\n          }.bind(this)\n        );\n      }\n      return null;\n    },\n  };\n  AQ.Row.prototype._triggerEvent = function (eventType, payload) {\n    switch (eventType) {\n      case 'update': {\n        // TODO: update fields\n        break;\n      }\n    }\n    this.callbacks.call(eventType, payload);\n  };\n  AQ.Row.prototype.onUpdate = function (fn) {\n    this.callbacks.add('update', fn);\n  };\n  AQ.Row.prototype.onDelete = function (fn) {\n    this.callbacks.add('delete', fn);\n  };\n  AQ.Row.prototype.update = function () {\n    return this.relation.schema.database.endpoint\n      .patch(this, this.row_data)\n      .then(\n        function (response) {\n          if (response == null) {\n            throw 'Empty response';\n          }\n          return this;\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw 'Update failed: ' + err;\n      });\n  };\n  AQ.Row.prototype.delete = function () {\n    return this.relation.schema.database.endpoint\n      .delete(this)\n      .then(function (response) {\n        if (response == null) {\n          throw 'Empty response';\n        }\n      })\n      .catch(function (err) {\n        throw 'Delete failed: ' + err;\n      });\n  };\n  AQ.Row.prototype.related_rows = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: '=',\n      value: flattenIfId(this.get(self_column_name)),\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n  };\n  AQ.Row.prototype.related_row = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: '=',\n      value: flattenIfId(this.get(self_column_name)),\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n  };\n\n  /*--------------------------------- * Column * ---------------------------------*/\n  AQ.Column = function (relation, name) {\n    this.relation = relation;\n    this.name = name;\n    this.id = {relation_id: relation.id, name: name};\n  };\n  AQ.Column.prototype.constructor = AQ.Column;\n\n  /*--------------------------------- * Field * ---------------------------------*/\n  AQ.Field = function (row, name, pk) {\n    this.row = row;\n    this.column = new AQ.Column(row.relation, name);\n    this.is_primary_key = pk;\n    this.name = name;\n    this.value = row.get(name);\n    this.id = {row_id: this.row.id, column_id: this.column.id};\n    this.to_url = function (id_only) {\n      if (this.row.pk_value == null) {\n        console.error(\n          'You must call a row with "meta_data: true" in order to use the to_url function'\n        );\n        throw 'Datum.js: Programming Error';\n      }\n      return id_only\n        ? '/field/' +\n            this.row.relation.schema.name +\n            '/' +\n            this.row.relation.name +\n            '/' +\n            this.row.pk_column_name +\n            '/' +\n            /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value +\n            '/' +\n            this.column.name\n        : this.row.relation.schema.database.endpoint.url +\n            '/field/' +\n            this.row.relation.schema.name +\n            '/' +\n            this.row.relation.name +\n            '/' +\n            this.row.pk_column_name +\n            '/' +\n            /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value +\n            '/' +\n            this.column.name;\n    };\n  };\n  AQ.Field.prototype = {\n    constructor: AQ.Field,\n    get: function () {\n      return this.row.get(this.name);\n    },\n    set: function (value) {\n      this.value = value;\n      return this.row.set(this.name, value);\n    },\n    update: function () {\n      return this.row.update();\n    }, // TODO: This is wrong\n  };\n\n  /*--------------------------------- * Function * ---------------------------------*/\n  AQ.Function = function (schema, name, args) {\n    this.schema = schema;\n    this.name = name;\n\n    if (args instanceof Array) {\n      this.args = '{' + args.join(',') + '}';\n    } else {\n      this.args = args;\n    }\n\n    this.id = {schema_id: this.schema.id, name: this.name, args: this.args};\n    this.to_url = function (id_only) {\n      var base_url = id_only ? '' : this.schema.database.endpoint.url;\n      if (typeof this.args != 'undefined') {\n        return (\n          base_url +\n          '/function/' +\n          this.schema.name +\n          '/' +\n          this.name +\n          '/' +\n          this.args\n        );\n      }\n      return base_url + '/function/' + this.schema.name + '/' + this.name;\n    };\n  };\n  AQ.Function.prototype.constructor = AQ.Function;\n\n  /*--------------------------------- * Function Result * ---------------------------------*/\n  AQ.FunctionResult = function (fn, response) {\n    this.function = fn;\n    this.schema = fn.schema;\n    this.row_data = response.result[0].row;\n    this.rows = response.result;\n    this.columns = response.columns;\n  };\n  AQ.FunctionResult.prototype = {\n    constructor: AQ.FunctionResult,\n    get: function (name) {\n      return this.row_data[name];\n    },\n    to_string: function () {\n      return JSON.stringify(this.row_data);\n    },\n  };\n  AQ.FunctionResult.prototype.map = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.FunctionResult(this.function, {\n            columns: this.columns,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .map(fn);\n  };\n  AQ.FunctionResult.prototype.forEach = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.FunctionResult(this.function, {\n            columns: this.columns,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .forEach(fn);\n  };\n  AQ.FunctionResult.prototype.related_rows = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: '=',\n      value: flattenIfId(this.get(self_column_name)),\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n  };\n  AQ.FunctionResult.prototype.related_row = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: '=',\n      value: flattenIfId(this.get(self_column_name)),\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n  };\n\n  /*--------------------------------- * Function Result Set * ---------------------------------*/\n  AQ.FunctionResultSet = function (fn, response) {\n    this.function = fn;\n    this.schema = fn.schema;\n    this.columns = response.columns;\n    this.rows = response.result;\n  };\n  AQ.FunctionResultSet.prototype.constructor = AQ.FunctionResultSet;\n  AQ.FunctionResultSet.prototype.map = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.FunctionResult(this.function, {\n            columns: this.columns,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .map(fn);\n  };\n  AQ.FunctionResultSet.prototype.forEach = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.FunctionResult(this.function, {\n            columns: this.columns,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .forEach(fn);\n  };\n  AQ.FunctionResultSet.prototype.related_rows = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    var values = this.map(function (row) {\n      return flattenIfId(row.get(self_column_name));\n    });\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: 'in',\n      value: values,\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n  };\n  AQ.FunctionResultSet.prototype.related_row = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    var values = this.map(function (row) {\n      return flattenIfId(row.get(self_column_name));\n    });\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: 'in',\n      value: values,\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n  };\n\n  window.AQ = AQ;\n  return AQ;\n});\n
\\x8401e20c6815b7058eee0ed7da5d740e84b536ec952aa1b38e76747364c9d3ba	bee395ac-ac9a-4e6b-bfb9-37999937cdea
\\x888b41bb493f82bc787b507deee35df8a9dca32d9f59e5e4434334bb04aa1e17	!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.io=t()}}(function(){var t;return function e(t,n,r){function o(s,a){if(!n[s]){if(!t[s]){var c="function"==typeof require&&require;if(!a&&c)return c(s,!0);if(i)return i(s,!0);var p=new Error("Cannot find module '"+s+"'");throw p.code="MODULE_NOT_FOUND",p}var u=n[s]={exports:{}};t[s][0].call(u.exports,function(e){var n=t[s][1][e];return o(n?n:e)},u,u.exports,e,t,n,r)}return n[s].exports}for(var i="function"==typeof require&&require,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(t,e,n){function r(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,r=o(t),i=r.source,p=r.id,u=r.path,f=c[p]&&u in c[p].nsps,h=e.forceNew||e["force new connection"]||!1===e.multiplex||f;return h?(a("ignoring socket cache for %s",i),n=s(i,e)):(c[p]||(a("new io instance for %s",i),c[p]=s(i,e)),n=c[p]),n.socket(r.path)}var o=t("./url"),i=t("socket.io-parser"),s=t("./manager"),a=t("debug")("socket.io-client");e.exports=n=r;var c=n.managers={};n.protocol=i.protocol,n.connect=r,n.Manager=t("./manager"),n.Socket=t("./socket")},{"./manager":2,"./socket":4,"./url":5,debug:14,"socket.io-parser":40}],2:[function(t,e,n){function r(t,e){return this instanceof r?(t&&"object"==typeof t&&(e=t,t=void 0),e=e||{},e.path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(e.reconnection!==!1),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new h({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[],this.encoder=new a.Encoder,this.decoder=new a.Decoder,this.autoConnect=e.autoConnect!==!1,void(this.autoConnect&&this.open())):new r(t,e)}var o=t("engine.io-client"),i=t("./socket"),s=t("component-emitter"),a=t("socket.io-parser"),c=t("./on"),p=t("component-bind"),u=t("debug")("socket.io-client:manager"),f=t("indexof"),h=t("backo2"),l=Object.prototype.hasOwnProperty;e.exports=r,r.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var t in this.nsps)l.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},r.prototype.updateSocketIds=function(){for(var t in this.nsps)l.call(this.nsps,t)&&(this.nsps[t].id=this.engine.id)},s(r.prototype),r.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},r.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},r.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},r.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},r.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},r.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},r.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},r.prototype.open=r.prototype.connect=function(t){if(u("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;u("opening %s",this.uri),this.engine=o(this.uri,this.opts);var e=this.engine,n=this;this.readyState="opening",this.skipReconnect=!1;var r=c(e,"open",function(){n.onopen(),t&&t()}),i=c(e,"error",function(e){if(u("connect_error"),n.cleanup(),n.readyState="closed",n.emitAll("connect_error",e),t){var r=new Error("Connection error");r.data=e,t(r)}else n.maybeReconnectOnOpen()});if(!1!==this._timeout){var s=this._timeout;u("connect attempt will timeout after %d",s);var a=setTimeout(function(){u("connect attempt timed out after %d",s),r.destroy(),e.close(),e.emit("error","timeout"),n.emitAll("connect_timeout",s)},s);this.subs.push({destroy:function(){clearTimeout(a)}})}return this.subs.push(r),this.subs.push(i),this},r.prototype.onopen=function(){u("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(c(t,"data",p(this,"ondata"))),this.subs.push(c(t,"ping",p(this,"onping"))),this.subs.push(c(t,"pong",p(this,"onpong"))),this.subs.push(c(t,"error",p(this,"onerror"))),this.subs.push(c(t,"close",p(this,"onclose"))),this.subs.push(c(this.decoder,"decoded",p(this,"ondecoded")))},r.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},r.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},r.prototype.ondata=function(t){this.decoder.add(t)},r.prototype.ondecoded=function(t){this.emit("packet",t)},r.prototype.onerror=function(t){u("error",t),this.emitAll("error",t)},r.prototype.socket=function(t){function e(){~f(r.connecting,n)||r.connecting.push(n)}var n=this.nsps[t];if(!n){n=new i(this,t),this.nsps[t]=n;var r=this;n.on("connecting",e),n.on("connect",function(){n.id=r.engine.id}),this.autoConnect&&e()}return n},r.prototype.destroy=function(t){var e=f(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},r.prototype.packet=function(t){u("writing packet %j",t);var e=this;e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,function(n){for(var r=0;r<n.length;r++)e.engine.write(n[r],t.options);e.encoding=!1,e.processPacketQueue()}))},r.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},r.prototype.cleanup=function(){u("cleanup");for(var t;t=this.subs.shift();)t.destroy();this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},r.prototype.close=r.prototype.disconnect=function(){u("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"==this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},r.prototype.onclose=function(t){u("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},r.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)u("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();u("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var n=setTimeout(function(){t.skipReconnect||(u("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open(function(e){e?(u("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(u("reconnect success"),t.onreconnect())}))},e);this.subs.push({destroy:function(){clearTimeout(n)}})}},r.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)}},{"./on":3,"./socket":4,backo2:8,"component-bind":11,"component-emitter":12,debug:14,"engine.io-client":16,indexof:32,"socket.io-parser":40}],3:[function(t,e,n){function r(t,e,n){return t.on(e,n),{destroy:function(){t.removeListener(e,n)}}}e.exports=r},{}],4:[function(t,e,n){function r(t,e){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.io.autoConnect&&this.open()}var o=t("socket.io-parser"),i=t("component-emitter"),s=t("to-array"),a=t("./on"),c=t("component-bind"),p=t("debug")("socket.io-client:socket"),u=t("has-binary");e.exports=n=r;var f={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},h=i.prototype.emit;i(r.prototype),r.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[a(t,"open",c(this,"onopen")),a(t,"packet",c(this,"onpacket")),a(t,"close",c(this,"onclose"))]}},r.prototype.open=r.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"==this.io.readyState&&this.onopen(),this.emit("connecting"),this)},r.prototype.send=function(){var t=s(arguments);return t.unshift("message"),this.emit.apply(this,t),this},r.prototype.emit=function(t){if(f.hasOwnProperty(t))return h.apply(this,arguments),this;var e=s(arguments),n=o.EVENT;u(e)&&(n=o.BINARY_EVENT);var r={type:n,data:e};return r.options={},r.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(p("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),r.id=this.ids++),this.connected?this.packet(r):this.sendBuffer.push(r),delete this.flags,this},r.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},r.prototype.onopen=function(){p("transport is open - connecting"),"/"!=this.nsp&&this.packet({type:o.CONNECT})},r.prototype.onclose=function(t){p("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},r.prototype.onpacket=function(t){if(t.nsp==this.nsp)switch(t.type){case o.CONNECT:this.onconnect();break;case o.EVENT:this.onevent(t);break;case o.BINARY_EVENT:this.onevent(t);break;case o.ACK:this.onack(t);break;case o.BINARY_ACK:this.onack(t);break;case o.DISCONNECT:this.ondisconnect();break;case o.ERROR:this.emit("error",t.data)}},r.prototype.onevent=function(t){var e=t.data||[];p("emitting event %j",e),null!=t.id&&(p("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?h.apply(this,e):this.receiveBuffer.push(e)},r.prototype.ack=function(t){var e=this,n=!1;return function(){if(!n){n=!0;var r=s(arguments);p("sending ack %j",r);var i=u(r)?o.BINARY_ACK:o.ACK;e.packet({type:i,id:t,data:r})}}},r.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(p("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):p("bad ack %s",t.id)},r.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},r.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)h.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},r.prototype.ondisconnect=function(){p("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},r.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},r.prototype.close=r.prototype.disconnect=function(){return this.connected&&(p("performing disconnect (%s)",this.nsp),this.packet({type:o.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},r.prototype.compress=function(t){return this.flags=this.flags||{},this.flags.compress=t,this}},{"./on":3,"component-bind":11,"component-emitter":12,debug:14,"has-binary":30,"socket.io-parser":40,"to-array":43}],5:[function(t,e,n){(function(n){function r(t,e){var r=t,e=e||n.location;null==t&&(t=e.protocol+"//"+e.host),"string"==typeof t&&("/"==t.charAt(0)&&(t="/"==t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\\/\\//.test(t)||(i("protocol-less url %s",t),t="undefined"!=typeof e?e.protocol+"//"+t:"https://"+t),i("parse %s",t),r=o(t)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";var s=-1!==r.host.indexOf(":"),a=s?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+a+":"+r.port,r.href=r.protocol+"://"+a+(e&&e.port==r.port?"":":"+r.port),r}var o=t("parseuri"),i=t("debug")("socket.io-client:url");e.exports=r}).call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})},{debug:14,parseuri:38}],6:[function(t,e,n){function r(t,e,n){function r(t,o){if(r.count<=0)throw new Error("after called too many times");--r.count,t?(i=!0,e(t),e=n):0!==r.count||i||e(null,o)}var i=!1;return n=n||o,r.count=t,0===t?e():r}function o(){}e.exports=r},{}],7:[function(t,e,n){e.exports=function(t,e,n){var r=t.byteLength;if(e=e||0,n=n||r,t.slice)return t.slice(e,n);if(0>e&&(e+=r),0>n&&(n+=r),n>r&&(n=r),e>=r||e>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(t),i=new Uint8Array(n-e),s=e,a=0;n>s;s++,a++)i[a]=o[s];return i.buffer}},{}],8:[function(t,e,n){function r(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}e.exports=r,r.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},r.prototype.reset=function(){this.attempts=0},r.prototype.setMin=function(t){this.ms=t},r.prototype.setMax=function(t){this.max=t},r.prototype.setJitter=function(t){this.jitter=t}},{}],9:[function(t,e,n){!function(){"use strict";for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",e=new Uint8Array(256),r=0;r<t.length;r++)e[t.charCodeAt(r)]=r;n.encode=function(e){var n,r=new Uint8Array(e),o=r.length,i="";for(n=0;o>n;n+=3)i+=t[r[n]>>2],i+=t[(3&r[n])<<4|r[n+1]>>4],i+=t[(15&r[n+1])<<2|r[n+2]>>6],i+=t[63&r[n+2]];return o%3===2?i=i.substring(0,i.length-1)+"=":o%3===1&&(i=i.substring(0,i.length-2)+"=="),i},n.decode=function(t){var n,r,o,i,s,a=.75*t.length,c=t.length,p=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var u=new ArrayBuffer(a),f=new Uint8Array(u);for(n=0;c>n;n+=4)r=e[t.charCodeAt(n)],o=e[t.charCodeAt(n+1)],i=e[t.charCodeAt(n+2)],s=e[t.charCodeAt(n+3)],f[p++]=r<<2|o>>4,f[p++]=(15&o)<<4|i>>2,f[p++]=(3&i)<<6|63&s;return u}}()},{}],10:[function(t,e,n){(function(t){function n(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.buffer instanceof ArrayBuffer){var r=n.buffer;if(n.byteLength!==r.byteLength){var o=new Uint8Array(n.byteLength);o.set(new Uint8Array(r,n.byteOffset,n.byteLength)),r=o.buffer}t[e]=r}}}function r(t,e){e=e||{};var r=new i;n(t);for(var o=0;o<t.length;o++)r.append(t[o]);return e.type?r.getBlob(e.type):r.getBlob()}function o(t,e){return n(t),new Blob(t,e||{})}var i=t.BlobBuilder||t.WebKitBlobBuilder||t.MSBlobBuilder||t.MozBlobBuilder,s=function(){try{var t=new Blob(["hi"]);return 2===t.size}catch(e){return!1}}(),a=s&&function(){try{var t=new Blob([new Uint8Array([1,2])]);return 2===t.size}catch(e){return!1}}(),c=i&&i.prototype.append&&i.prototype.getBlob;e.exports=function(){return s?a?t.Blob:o:c?r:void 0}()}).call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})},{}],11:[function(t,e,n){var r=[].slice;e.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var n=r.call(arguments,2);return function(){return e.apply(t,n.concat(r.call(arguments)))}}},{}],12:[function(t,e,n){function r(t){return t?o(t):void 0}function o(t){for(var e in r.prototype)t[e]=r.prototype[e];return t}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},r.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n=this._callbacks["$"+t];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var r,o=0;o<n.length;o++)if(r=n[o],r===e||r.fn===e){n.splice(o,1);break}return this},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks["$"+t];if(n){n=n.slice(0);for(var r=0,o=n.length;o>r;++r)n[r].apply(this,e)}return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length}},{}],13:[function(t,e,n){e.exports=function(t,e){var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},{}],14:[function(t,e,n){function r(){return"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31}function o(){var t=arguments,e=this.useColors;if(t[0]=(e?"%c":"")+this.namespace+(e?" %c":" ")+t[0]+(e?"%c ":" ")+"+"+n.humanize(this.diff),!e)return t;var r="color: "+this.color;t=[t[0],r,"color: inherit"].concat(Array.prototype.slice.call(t,1));var o=0,i=0;return t[0].replace(/%[a-z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))}),t.splice(i,0,r),t}function i(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function s(t){try{null==t?n.storage.removeItem("debug"):n.storage.debug=t}catch(e){}}function a(){var t;try{t=n.storage.debug}catch(e){}return t}function c(){try{return window.localStorage}catch(t){}}n=e.exports=t("./debug"),n.log=i,n.formatArgs=o,n.save=s,n.load=a,n.useColors=r,n.storage="undefined"!=typeof chrome&&"undefined"!=typeof chrome.storage?chrome.storage.local:c(),n.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],n.formatters.j=function(t){return JSON.stringify(t)},n.enable(a())},{"./debug":15}],15:[function(t,e,n){function r(){return n.colors[u++%n.colors.length]}function o(t){function e(){}function o(){var t=o,e=+new Date,i=e-(p||e);t.diff=i,t.prev=p,t.curr=e,p=e,null==t.useColors&&(t.useColors=n.useColors()),null==t.color&&t.useColors&&(t.color=r());var s=Array.prototype.slice.call(arguments);s[0]=n.coerce(s[0]),"string"!=typeof s[0]&&(s=["%o"].concat(s));var a=0;s[0]=s[0].replace(/%([a-z%])/g,function(e,r){if("%%"===e)return e;a++;var o=n.formatters[r];if("function"==typeof o){var i=s[a];e=o.call(t,i),s.splice(a,1),a--}return e}),"function"==typeof n.formatArgs&&(s=n.formatArgs.apply(t,s));var c=o.log||n.log||console.log.bind(console);c.apply(t,s)}e.enabled=!1,o.enabled=!0;var i=n.enabled(t)?o:e;return i.namespace=t,i}function i(t){n.save(t);for(var e=(t||"").split(/[\\s,]+/),r=e.length,o=0;r>o;o++)e[o]&&(t=e[o].replace(/\\*/g,".*?"),"-"===t[0]?n.skips.push(new RegExp("^"+t.substr(1)+"$")):n.names.push(new RegExp("^"+t+"$")))}function s(){n.enable("")}function a(t){var e,r;for(e=0,r=n.skips.length;r>e;e++)if(n.skips[e].test(t))return!1;for(e=0,r=n.names.length;r>e;e++)if(n.names[e].test(t))return!0;return!1}function c(t){return t instanceof Error?t.stack||t.message:t}n=e.exports=o,n.coerce=c,n.disable=s,n.enable=i,n.enabled=a,n.humanize=t("ms"),n.names=[],n.skips=[],n.formatters={};var p,u=0},{ms:35}],16:[function(t,e,n){e.exports=t("./lib/")},{"./lib/":17}],17:[function(t,e,n){e.exports=t("./socket"),e.exports.parser=t("engine.io-parser")},{"./socket":18,"engine.io-parser":27}],18:[function(t,e,n){(function(n){function r(t,e){if(!(this instanceof r))return new r(t,e);e=e||{},t&&"object"==typeof t&&(e=t,t=null),t?(t=u(t),e.hostname=t.host,e.secure="https"==t.protocol||"wss"==t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=u(e.host).host),this.secure=null!=e.secure?e.secure:n.location&&"https:"==location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.agent=e.agent||!1,this.hostname=e.hostname||(n.location?location.hostname:"localhost"),this.port=e.port||(n.location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},"string"==typeof this.query&&(this.query=h.decode(this.query)),this.upgrade=!1!==e.upgrade,this.path=(e.path||"/engine.io").replace(/\\/$/,"")+"/",this.forceJSONP=!!e.forceJSONP,this.jsonp=!1!==e.jsonp,this.forceBase64=!!e.forceBase64,this.enablesXDR=!!e.enablesXDR,this.timestampParam=e.timestampParam||"t",this.timestampRequests=e.timestampRequests,this.transports=e.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.policyPort=e.policyPort||843,this.rememberUpgrade=e.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=e.onlyBinaryUpgrades,this.perMessageDeflate=!1!==e.perMessageDeflate?e.perMessageDeflate||{}:!1,!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=e.pfx||null,this.key=e.key||null,this.passphrase=e.passphrase||null,this.cert=e.cert||null,this.ca=e.ca||null,this.ciphers=e.ciphers||null,this.rejectUnauthorized=void 0===e.rejectUnauthorized?!0:e.rejectUnauthorized;var o="object"==typeof n&&n;o.global===o&&e.extraHeaders&&Object.keys(e.extraHeaders).length>0&&(this.extraHeaders=e.extraHeaders),this.open()}function o(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}var i=t("./transports"),s=t("component-emitter"),a=t("debug")("engine.io-client:socket"),c=t("indexof"),p=t("engine.io-parser"),u=t("parseuri"),f=t("parsejson"),h=t("parseqs");e.exports=r,r.priorWebsocketSuccess=!1,s(r.prototype),r.protocol=p.protocol,r.Socket=r,r.Transport=t("./transport"),r.transports=t("./transports"),r.parser=t("engine.io-parser"),r.prototype.createTransport=function(t){a('creating transport "%s"',t);var e=o(this.query);e.EIO=p.protocol,e.transport=t,this.id&&(e.sid=this.id);var n=new i[t]({agent:this.agent,hostname:this.hostname,port:this.port,secure:this.secure,path:this.path,query:e,forceJSONP:this.forceJSONP,jsonp:this.jsonp,forceBase64:this.forceBase64,enablesXDR:this.enablesXDR,timestampRequests:this.timestampRequests,timestampParam:this.timestampParam,policyPort:this.policyPort,socket:this,pfx:this.pfx,key:this.key,passphrase:this.passphrase,cert:this.cert,ca:this.ca,ciphers:this.ciphers,rejectUnauthorized:this.rejectUnauthorized,perMessageDeflate:this.perMessageDeflate,extraHeaders:this.extraHeaders});return n},r.prototype.open=function(){var t;if(this.rememberUpgrade&&r.priorWebsocketSuccess&&-1!=this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout(function(){e.emit("error","No transports available")},0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(n){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},r.prototype.setTransport=function(t){a("setting transport %s",t.name);var e=this;this.transport&&(a("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",function(){e.onDrain()}).on("packet",function(t){e.onPacket(t)}).on("error",function(t){e.onError(t)}).on("close",function(){e.onClose("transport close")})},r.prototype.probe=function(t){function e(){if(h.onlyBinaryUpgrades){var e=!this.supportsBinary&&h.transport.supportsBinary;f=f||e}f||(a('probe transport "%s" opened',t),u.send([{type:"ping",data:"probe"}]),u.once("packet",function(e){if(!f)if("pong"==e.type&&"probe"==e.data){if(a('probe transport "%s" pong',t),h.upgrading=!0,h.emit("upgrading",u),!u)return;r.priorWebsocketSuccess="websocket"==u.name,a('pausing current transport "%s"',h.transport.name),h.transport.pause(function(){f||"closed"!=h.readyState&&(a("changing transport and sending upgrade packet"),p(),h.setTransport(u),u.send([{type:"upgrade"}]),h.emit("upgrade",u),u=null,h.upgrading=!1,h.flush())})}else{a('probe transport "%s" failed',t);var n=new Error("probe error");n.transport=u.name,h.emit("upgradeError",n)}}))}function n(){f||(f=!0,p(),u.close(),u=null)}function o(e){var r=new Error("probe error: "+e);r.transport=u.name,n(),a('probe transport "%s" failed because of error: %s',t,e),h.emit("upgradeError",r)}function i(){o("transport closed")}function s(){o("socket closed")}function c(t){u&&t.name!=u.name&&(a('"%s" works - aborting "%s"',t.name,u.name),n())}function p(){u.removeListener("open",e),u.removeListener("error",o),u.removeListener("close",i),h.removeListener("close",s),h.removeListener("upgrading",c)}a('probing transport "%s"',t);var u=this.createTransport(t,{probe:1}),f=!1,h=this;r.priorWebsocketSuccess=!1,u.once("open",e),u.once("error",o),u.once("close",i),this.once("close",s),this.once("upgrading",c),u.open()},r.prototype.onOpen=function(){if(a("socket open"),this.readyState="open",r.priorWebsocketSuccess="websocket"==this.transport.name,this.emit("open"),this.flush(),"open"==this.readyState&&this.upgrade&&this.transport.pause){a("starting upgrade probes");for(var t=0,e=this.upgrades.length;e>t;t++)this.probe(this.upgrades[t])}},r.prototype.onPacket=function(t){if("opening"==this.readyState||"open"==this.readyState)switch(a('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(f(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else a('packet received with socket readyState "%s"',this.readyState)},r.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!=this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},r.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout(function(){"closed"!=e.readyState&&e.onClose("ping timeout")},t||e.pingInterval+e.pingTimeout)},r.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout(function(){a("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)},t.pingInterval)},r.prototype.ping=function(){var t=this;this.sendPacket("ping",function(){t.emit("ping")})},r.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},r.prototype.flush=function(){"closed"!=this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(a("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},r.prototype.write=r.prototype.send=function(t,e,n){return this.sendPacket("message",t,e,n),this},r.prototype.sendPacket=function(t,e,n,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof n&&(r=n,n=null),"closing"!=this.readyState&&"closed"!=this.readyState){n=n||{},n.compress=!1!==n.compress;var o={type:t,data:e,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},r.prototype.close=function(){function t(){r.onClose("forced close"),a("socket closing - telling transport to close"),r.transport.close()}function e(){r.removeListener("upgrade",e),r.removeListener("upgradeError",e),t()}function n(){r.once("upgrade",e),r.once("upgradeError",e)}if("opening"==this.readyState||"open"==this.readyState){this.readyState="closing";var r=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?n():t()}):this.upgrading?n():t()}return this},r.prototype.onError=function(t){a("socket error %j",t),r.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},r.prototype.onClose=function(t,e){if("opening"==this.readyState||"open"==this.readyState||"closing"==this.readyState){a('socket close with reason: "%s"',t);var n=this;clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),n.writeBuffer=[],n.prevBufferLen=0}},r.prototype.filterUpgrades=function(t){for(var e=[],n=0,r=t.length;r>n;n++)~c(this.transports,t[n])&&e.push(t[n]);return e}}).call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})},{"./transport":19,"./transports":20,"component-emitter":26,debug:14,"engine.io-parser":27,indexof:32,parsejson:36,parseqs:37,parseuri:38}],19:[function(t,e,n){function r(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders}var o=t("engine.io-parser"),i=t("component-emitter");e.exports=r,i(r.prototype),r.prototype.onError=function(t,e){var n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this},r.prototype.open=function(){return"closed"!=this.readyState&&""!=this.readyState||(this.readyState="opening",this.doOpen()),this},r.prototype.close=function(){return"opening"!=this.readyState&&"open"!=this.readyState||(this.doClose(),this.onClose()),this},r.prototype.send=function(t){if("open"!=this.readyState)throw new Error("Transport not open");this.write(t)},r.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},r.prototype.onData=function(t){var e=o.decodePacket(t,this.socket.binaryType);this.onPacket(e)},r.prototype.onPacket=function(t){this.emit("packet",t)},r.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},{"component-emitter":26,"engine.io-parser":27}],20:[function(t,e,n){(function(e){function r(t){var n,r=!1,a=!1,c=!1!==t.jsonp;if(e.location){var p="https:"==location.protocol,u=location.port;u||(u=p?443:80),r=t.hostname!=location.hostname||u!=t.port,a=t.secure!=p}if(t.xdomain=r,t.xscheme=a,n=new o(t),"open"in n&&!t.forceJSONP)return new i(t);if(!c)throw new Error("JSONP disabled");return new s(t)}var o=t("xmlhttprequest-ssl"),i=t("./polling-xhr"),s=t("./polling-jsonp"),a=t("./websocket");n.polling=r,n.websocket=a}).call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})},{"./polling-jsonp":21,"./polling-xhr":22,"./websocket":24,"xmlhttprequest-ssl":25}],21:[function(t,e,n){(function(n){function r(){}function o(t){i.call(this,t),this.query=this.query||{},a||(n.___eio||(n.___eio=[]),a=n.___eio),this.index=a.length;var e=this;a.push(function(t){e.onData(t)}),this.query.j=this.index,n.document&&n.addEventListener&&n.addEventListener("beforeunload",function(){e.script&&(e.script.onerror=r)},!1)}var i=t("./polling"),s=t("component-inherit");e.exports=o;var a,c=/\\n/g,p=/\\\\n/g;s(o,i),o.prototype.supportsBinary=!1,o.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),i.prototype.doClose.call(this)},o.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(e,n):(document.head||document.body).appendChild(e),\nthis.script=e;var r="undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent);r&&setTimeout(function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)},100)},o.prototype.doWrite=function(t,e){function n(){r(),e()}function r(){if(o.iframe)try{o.form.removeChild(o.iframe)}catch(t){o.onError("jsonp polling iframe removal error",t)}try{var e='<iframe src="javascript:0" name="'+o.iframeId+'">';i=document.createElement(e)}catch(t){i=document.createElement("iframe"),i.name=o.iframeId,i.src="javascript:0"}i.id=o.iframeId,o.form.appendChild(i),o.iframe=i}var o=this;if(!this.form){var i,s=document.createElement("form"),a=document.createElement("textarea"),u=this.iframeId="eio_iframe_"+this.index;s.className="socketio",s.style.position="absolute",s.style.top="-1000px",s.style.left="-1000px",s.target=u,s.method="POST",s.setAttribute("accept-charset","utf-8"),a.name="d",s.appendChild(a),document.body.appendChild(s),this.form=s,this.area=a}this.form.action=this.uri(),r(),t=t.replace(p,"\\\\\\n"),this.area.value=t.replace(c,"\\\\n");try{this.form.submit()}catch(f){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"==o.iframe.readyState&&n()}:this.iframe.onload=n}}).call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})},{"./polling":23,"component-inherit":13}],22:[function(t,e,n){(function(n){function r(){}function o(t){if(c.call(this,t),n.location){var e="https:"==location.protocol,r=location.port;r||(r=e?443:80),this.xd=t.hostname!=n.location.hostname||r!=t.port,this.xs=t.secure!=e}else this.extraHeaders=t.extraHeaders}function i(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!=t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}function s(){for(var t in i.requests)i.requests.hasOwnProperty(t)&&i.requests[t].abort()}var a=t("xmlhttprequest-ssl"),c=t("./polling"),p=t("component-emitter"),u=t("component-inherit"),f=t("debug")("engine.io-client:polling-xhr");e.exports=o,e.exports.Request=i,u(o,c),o.prototype.supportsBinary=!0,o.prototype.request=function(t){return t=t||{},t.uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.extraHeaders=this.extraHeaders,new i(t)},o.prototype.doWrite=function(t,e){var n="string"!=typeof t&&void 0!==t,r=this.request({method:"POST",data:t,isBinary:n}),o=this;r.on("success",e),r.on("error",function(t){o.onError("xhr post error",t)}),this.sendXhr=r},o.prototype.doPoll=function(){f("xhr poll");var t=this.request(),e=this;t.on("data",function(t){e.onData(t)}),t.on("error",function(t){e.onError("xhr poll error",t)}),this.pollXhr=t},p(i.prototype),i.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new a(t),r=this;try{f("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders){e.setDisableHeaderCheck(!0);for(var o in this.extraHeaders)this.extraHeaders.hasOwnProperty(o)&&e.setRequestHeader(o,this.extraHeaders[o])}}catch(s){}if(this.supportsBinary&&(e.responseType="arraybuffer"),"POST"==this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(s){}"withCredentials"in e&&(e.withCredentials=!0),this.hasXDR()?(e.onload=function(){r.onLoad()},e.onerror=function(){r.onError(e.responseText)}):e.onreadystatechange=function(){4==e.readyState&&(200==e.status||1223==e.status?r.onLoad():setTimeout(function(){r.onError(e.status)},0))},f("xhr data %s",this.data),e.send(this.data)}catch(s){return void setTimeout(function(){r.onError(s)},0)}n.document&&(this.index=i.requestsCount++,i.requests[this.index]=this)},i.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},i.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},i.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},i.prototype.cleanup=function(t){if("undefined"!=typeof this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=r:this.xhr.onreadystatechange=r,t)try{this.xhr.abort()}catch(e){}n.document&&delete i.requests[this.index],this.xhr=null}},i.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type").split(";")[0]}catch(n){}if("application/octet-stream"===e)t=this.xhr.response;else if(this.supportsBinary)try{t=String.fromCharCode.apply(null,new Uint8Array(this.xhr.response))}catch(n){for(var r=new Uint8Array(this.xhr.response),o=[],i=0,s=r.length;s>i;i++)o.push(r[i]);t=String.fromCharCode.apply(null,o)}else t=this.xhr.responseText}catch(n){this.onError(n)}null!=t&&this.onData(t)},i.prototype.hasXDR=function(){return"undefined"!=typeof n.XDomainRequest&&!this.xs&&this.enablesXDR},i.prototype.abort=function(){this.cleanup()},n.document&&(i.requestsCount=0,i.requests={},n.attachEvent?n.attachEvent("onunload",s):n.addEventListener&&n.addEventListener("beforeunload",s,!1))}).call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})},{"./polling":23,"component-emitter":26,"component-inherit":13,debug:14,"xmlhttprequest-ssl":25}],23:[function(t,e,n){function r(t){var e=t&&t.forceBase64;u&&!e||(this.supportsBinary=!1),o.call(this,t)}var o=t("../transport"),i=t("parseqs"),s=t("engine.io-parser"),a=t("component-inherit"),c=t("yeast"),p=t("debug")("engine.io-client:polling");e.exports=r;var u=function(){var e=t("xmlhttprequest-ssl"),n=new e({xdomain:!1});return null!=n.responseType}();a(r,o),r.prototype.name="polling",r.prototype.doOpen=function(){this.poll()},r.prototype.pause=function(t){function e(){p("paused"),n.readyState="paused",t()}var n=this;if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(p("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){p("pre-pause polling complete"),--r||e()})),this.writable||(p("we are currently writing - waiting to pause"),r++,this.once("drain",function(){p("pre-pause writing complete"),--r||e()}))}else e()},r.prototype.poll=function(){p("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},r.prototype.onData=function(t){var e=this;p("polling got data %s",t);var n=function(t,n,r){return"opening"==e.readyState&&e.onOpen(),"close"==t.type?(e.onClose(),!1):void e.onPacket(t)};s.decodePayload(t,this.socket.binaryType,n),"closed"!=this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"==this.readyState?this.poll():p('ignoring poll - transport state "%s"',this.readyState))},r.prototype.doClose=function(){function t(){p("writing close packet"),e.write([{type:"close"}])}var e=this;"open"==this.readyState?(p("transport open - closing"),t()):(p("transport not open - deferring close"),this.once("open",t))},r.prototype.write=function(t){var e=this;this.writable=!1;var n=function(){e.writable=!0,e.emit("drain")},e=this;s.encodePayload(t,this.supportsBinary,function(t){e.doWrite(t,n)})},r.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",n="";!1!==this.timestampRequests&&(t[this.timestampParam]=c()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.port&&("https"==e&&443!=this.port||"http"==e&&80!=this.port)&&(n=":"+this.port),t.length&&(t="?"+t);var r=-1!==this.hostname.indexOf(":");return e+"://"+(r?"["+this.hostname+"]":this.hostname)+n+this.path+t}},{"../transport":19,"component-inherit":13,debug:14,"engine.io-parser":27,parseqs:37,"xmlhttprequest-ssl":25,yeast:45}],24:[function(t,e,n){(function(n){function r(t){var e=t&&t.forceBase64;e&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,o.call(this,t)}var o=t("../transport"),i=t("engine.io-parser"),s=t("parseqs"),a=t("component-inherit"),c=t("yeast"),p=t("debug")("engine.io-client:websocket"),u=n.WebSocket||n.MozWebSocket,f=u;if(!f&&"undefined"==typeof window)try{f=t("ws")}catch(h){}e.exports=r,a(r,o),r.prototype.name="websocket",r.prototype.supportsBinary=!0,r.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=void 0,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.ws=u?new f(t):new f(t,e,n),void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="buffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},r.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},"undefined"!=typeof navigator&&/iPad|iPhone|iPod/i.test(navigator.userAgent)&&(r.prototype.onData=function(t){var e=this;setTimeout(function(){o.prototype.onData.call(e,t)},0)}),r.prototype.write=function(t){function e(){r.emit("flush"),setTimeout(function(){r.writable=!0,r.emit("drain")},0)}var r=this;this.writable=!1;for(var o=t.length,s=0,a=o;a>s;s++)!function(t){i.encodePacket(t,r.supportsBinary,function(i){if(!u){var s={};if(t.options&&(s.compress=t.options.compress),r.perMessageDeflate){var a="string"==typeof i?n.Buffer.byteLength(i):i.length;a<r.perMessageDeflate.threshold&&(s.compress=!1)}}try{u?r.ws.send(i):r.ws.send(i,s)}catch(c){p("websocket closed before onclose event")}--o||e()})}(t[s])},r.prototype.onClose=function(){o.prototype.onClose.call(this)},r.prototype.doClose=function(){"undefined"!=typeof this.ws&&this.ws.close()},r.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",n="";this.port&&("wss"==e&&443!=this.port||"ws"==e&&80!=this.port)&&(n=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=c()),this.supportsBinary||(t.b64=1),t=s.encode(t),t.length&&(t="?"+t);var r=-1!==this.hostname.indexOf(":");return e+"://"+(r?"["+this.hostname+"]":this.hostname)+n+this.path+t},r.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===r.prototype.name)}}).call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})},{"../transport":19,"component-inherit":13,debug:14,"engine.io-parser":27,parseqs:37,ws:void 0,yeast:45}],25:[function(t,e,n){var r=t("has-cors");e.exports=function(t){var e=t.xdomain,n=t.xscheme,o=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||r))return new XMLHttpRequest}catch(i){}try{if("undefined"!=typeof XDomainRequest&&!n&&o)return new XDomainRequest}catch(i){}if(!e)try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(i){}}},{"has-cors":31}],26:[function(t,e,n){function r(t){return t?o(t):void 0}function o(t){for(var e in r.prototype)t[e]=r.prototype[e];return t}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks[t]=this._callbacks[t]||[]).push(e),this},r.prototype.once=function(t,e){function n(){r.off(t,n),e.apply(this,arguments)}var r=this;return this._callbacks=this._callbacks||{},n.fn=e,this.on(t,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n=this._callbacks[t];if(!n)return this;if(1==arguments.length)return delete this._callbacks[t],this;for(var r,o=0;o<n.length;o++)if(r=n[o],r===e||r.fn===e){n.splice(o,1);break}return this},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks[t];if(n){n=n.slice(0);for(var r=0,o=n.length;o>r;++r)n[r].apply(this,e)}return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks[t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length}},{}],27:[function(t,e,n){(function(e){function r(t,e){var r="b"+n.packets[t.type]+t.data.data;return e(r)}function o(t,e,r){if(!e)return n.encodeBase64Packet(t,r);var o=t.data,i=new Uint8Array(o),s=new Uint8Array(1+o.byteLength);s[0]=m[t.type];for(var a=0;a<i.length;a++)s[a+1]=i[a];return r(s.buffer)}function i(t,e,r){if(!e)return n.encodeBase64Packet(t,r);var o=new FileReader;return o.onload=function(){t.data=o.result,n.encodePacket(t,e,!0,r)},o.readAsArrayBuffer(t.data)}function s(t,e,r){if(!e)return n.encodeBase64Packet(t,r);if(g)return i(t,e,r);var o=new Uint8Array(1);o[0]=m[t.type];var s=new w([o.buffer,t.data]);return r(s)}function a(t,e,n){for(var r=new Array(t.length),o=h(t.length,n),i=function(t,n,o){e(n,function(e,n){r[t]=n,o(e,r)})},s=0;s<t.length;s++)i(s,t[s],o)}var c=t("./keys"),p=t("has-binary"),u=t("arraybuffer.slice"),f=t("base64-arraybuffer"),h=t("after"),l=t("utf8"),d=navigator.userAgent.match(/Android/i),y=/PhantomJS/i.test(navigator.userAgent),g=d||y;n.protocol=3;var m=n.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},b=c(m),v={type:"error",data:"parser error"},w=t("blob");n.encodePacket=function(t,n,i,a){"function"==typeof n&&(a=n,n=!1),"function"==typeof i&&(a=i,i=null);var c=void 0===t.data?void 0:t.data.buffer||t.data;if(e.ArrayBuffer&&c instanceof ArrayBuffer)return o(t,n,a);if(w&&c instanceof e.Blob)return s(t,n,a);if(c&&c.base64)return r(t,a);var p=m[t.type];return void 0!==t.data&&(p+=i?l.encode(String(t.data)):String(t.data)),a(""+p)},n.encodeBase64Packet=function(t,r){var o="b"+n.packets[t.type];if(w&&t.data instanceof e.Blob){var i=new FileReader;return i.onload=function(){var t=i.result.split(",")[1];r(o+t)},i.readAsDataURL(t.data)}var s;try{s=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(a){for(var c=new Uint8Array(t.data),p=new Array(c.length),u=0;u<c.length;u++)p[u]=c[u];s=String.fromCharCode.apply(null,p)}return o+=e.btoa(s),r(o)},n.decodePacket=function(t,e,r){if("string"==typeof t||void 0===t){if("b"==t.charAt(0))return n.decodeBase64Packet(t.substr(1),e);if(r)try{t=l.decode(t)}catch(o){return v}var i=t.charAt(0);return Number(i)==i&&b[i]?t.length>1?{type:b[i],data:t.substring(1)}:{type:b[i]}:v}var s=new Uint8Array(t),i=s[0],a=u(t,1);return w&&"blob"===e&&(a=new w([a])),{type:b[i],data:a}},n.decodeBase64Packet=function(t,n){var r=b[t.charAt(0)];if(!e.ArrayBuffer)return{type:r,data:{base64:!0,data:t.substr(1)}};var o=f.decode(t.substr(1));return"blob"===n&&w&&(o=new w([o])),{type:r,data:o}},n.encodePayload=function(t,e,r){function o(t){return t.length+":"+t}function i(t,r){n.encodePacket(t,s?e:!1,!0,function(t){r(null,o(t))})}"function"==typeof e&&(r=e,e=null);var s=p(t);return e&&s?w&&!g?n.encodePayloadAsBlob(t,r):n.encodePayloadAsArrayBuffer(t,r):t.length?void a(t,i,function(t,e){return r(e.join(""))}):r("0:")},n.decodePayload=function(t,e,r){if("string"!=typeof t)return n.decodePayloadAsBinary(t,e,r);"function"==typeof e&&(r=e,e=null);var o;if(""==t)return r(v,0,1);for(var i,s,a="",c=0,p=t.length;p>c;c++){var u=t.charAt(c);if(":"!=u)a+=u;else{if(""==a||a!=(i=Number(a)))return r(v,0,1);if(s=t.substr(c+1,i),a!=s.length)return r(v,0,1);if(s.length){if(o=n.decodePacket(s,e,!0),v.type==o.type&&v.data==o.data)return r(v,0,1);var f=r(o,c+i,p);if(!1===f)return}c+=i,a=""}}return""!=a?r(v,0,1):void 0},n.encodePayloadAsArrayBuffer=function(t,e){function r(t,e){n.encodePacket(t,!0,!0,function(t){return e(null,t)})}return t.length?void a(t,r,function(t,n){var r=n.reduce(function(t,e){var n;return n="string"==typeof e?e.length:e.byteLength,t+n.toString().length+n+2},0),o=new Uint8Array(r),i=0;return n.forEach(function(t){var e="string"==typeof t,n=t;if(e){for(var r=new Uint8Array(t.length),s=0;s<t.length;s++)r[s]=t.charCodeAt(s);n=r.buffer}e?o[i++]=0:o[i++]=1;for(var a=n.byteLength.toString(),s=0;s<a.length;s++)o[i++]=parseInt(a[s]);o[i++]=255;for(var r=new Uint8Array(n),s=0;s<r.length;s++)o[i++]=r[s]}),e(o.buffer)}):e(new ArrayBuffer(0))},n.encodePayloadAsBlob=function(t,e){function r(t,e){n.encodePacket(t,!0,!0,function(t){var n=new Uint8Array(1);if(n[0]=1,"string"==typeof t){for(var r=new Uint8Array(t.length),o=0;o<t.length;o++)r[o]=t.charCodeAt(o);t=r.buffer,n[0]=0}for(var i=t instanceof ArrayBuffer?t.byteLength:t.size,s=i.toString(),a=new Uint8Array(s.length+1),o=0;o<s.length;o++)a[o]=parseInt(s[o]);if(a[s.length]=255,w){var c=new w([n.buffer,a.buffer,t]);e(null,c)}})}a(t,r,function(t,n){return e(new w(n))})},n.decodePayloadAsBinary=function(t,e,r){"function"==typeof e&&(r=e,e=null);for(var o=t,i=[],s=!1;o.byteLength>0;){for(var a=new Uint8Array(o),c=0===a[0],p="",f=1;255!=a[f];f++){if(p.length>310){s=!0;break}p+=a[f]}if(s)return r(v,0,1);o=u(o,2+p.length),p=parseInt(p);var h=u(o,0,p);if(c)try{h=String.fromCharCode.apply(null,new Uint8Array(h))}catch(l){var d=new Uint8Array(h);h="";for(var f=0;f<d.length;f++)h+=String.fromCharCode(d[f])}i.push(h),o=u(o,p)}var y=i.length;i.forEach(function(t,o){r(n.decodePacket(t,e,!0),o,y)})}}).call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})},{"./keys":28,after:6,"arraybuffer.slice":7,"base64-arraybuffer":9,blob:10,"has-binary":29,utf8:44}],28:[function(t,e,n){e.exports=Object.keys||function(t){var e=[],n=Object.prototype.hasOwnProperty;for(var r in t)n.call(t,r)&&e.push(r);return e}},{}],29:[function(t,e,n){(function(n){function r(t){function e(t){if(!t)return!1;if(n.Buffer&&n.Buffer.isBuffer(t)||n.ArrayBuffer&&t instanceof ArrayBuffer||n.Blob&&t instanceof Blob||n.File&&t instanceof File)return!0;if(o(t)){for(var r=0;r<t.length;r++)if(e(t[r]))return!0}else if(t&&"object"==typeof t){t.toJSON&&(t=t.toJSON());for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)&&e(t[i]))return!0}return!1}return e(t)}var o=t("isarray");e.exports=r}).call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})},{isarray:33}],30:[function(t,e,n){(function(n){function r(t){function e(t){if(!t)return!1;if(n.Buffer&&n.Buffer.isBuffer&&n.Buffer.isBuffer(t)||n.ArrayBuffer&&t instanceof ArrayBuffer||n.Blob&&t instanceof Blob||n.File&&t instanceof File)return!0;if(o(t)){for(var r=0;r<t.length;r++)if(e(t[r]))return!0}else if(t&&"object"==typeof t){t.toJSON&&"function"==typeof t.toJSON&&(t=t.toJSON());for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)&&e(t[i]))return!0}return!1}return e(t)}var o=t("isarray");e.exports=r}).call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})},{isarray:33}],31:[function(t,e,n){try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(r){e.exports=!1}},{}],32:[function(t,e,n){var r=[].indexOf;e.exports=function(t,e){if(r)return t.indexOf(e);for(var n=0;n<t.length;++n)if(t[n]===e)return n;return-1}},{}],33:[function(t,e,n){e.exports=Array.isArray||function(t){return"[object Array]"==Object.prototype.toString.call(t)}},{}],34:[function(e,n,r){(function(e){(function(){function o(t,e){function n(t){if(n[t]!==g)return n[t];var o;if("bug-string-char-index"==t)o="a"!="a"[0];else if("json"==t)o=n("json-stringify")&&n("json-parse");else{var s,a='{"a":[1,true,false,null,"\\\\u0000\\\\b\\\\n\\\\f\\\\r\\\\t"]}';if("json-stringify"==t){var c=e.stringify,u="function"==typeof c&&v;if(u){(s=function(){return 1}).toJSON=s;try{u="0"===c(0)&&"0"===c(new r)&&'""'==c(new i)&&c(b)===g&&c(g)===g&&c()===g&&"1"===c(s)&&"[1]"==c([s])&&"[null]"==c([g])&&"null"==c(null)&&"[null,null,null]"==c([g,b,null])&&c({a:[s,!0,!1,null,"\\x00\\b\\n\\f\\r\t"]})==a&&"1"===c(null,s)&&"[\\n 1,\\n 2\\n]"==c([1,2],null,1)&&'"-271821-04-20T00:00:00.000Z"'==c(new p(-864e13))&&'"+275760-09-13T00:00:00.000Z"'==c(new p(864e13))&&'"-000001-01-01T00:00:00.000Z"'==c(new p(-621987552e5))&&'"1969-12-31T23:59:59.999Z"'==c(new p(-1))}catch(f){u=!1}}o=u}if("json-parse"==t){var h=e.parse;if("function"==typeof h)try{if(0===h("0")&&!h(!1)){s=h(a);var l=5==s.a.length&&1===s.a[0];if(l){try{l=!h('"\t"')}catch(f){}if(l)try{l=1!==h("01")}catch(f){}if(l)try{l=1!==h("1.")}catch(f){}}}}catch(f){l=!1}o=l}}return n[t]=!!o}t||(t=c.Object()),e||(e=c.Object());var r=t.Number||c.Number,i=t.String||c.String,a=t.Object||c.Object,p=t.Date||c.Date,u=t.SyntaxError||c.SyntaxError,f=t.TypeError||c.TypeError,h=t.Math||c.Math,l=t.JSON||c.JSON;"object"==typeof l&&l&&(e.stringify=l.stringify,e.parse=l.parse);var d,y,g,m=a.prototype,b=m.toString,v=new p(-0xc782b5b800cec);try{v=-109252==v.getUTCFullYear()&&0===v.getUTCMonth()&&1===v.getUTCDate()&&10==v.getUTCHours()&&37==v.getUTCMinutes()&&6==v.getUTCSeconds()&&708==v.getUTCMilliseconds()}catch(w){}if(!n("json")){var k="[object Function]",x="[object Date]",A="[object Number]",B="[object String]",C="[object Array]",S="[object Boolean]",E=n("bug-string-char-index");if(!v)var _=h.floor,T=[0,31,59,90,120,151,181,212,243,273,304,334],j=function(t,e){return T[e]+365*(t-1970)+_((t-1969+(e=+(e>1)))/4)-_((t-1901+e)/100)+_((t-1601+e)/400)};if((d=m.hasOwnProperty)||(d=function(t){var e,n={};return(n.__proto__=null,n.__proto__={toString:1},n).toString!=b?d=function(t){var e=this.__proto__,n=t in(this.__proto__=null,this);return this.__proto__=e,n}:(e=n.constructor,d=function(t){var n=(this.constructor||e).prototype;return t in this&&!(t in n&&this[t]===n[t])}),n=null,d.call(this,t)}),y=function(t,e){var n,r,o,i=0;(n=function(){this.valueOf=0}).prototype.valueOf=0,r=new n;for(o in r)d.call(r,o)&&i++;return n=r=null,i?y=2==i?function(t,e){var n,r={},o=b.call(t)==k;for(n in t)o&&"prototype"==n||d.call(r,n)||!(r[n]=1)||!d.call(t,n)||e(n)}:function(t,e){var n,r,o=b.call(t)==k;for(n in t)o&&"prototype"==n||!d.call(t,n)||(r="constructor"===n)||e(n);(r||d.call(t,n="constructor"))&&e(n)}:(r=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],y=function(t,e){var n,o,i=b.call(t)==k,a=!i&&"function"!=typeof t.constructor&&s[typeof t.hasOwnProperty]&&t.hasOwnProperty||d;for(n in t)i&&"prototype"==n||!a.call(t,n)||e(n);for(o=r.length;n=r[--o];a.call(t,n)&&e(n));}),y(t,e)},!n("json-stringify")){var O={92:"\\\\\\\\",34:'\\\\"',8:"\\\\b",12:"\\\\f",10:"\\\\n",13:"\\\\r",9:"\\\\t"},P="000000",N=function(t,e){return(P+(e||0)).slice(-t)},R="\\\\u00",D=function(t){for(var e='"',n=0,r=t.length,o=!E||r>10,i=o&&(E?t.split(""):t);r>n;n++){var s=t.charCodeAt(n);switch(s){case 8:case 9:case 10:case 12:case 13:case 34:case 92:e+=O[s];break;default:if(32>s){e+=R+N(2,s.toString(16));break}e+=o?i[n]:t.charAt(n)}}return e+'"'},U=function(t,e,n,r,o,i,s){var a,c,p,u,h,l,m,v,w,k,E,T,O,P,R,q;try{a=e[t]}catch(L){}if("object"==typeof a&&a)if(c=b.call(a),c!=x||d.call(a,"toJSON"))"function"==typeof a.toJSON&&(c!=A&&c!=B&&c!=C||d.call(a,"toJSON"))&&(a=a.toJSON(t));else if(a>-1/0&&1/0>a){if(j){for(h=_(a/864e5),p=_(h/365.2425)+1970-1;j(p+1,0)<=h;p++);for(u=_((h-j(p,0))/30.42);j(p,u+1)<=h;u++);h=1+h-j(p,u),l=(a%864e5+864e5)%864e5,m=_(l/36e5)%24,v=_(l/6e4)%60,w=_(l/1e3)%60,k=l%1e3}else p=a.getUTCFullYear(),u=a.getUTCMonth(),h=a.getUTCDate(),m=a.getUTCHours(),v=a.getUTCMinutes(),w=a.getUTCSeconds(),k=a.getUTCMilliseconds();a=(0>=p||p>=1e4?(0>p?"-":"+")+N(6,0>p?-p:p):N(4,p))+"-"+N(2,u+1)+"-"+N(2,h)+"T"+N(2,m)+":"+N(2,v)+":"+N(2,w)+"."+N(3,k)+"Z"}else a=null;if(n&&(a=n.call(e,t,a)),null===a)return"null";if(c=b.call(a),c==S)return""+a;if(c==A)return a>-1/0&&1/0>a?""+a:"null";if(c==B)return D(""+a);if("object"==typeof a){for(P=s.length;P--;)if(s[P]===a)throw f();if(s.push(a),E=[],R=i,i+=o,c==C){for(O=0,P=a.length;P>O;O++)T=U(O,a,n,r,o,i,s),E.push(T===g?"null":T);q=E.length?o?"[\\n"+i+E.join(",\\n"+i)+"\\n"+R+"]":"["+E.join(",")+"]":"[]"}else y(r||a,function(t){var e=U(t,a,n,r,o,i,s);e!==g&&E.push(D(t)+":"+(o?" ":"")+e)}),q=E.length?o?"{\\n"+i+E.join(",\\n"+i)+"\\n"+R+"}":"{"+E.join(",")+"}":"{}";return s.pop(),q}};e.stringify=function(t,e,n){var r,o,i,a;if(s[typeof e]&&e)if((a=b.call(e))==k)o=e;else if(a==C){i={};for(var c,p=0,u=e.length;u>p;c=e[p++],a=b.call(c),(a==B||a==A)&&(i[c]=1));}if(n)if((a=b.call(n))==A){if((n-=n%1)>0)for(r="",n>10&&(n=10);r.length<n;r+=" ");}else a==B&&(r=n.length<=10?n:n.slice(0,10));return U("",(c={},c[""]=t,c),o,i,r,"",[])}}if(!n("json-parse")){var q,L,M=i.fromCharCode,I={92:"\\\\",34:'"',47:"/",98:"\\b",116:"\t",110:"\\n",102:"\\f",114:"\\r"},H=function(){throw q=L=null,u()},z=function(){for(var t,e,n,r,o,i=L,s=i.length;s>q;)switch(o=i.charCodeAt(q)){case 9:case 10:case 13:case 32:q++;break;case 123:case 125:case 91:case 93:case 58:case 44:return t=E?i.charAt(q):i[q],q++,t;case 34:for(t="@",q++;s>q;)if(o=i.charCodeAt(q),32>o)H();else if(92==o)switch(o=i.charCodeAt(++q)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:t+=I[o],q++;break;case 117:for(e=++q,n=q+4;n>q;q++)o=i.charCodeAt(q),o>=48&&57>=o||o>=97&&102>=o||o>=65&&70>=o||H();t+=M("0x"+i.slice(e,q));break;default:H()}else{if(34==o)break;for(o=i.charCodeAt(q),e=q;o>=32&&92!=o&&34!=o;)o=i.charCodeAt(++q);t+=i.slice(e,q)}if(34==i.charCodeAt(q))return q++,t;H();default:if(e=q,45==o&&(r=!0,o=i.charCodeAt(++q)),o>=48&&57>=o){for(48==o&&(o=i.charCodeAt(q+1),o>=48&&57>=o)&&H(),r=!1;s>q&&(o=i.charCodeAt(q),o>=48&&57>=o);q++);if(46==i.charCodeAt(q)){for(n=++q;s>n&&(o=i.charCodeAt(n),o>=48&&57>=o);n++);n==q&&H(),q=n}if(o=i.charCodeAt(q),101==o||69==o){for(o=i.charCodeAt(++q),43!=o&&45!=o||q++,n=q;s>n&&(o=i.charCodeAt(n),o>=48&&57>=o);n++);n==q&&H(),q=n}return+i.slice(e,q)}if(r&&H(),"true"==i.slice(q,q+4))return q+=4,!0;if("false"==i.slice(q,q+5))return q+=5,!1;if("null"==i.slice(q,q+4))return q+=4,null;H()}return"$"},J=function(t){var e,n;if("$"==t&&H(),"string"==typeof t){if("@"==(E?t.charAt(0):t[0]))return t.slice(1);if("["==t){for(e=[];t=z(),"]"!=t;n||(n=!0))n&&(","==t?(t=z(),"]"==t&&H()):H()),","==t&&H(),e.push(J(t));return e}if("{"==t){for(e={};t=z(),"}"!=t;n||(n=!0))n&&(","==t?(t=z(),"}"==t&&H()):H()),","!=t&&"string"==typeof t&&"@"==(E?t.charAt(0):t[0])&&":"==z()||H(),e[t.slice(1)]=J(z());return e}H()}return t},X=function(t,e,n){var r=F(t,e,n);r===g?delete t[e]:t[e]=r},F=function(t,e,n){var r,o=t[e];if("object"==typeof o&&o)if(b.call(o)==C)for(r=o.length;r--;)X(o,r,n);else y(o,function(t){X(o,t,n)});return n.call(t,e,o)};e.parse=function(t,e){var n,r;return q=0,L=""+t,n=J(z()),"$"!=z()&&H(),q=L=null,e&&b.call(e)==k?F((r={},r[""]=n,r),"",e):n}}}return e.runInContext=o,e}var i="function"==typeof t&&t.amd,s={"function":!0,object:!0},a=s[typeof r]&&r&&!r.nodeType&&r,c=s[typeof window]&&window||this,p=a&&s[typeof n]&&n&&!n.nodeType&&"object"==typeof e&&e;if(!p||p.global!==p&&p.window!==p&&p.self!==p||(c=p),a&&!i)o(c,a);else{var u=c.JSON,f=c.JSON3,h=!1,l=o(c,c.JSON3={noConflict:function(){return h||(h=!0,c.JSON=u,c.JSON3=f,u=f=null),l}});c.JSON={parse:l.parse,stringify:l.stringify}}i&&t(function(){return l})}).call(this)}).call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})},{}],35:[function(t,e,n){function r(t){if(t=""+t,!(t.length>1e4)){var e=/^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(e){var n=parseFloat(e[1]),r=(e[2]||"ms").toLowerCase();switch(r){case"years":case"year":case"yrs":case"yr":case"y":return n*f;case"days":case"day":case"d":return n*u;case"hours":case"hour":case"hrs":case"hr":case"h":return n*p;case"minutes":case"minute":case"mins":case"min":case"m":return n*c;case"seconds":case"second":case"secs":case"sec":case"s":return n*a;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n}}}}function o(t){return t>=u?Math.round(t/u)+"d":t>=p?Math.round(t/p)+"h":t>=c?Math.round(t/c)+"m":t>=a?Math.round(t/a)+"s":t+"ms"}function i(t){return s(t,u,"day")||s(t,p,"hour")||s(t,c,"minute")||s(t,a,"second")||t+" ms"}function s(t,e,n){return e>t?void 0:1.5*e>t?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}var a=1e3,c=60*a,p=60*c,u=24*p,f=365.25*u;e.exports=function(t,e){return e=e||{},"string"==typeof t?r(t):e["long"]?i(t):o(t)}},{}],36:[function(t,e,n){(function(t){var n=/^[\\],:{}\\s]*$/,r=/\\\\(?:["\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g,o=/"[^"\\\\\\n\\r]*"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,i=/(?:^|:|,)(?:\\s*\\[)+/g,s=/^\\s+/,a=/\\s+$/;e.exports=function(e){return"string"==typeof e&&e?(e=e.replace(s,"").replace(a,""),t.JSON&&JSON.parse?JSON.parse(e):n.test(e.replace(r,"@").replace(o,"]").replace(i,""))?new Function("return "+e)():void 0):null}}).call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})},{}],37:[function(t,e,n){n.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},n.decode=function(t){for(var e={},n=t.split("&"),r=0,o=n.length;o>r;r++){var i=n[r].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}},{}],38:[function(t,e,n){var r=/^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/,o=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(t){var e=t,n=t.indexOf("["),i=t.indexOf("]");-1!=n&&-1!=i&&(t=t.substring(0,n)+t.substring(n,i).replace(/:/g,";")+t.substring(i,t.length));for(var s=r.exec(t||""),a={},c=14;c--;)a[o[c]]=s[c]||"";return-1!=n&&-1!=i&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},{}],39:[function(t,e,n){(function(e){var r=t("isarray"),o=t("./is-buffer");n.deconstructPacket=function(t){function e(t){if(!t)return t;if(o(t)){var i={_placeholder:!0,num:n.length};return n.push(t),i}if(r(t)){for(var s=new Array(t.length),a=0;a<t.length;a++)s[a]=e(t[a]);return s}if("object"==typeof t&&!(t instanceof Date)){var s={};for(var c in t)s[c]=e(t[c]);return s}return t}var n=[],i=t.data,s=t;return s.data=e(i),s.attachments=n.length,{packet:s,buffers:n}},n.reconstructPacket=function(t,e){function n(t){if(t&&t._placeholder){var o=e[t.num];return o}if(r(t)){for(var i=0;i<t.length;i++)t[i]=n(t[i]);return t}if(t&&"object"==typeof t){for(var s in t)t[s]=n(t[s]);return t}return t}return t.data=n(t.data),t.attachments=void 0,t},n.removeBlobs=function(t,n){function i(t,c,p){if(!t)return t;if(e.Blob&&t instanceof Blob||e.File&&t instanceof File){s++;var u=new FileReader;u.onload=function(){p?p[c]=this.result:a=this.result,--s||n(a)},u.readAsArrayBuffer(t)}else if(r(t))for(var f=0;f<t.length;f++)i(t[f],f,t);else if(t&&"object"==typeof t&&!o(t))for(var h in t)i(t[h],h,t)}var s=0,a=t;i(a),s||n(a)}}).call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})},{"./is-buffer":41,isarray:33}],40:[function(t,e,n){function r(){}function o(t){var e="",r=!1;return e+=t.type,n.BINARY_EVENT!=t.type&&n.BINARY_ACK!=t.type||(e+=t.attachments,e+="-"),t.nsp&&"/"!=t.nsp&&(r=!0,e+=t.nsp),null!=t.id&&(r&&(e+=",",r=!1),e+=t.id),null!=t.data&&(r&&(e+=","),e+=f.stringify(t.data)),u("encoded %j as %s",t,e),e}function i(t,e){function n(t){var n=l.deconstructPacket(t),r=o(n.packet),i=n.buffers;i.unshift(r),e(i)}l.removeBlobs(t,n)}function s(){this.reconstructor=null}function a(t){var e={},r=0;\nif(e.type=Number(t.charAt(0)),null==n.types[e.type])return p();if(n.BINARY_EVENT==e.type||n.BINARY_ACK==e.type){for(var o="";"-"!=t.charAt(++r)&&(o+=t.charAt(r),r!=t.length););if(o!=Number(o)||"-"!=t.charAt(r))throw new Error("Illegal attachments");e.attachments=Number(o)}if("/"==t.charAt(r+1))for(e.nsp="";++r;){var i=t.charAt(r);if(","==i)break;if(e.nsp+=i,r==t.length)break}else e.nsp="/";var s=t.charAt(r+1);if(""!==s&&Number(s)==s){for(e.id="";++r;){var i=t.charAt(r);if(null==i||Number(i)!=i){--r;break}if(e.id+=t.charAt(r),r==t.length)break}e.id=Number(e.id)}if(t.charAt(++r))try{e.data=f.parse(t.substr(r))}catch(a){return p()}return u("decoded %s as %j",t,e),e}function c(t){this.reconPack=t,this.buffers=[]}function p(t){return{type:n.ERROR,data:"parser error"}}var u=t("debug")("socket.io-parser"),f=t("json3"),h=(t("isarray"),t("component-emitter")),l=t("./binary"),d=t("./is-buffer");n.protocol=4,n.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],n.CONNECT=0,n.DISCONNECT=1,n.EVENT=2,n.ACK=3,n.ERROR=4,n.BINARY_EVENT=5,n.BINARY_ACK=6,n.Encoder=r,n.Decoder=s,r.prototype.encode=function(t,e){if(u("encoding packet %j",t),n.BINARY_EVENT==t.type||n.BINARY_ACK==t.type)i(t,e);else{var r=o(t);e([r])}},h(s.prototype),s.prototype.add=function(t){var e;if("string"==typeof t)e=a(t),n.BINARY_EVENT==e.type||n.BINARY_ACK==e.type?(this.reconstructor=new c(e),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",e)):this.emit("decoded",e);else{if(!d(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,this.emit("decoded",e))}},s.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},c.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length==this.reconPack.attachments){var e=l.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},c.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},{"./binary":39,"./is-buffer":41,"component-emitter":42,debug:14,isarray:33,json3:34}],41:[function(t,e,n){(function(t){function n(e){return t.Buffer&&t.Buffer.isBuffer(e)||t.ArrayBuffer&&e instanceof ArrayBuffer}e.exports=n}).call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})},{}],42:[function(t,e,n){arguments[4][26][0].apply(n,arguments)},{dup:26}],43:[function(t,e,n){function r(t,e){var n=[];e=e||0;for(var r=e||0;r<t.length;r++)n[r-e]=t[r];return n}e.exports=r},{}],44:[function(e,n,r){(function(e){!function(o){function i(t){for(var e,n,r=[],o=0,i=t.length;i>o;)e=t.charCodeAt(o++),e>=55296&&56319>=e&&i>o?(n=t.charCodeAt(o++),56320==(64512&n)?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),o--)):r.push(e);return r}function s(t){for(var e,n=t.length,r=-1,o="";++r<n;)e=t[r],e>65535&&(e-=65536,o+=w(e>>>10&1023|55296),e=56320|1023&e),o+=w(e);return o}function a(t){if(t>=55296&&57343>=t)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value")}function c(t,e){return w(t>>e&63|128)}function p(t){if(0==(4294967168&t))return w(t);var e="";return 0==(4294965248&t)?e=w(t>>6&31|192):0==(4294901760&t)?(a(t),e=w(t>>12&15|224),e+=c(t,6)):0==(4292870144&t)&&(e=w(t>>18&7|240),e+=c(t,12),e+=c(t,6)),e+=w(63&t|128)}function u(t){for(var e,n=i(t),r=n.length,o=-1,s="";++o<r;)e=n[o],s+=p(e);return s}function f(){if(v>=b)throw Error("Invalid byte index");var t=255&m[v];if(v++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function h(){var t,e,n,r,o;if(v>b)throw Error("Invalid byte index");if(v==b)return!1;if(t=255&m[v],v++,0==(128&t))return t;if(192==(224&t)){var e=f();if(o=(31&t)<<6|e,o>=128)return o;throw Error("Invalid continuation byte")}if(224==(240&t)){if(e=f(),n=f(),o=(15&t)<<12|e<<6|n,o>=2048)return a(o),o;throw Error("Invalid continuation byte")}if(240==(248&t)&&(e=f(),n=f(),r=f(),o=(15&t)<<18|e<<12|n<<6|r,o>=65536&&1114111>=o))return o;throw Error("Invalid UTF-8 detected")}function l(t){m=i(t),b=m.length,v=0;for(var e,n=[];(e=h())!==!1;)n.push(e);return s(n)}var d="object"==typeof r&&r,y="object"==typeof n&&n&&n.exports==d&&n,g="object"==typeof e&&e;g.global!==g&&g.window!==g||(o=g);var m,b,v,w=String.fromCharCode,k={version:"2.0.0",encode:u,decode:l};if("function"==typeof t&&"object"==typeof t.amd&&t.amd)t(function(){return k});else if(d&&!d.nodeType)if(y)y.exports=k;else{var x={},A=x.hasOwnProperty;for(var B in k)A.call(k,B)&&(d[B]=k[B])}else o.utf8=k}(this)}).call(this,"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})},{}],45:[function(t,e,n){"use strict";function r(t){var e="";do e=a[t%c]+e,t=Math.floor(t/c);while(t>0);return e}function o(t){var e=0;for(f=0;f<t.length;f++)e=e*c+p[t.charAt(f)];return e}function i(){var t=r(+new Date);return t!==s?(u=0,s=t):t+"."+r(u++)}for(var s,a="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),c=64,p={},u=0,f=0;c>f;f++)p[a[f]]=f;i.encode=r,i.decode=o,e.exports=i},{}]},{},[1])(1)});\n//# sourceMappingURL=socket.io.min.js.map
\\x8bfa1348d9d993224d61339ceacb3b3cc1dd8de48199ed7abdd3261ced6f6e72	c6ee47cd-e5ef-43c8-8f6e-bbd413fa25c6
\\x9c9220088565052d73fd15a8afe5757f12d49b27c76b6102417b1e08903ebbd8	/datum.js
\\x9f6a386b1bc9f74f0b30030f511f364f1cda4dd2264c933920934c5de4a81c21	("(""(endpoint)"",js_module)",code)
\\x9f793bddd3bb7fd657a71849a5bc3df9fa360554bd8d27d2ca3c4fbc5fe4c8e3	121e3962-4615-40af-868c-b5202f6c8959
\\xa74ebd485c81ac06535a16c542a2c2b7e50ce5984ec622bb5fd52cc1f140551b	/system.js
\\xb01fb591a298dc6e6b597e97d4f4f064a6d0db48bdedfed19a93c4e35222ad0f	/doT.min.js
\\xb18036488649e7cc8a55b0a02c8b737a87e157eaa35fe16b22cdcad6d1137e9b	/favicon.ico
\\xb5bea41b6c623f7c09f1bf24dcae58ebab3c0cdd90ad966bc43a45b44867e12b	true
\\xb7641698aee7a193a5d5668f4148a67ba9d3e73cc980286808a737b6e5f2306b	# TODO\n\n- AQ.Row.clone() is a mess.  You can insert a row only when it has a Row.relation.insert() method which only shows up when the row is retrieved using the `.row()` method, not the `.rows()` method.  You don't "insert" a relation so it shouldn't have an `insert()` method.  Figure out what to do here.  Also the value passed to `Relation.insert()` is not the row itself, but row.row_data or some such.\n- Move `widget.js` to the widget bundle.
\\xbb6ae2f051b63f9ba96c6f6eff1dcc7231f04c324ea078e85139af6f3756d997	85bf43c1-632e-44bd-b16c-12afa37fdcde
\\xbd37d14f4da6e36e857986ad8b2e595a8fb14838422fa2ec4d2e7edef4c3a3c1	6159ecb9-3821-4a57-8463-fab618da324b
\\xc489c523ea8bb60f34afd2f5634f00907398b8f963aa4fe71f542e3ae19205af	4148c198-0f3b-4ffd-bdf3-a048b014378a
\\xcb218518c86e9538f54d6562b2d09a2e8a1fd11dbb99b21c08ab600688c10356	0e0f1e42-ad32-4018-b1ca-74cacb29fde4
\\xcf92731d2e33804f8c43b123263db702c38a5d8e1eec50263e3fca7b3c98683c	23c42599-f152-4d88-bf2d-f9382053add9
\\xd356940339020d4f104d95963d729c50f4720e7bc9700b92cba628dcac375657	/*******************************************************************************\n * Datum.js\n *\n * Created by Aquameta Labs, an open source company in Portland Oregon, USA.\n * Company: http://aquameta.com/\n * Project: http://blog.aquameta.com/\n  /******************************************************************************/\n/* eslint-env browser */\n/* globals Set Map define */\ndefine(['/jQuery.min.js', '/socket.io-client-1.4.8.min.js'], function (\n  $,\n  io,\n  undefined // eslint-disable-line\n) {\n  'use strict';\n  var AQ = AQ || {};\n\n  // Note: Add `?events=false` to a url to stop all events\n  const query = new Set(location.search.slice(1).split('&'));\n\n  // TODO: how does session persistence work for events\n  const sessionId = getPersistedSessionId();\n  if (sessionId) {\n    // TODO: Can we use beacon or beforeunload to send detach event?\n    fetch(`/_socket/detach/${sessionId}`);\n  }\n  // TODO: Maybe sessionIds should be stored in localStorage as an array and when\n  // we try to detach them, we can get a payload back that says whether it was\n  // successful or not\n  sessionStorage.clear();\n\n  function buildQueryString(options) {\n    const keys = [];\n\n    if (typeof options != 'undefined') {\n      // Meta data defaults to true;\n      if (typeof options.meta_data == 'undefined') {\n        options.meta_data = true;\n      }\n\n      // Map the keys of the options object to an array of encoded url components\n      const params = Object.entries(options).sort(([a], [b]) =>\n        a.localeCompare(b)\n      );\n      for (let [key, value] of params) {\n        switch (key) {\n          case 'where':\n            // where: { name: 'column_name', op: '=', value: 'value' }\n            // where: [{ name: 'column_name', op: '=', value: 'value' }]\n            if (typeof value.length == 'undefined') value = [value];\n\n            keys.push(\n              value\n                .map(function (where) {\n                  return 'where=' + encodeURIComponent(JSON.stringify(where));\n                })\n                .join('&')\n            );\n            break;\n\n          case 'order_by':\n            // So many possibilities...\n            // order_by: '-?column_name'\n            // order_by: ['-?column_name']\n            // order_by: { 'column_name': 'asc|desc' }\n            // order_by: [{ 'column_name': 'asc|desc' }]\n            // order_by: { column: 'column_name', direction: 'asc|desc' }\n            // order_by: [{ column: 'column_name', direction: 'asc|desc' }]\n            if (typeof value.length == 'undefined') value = [value];\n\n            keys.push(\n              key +\n                '=' +\n                encodeURIComponent(\n                  value\n                    .map(function (o) {\n                      return (\n                        (typeof o.direction != 'undefined' &&\n                        o.direction != 'asc'\n                          ? '-'\n                          : '') + o.column\n                      );\n                    })\n                    .join(',')\n                )\n            );\n            break;\n\n          case 'limit':\n          // limit: number\n          /* eslint-disable-next-line no-fallthrough */\n          case 'offset':\n            // offset: number\n            var parsedNum = parseInt(value);\n            if (!isNaN(parsedNum)) {\n              keys.push(key + '=' + parsedNum);\n            }\n            break;\n\n          case 'session_id':\n            keys.push(\n              'session_id=' + encodeURIComponent(JSON.stringify(value))\n            );\n            break;\n\n          case 'meta_data':\n          case 'args':\n          case 'exclude':\n          case 'include':\n            keys.push(key + '=' + encodeURIComponent(JSON.stringify(value)));\n            break;\n          default:\n            console.log('query_options: could not find key', key, value);\n        }\n      }\n    }\n\n    // Return the query string by joining the array with &'s\n    return keys.length ? '?' + keys.join('&') : '?';\n  }\n\n  function getPersistedSessionId() {\n    return sessionStorage.getItem('sessionId') || null;\n  }\n\n  function persistSessionId(sessionId) {\n    if (sessionId) {\n      sessionStorage.setItem('sessionId', sessionId);\n    }\n  }\n\n  class Socket {\n    constructor(handleEvent) {\n      this.handleEvent = handleEvent;\n      this.isAttached = false;\n      this.sessionId = null;\n      this.intendedSessionId = null;\n      this._socket = io('/');\n      this._socket.on('event', this.onMessage.bind(this));\n      this._socket.on('connect', () => {\n        if (!this.isAttached) {\n          if (this.sessionId) {\n            this.attach(this.sessionId);\n          } else if (this.intendedSessionId) {\n            this.attach(this.intendedSessionId);\n          }\n          // else { connectSession has not been called yet }\n        }\n      });\n      this._socket.on('disconnect', () => {\n        this.isAttached = false;\n        // socket.io will handle reconnecting\n      });\n      this.cache = {};\n    }\n    onMessage(event) {\n      let response;\n      try {\n        response = JSON.parse(event);\n      } catch (e) {\n        console.error('socket: error while parsing event', e);\n        return;\n      }\n\n      switch (response.type) {\n        case 'attached':\n          this.isAttached = true;\n          this.sessionId = response.sessionId;\n          this.intendedSessionId = null;\n          console.log('socket attached', response.sessionId);\n          break;\n\n        case 'event':\n          this.handleEvent(response.data);\n          break;\n      }\n    }\n    attach(sessionId) {\n      if (!this.sessionId) {\n        this.intendedSessionId = sessionId;\n      }\n      if (this._socket.connected) {\n        if (!sessionId) {\n          console.error('socket error: invalid session id', sessionId);\n        }\n        this._socket.emit('attach', sessionId);\n      }\n      // else { socket will attempt to attach when connected }\n    }\n  }\n\n  class Endpoint {\n    constructor(url, database, evented) {\n      this.url = url;\n      this.database = database;\n      this.evented = query.has('events=false') ? false : evented;\n      this.cache = {};\n      this.sessionId = null; // = getPersistedSessionId();\n      this.socket = this.evented\n        ? new Socket(this.handleEvent.bind(this))\n        : null;\n    }\n    connectSession(sessionId) {\n      this.sessionId = sessionId;\n      if (this.socket) {\n        this.socket.attach(sessionId);\n      }\n    }\n    handleEvent(event) {\n      const {\n        subscription_type: subscriptionType,\n        payload,\n        operation,\n        row_id: rowId,\n      } = event;\n      console.log({subscriptionType, payload, operation, rowId});\n\n      switch (subscriptionType) {\n        case 'table': {\n          console.log(subscriptionType + ':' + operation);\n          const rowsets = this.database.getTracked(\n            relationId(rowId.pk_column_id.relation_id).url()\n          );\n          for (const rowset of rowsets) {\n            rowset._triggerEvent(operation, payload, rowId);\n          }\n          break;\n        }\n        case 'column':\n          console.log(subscriptionType + ':' + operation);\n          break;\n        case 'row':\n          console.log(subscriptionType + ':' + operation);\n          break;\n        case 'field':\n          console.log(subscriptionType + ':' + operation);\n          break;\n        default:\n          break;\n      }\n      // TODO: Delete event\n    }\n    _resource(method, meta_id, args, data) {\n      args = args || {};\n\n      $('.debugger3').trigger('debugger_request', {\n        method: method,\n        meta_id: meta_id,\n        args: args,\n        data: data,\n      });\n\n      // Get use_cache from args or data\n      let use_cache = false;\n      if (!data && args.use_cache) {\n        use_cache = args.use_cache;\n        delete args.use_cache;\n      } else if (data?.use_cache) {\n        use_cache = data.use_cache;\n        delete data.use_cache;\n      }\n\n      // allow un-evented call by passing false for 'events'\n      const passed = Object.hasOwn(args, 'events');\n      const isTruthy = Boolean(args.events);\n      if (!passed || isTruthy) {\n        // If this connection is evented, get event_session_id\n        if (this.evented && this.sessionId) {\n          args.session_id = this.sessionId;\n        }\n      }\n      delete args.events;\n\n      // URLs\n      const id_url = meta_id.to_url(true); // ID part of the URL only\n      const url_without_query = this.url + id_url;\n      const url_with_query = url_without_query + buildQueryString(args);\n\n      // Check cache\n      if (use_cache && url_with_query in this.cache) {\n        return this.cache[url_with_query];\n      }\n\n      // If query string is too long, upgrade GET method to POST\n      if (method == 'GET' && (location.host + url_with_query).length > 1000) {\n        method = 'POST';\n      }\n\n      const headers = new Headers();\n      headers.append('Content-Type', 'application/json');\n\n      const init_obj = {\n        method: method,\n        headers: headers,\n        credentials: 'same-origin',\n      };\n\n      // Don't add data on GET requests\n      if (method !== 'GET') {\n        init_obj.body = JSON.stringify(data);\n      }\n\n      const request = fetch(\n        method === 'GET' ? url_with_query : url_without_query,\n        init_obj\n      )\n        .then(function (response) {\n          // this will never happen\n          // JSON was returned from WebSocket\n          if (typeof response.json == 'undefined') {\n            // TODO: ? Unfortunately this has no HTTP status like the result of fetch\n            return response;\n          }\n\n          // Request object was returned from fetch\n          // Read json stream\n          var json = response.json();\n\n          if (response.status >= 200 && response.status < 300) {\n            return json;\n          }\n\n          // If bad request (code 300 or higher), reject promise\n          return json.then(Promise.reject.bind(Promise));\n        })\n        .catch(function (server_error) {\n          // Construct real Error object\n          const err = new Error(server_error.message.message);\n          err.metadata = server_error.message || {};\n          err.metadata.status_code = server_error.status_code;\n          err.metadata.title = server_error.title;\n\n          // Log error in collapsed group\n          console.groupCollapsed(\n            method,\n            server_error.status_code,\n            server_error.title\n          );\n          // console.error(url_without_query);\n          if ('message' in server_error) {\n            console.error(method == 'GET' ? url_with_query : url_without_query);\n            console.error(server_error.message.message);\n            console.error(server_error.message.context);\n          }\n          console.groupEnd();\n\n          throw err;\n        });\n\n      // Check cache for GET/POST\n      if (use_cache && (method == 'GET' || method == 'POST')) {\n        this.cache[url_with_query] = request;\n      }\n\n      return request;\n    }\n\n    get(meta_id, args) {\n      return this._resource('GET', meta_id, args);\n    }\n\n    post(meta_id, data) {\n      return this._resource('POST', meta_id, {}, data);\n    }\n\n    patch(meta_id, data) {\n      return this._resource('PATCH', meta_id, {}, data);\n    }\n\n    delete(meta_id, args) {\n      return this._resource('DELETE', meta_id, args);\n    }\n  }\n\n  AQ.uuid = function () {\n    var d = new Date().getTime();\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n      /[xy]/g,\n      function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == 'x' ? r : (r & 0x7) | 0x8).toString(16);\n      }\n    );\n  };\n  /*--------------------------------- * Database * ---------------------------------*/\n  AQ.Database = function (url, settings, ready_callback) {\n    this.settings = settings;\n\n    if (typeof this.settings.evented === 'string') {\n      console.warn(\n        'AQ.Database: `evented` setting has been deprecated. Use `events=true|false` instead'\n      );\n      delete this.settings.evented;\n    }\n\n    this.settings.events = this.settings.events || true;\n    this.endpoint = new Endpoint(url, this, this.settings.events);\n    this.tracked = {relation: {}, row: {}, field: {}};\n\n    if (this.settings.events) {\n      this.schema('event')\n        .function('session_create')\n        .then(\n          function (result) {\n            const sessionId = result.get('session_create');\n            if (sessionId) {\n              this.endpoint.connectSession(sessionId);\n              persistSessionId(sessionId);\n            } else {\n              console.log('got a null sessionId', sessionId);\n            }\n          }.bind(this)\n        );\n    }\n  };\n  AQ.Database.prototype.constructor = AQ.Database;\n  AQ.Database.prototype.schema = function (name) {\n    return new AQ.Schema(this, name);\n  };\n  AQ.Database.prototype.getTracked = function (id) {\n    let idType;\n    if (id.startsWith('/relation/')) {\n      idType = 'relation';\n    } else if (id.startsWith('/row/')) {\n      idType = 'row';\n    } else if (id.startsWith('/field/')) {\n      idType = 'field';\n    }\n    const tracked = this.tracked[idType][id];\n    if (!tracked) {\n      return [];\n    }\n    return tracked;\n  };\n  AQ.Database.prototype.track = function (id, obj) {\n    // TODO: db.track should only be called when events are set up on this query\n    let idType;\n    if (id.startsWith('/relation/')) {\n      idType = 'relation';\n    } else if (id.startsWith('/row/')) {\n      idType = 'row';\n    } else if (id.startsWith('/field/')) {\n      idType = 'field';\n    }\n\n    // columns are supposed to have events, but what does that mean?\n    // functions do not have events\n    // schema do not have events\n\n    switch (idType) {\n      case 'relation':\n        this.tracked.relation[id] = this.tracked.relation[id] || [];\n        this.tracked.relation[id].push(obj);\n        break;\n      case 'row':\n        this.tracked.row[id] = obj;\n        break;\n      case 'field':\n        this.tracked.field[id] = obj;\n        break;\n    }\n  };\n\n  /*--------------------------------- * Schema * ---------------------------------*/\n  AQ.Schema = function (database, name) {\n    this.database = database;\n    this.name = name;\n    this.id = {name: this.name};\n  };\n  AQ.Schema.prototype.constructor = AQ.Schema;\n  AQ.Schema.prototype.relation = function (name) {\n    return new AQ.Relation(this, name);\n  };\n  AQ.Schema.prototype.table = function (name) {\n    return new AQ.Table(this, name);\n  };\n  AQ.Schema.prototype.view = function (name) {\n    return new AQ.View(this, name);\n  };\n  AQ.Schema.prototype.function = function (identifier, args, options) {\n    // Function identifier (name and parameter list)\n    if (typeof identifier == 'object') {\n      var name = identifier.name;\n      var parameter_type_list = identifier.parameters;\n    }\n    // Selecting a function without specifying the parameters\n    else {\n      var name = identifier;\n    }\n\n    options = options || {};\n\n    // Arguments\n    options.args = {};\n\n    // `args = undefined` will pass no arguments into the server-side function\n    if (typeof args != 'undefined') {\n      // some_function?args={ kwargs: {} } -- Key/value object\n      if (!(args instanceof Array) && args instanceof Object) {\n        options.args.kwargs = args;\n      }\n      // some_function?args={ vals: [] } -- Array\n      else {\n        if (!(args instanceof Array)) {\n          // Regular value is placed into array\n          args = [args];\n        }\n        options.args.vals = args;\n      }\n    }\n\n    var fn = new AQ.Function(this, name, parameter_type_list);\n\n    return this.database.endpoint\n      .get(fn, options)\n      .then(\n        function (response) {\n          if (!response) {\n            throw 'Empty response';\n          }\n          /* sometimes results can be empty and that is ok.\n                else if (!response.result.length) {\n                    throw 'Result set empty';\n                }\n\t\t\t\t*/\n          if (response.result.length != 1) {\n            return new AQ.FunctionResultSet(fn, response);\n          }\n          return new AQ.FunctionResult(fn, response);\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw err;\n      });\n  };\n\n  /*--------------------------------- * Relation * ---------------------------------*/\n  function relationId(id) {\n    return {\n      url() {\n        return '/relation/' + id.schema_id.name + '/' + id.name;\n      },\n    };\n  }\n  AQ.Relation = function (schema, name) {\n    this.schema = schema;\n    this.name = name;\n    this.id = {schema_id: this.schema.id, name: this.name};\n  };\n  AQ.Relation.prototype.constructor = AQ.Relation;\n  AQ.Relation.prototype.to_url = function (id_only) {\n    return id_only\n      ? '/relation/' + this.schema.name + '/' + this.name\n      : this.schema.database.endpoint.url +\n          '/relation/' +\n          this.schema.name +\n          '/' +\n          this.name;\n  };\n  AQ.Relation.prototype.column = function (name) {\n    return new AQ.Column(this, name);\n  };\n  AQ.Relation.prototype.rows = function (options) {\n    return this.schema.database.endpoint\n      .get(this, options)\n      .then(\n        function (rows) {\n          if (rows == null) {\n            throw 'Empty response';\n          } /*\n                else if (rows.result.length < 1) {\n                    throw 'No rows returned';\n                }*/\n          const rowset = new AQ.Rowset(this, rows, options);\n          this.schema.database.track(this.to_url(true), rowset);\n          return rowset;\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw 'Rows request failed: ' + err;\n      });\n  };\n  AQ.Relation.prototype.row = function () {\n    // Multiple different ways to call 'row' function\n\n    // 1. Calling with Options object\n    if (typeof arguments[0] == 'object') {\n      var obj = arguments[0];\n      var args = arguments[1] || {};\n\n      // AQ.Relation.row({ where: { column_name: 'column_name', op: '=', value: 'value' } })\n      // Maybe it should be this one: AQ.Relation.row({ where: { column_name: value } })\n      if (typeof obj.where != 'undefined') {\n        args.where = obj.where;\n      }\n      // AQ.Relation.row({ column_name: 'column_name', op: '=', value: 'value' })\n      // Maybe it should be this one: AQ.Relation.row({ column_name: value })\n      else {\n        args.where = obj;\n      }\n    }\n    // 2. Calling with column_name and value\n    else if (typeof arguments[0] == 'string') {\n      // AQ.Relation.row(column_name, value [, options_obj])\n      var name = arguments[0];\n      var value = arguments[1];\n      var args = arguments[2] || {};\n\n      args.where = {name: name, op: '=', value: value};\n    }\n    // 3. Calling AQ.Relation.row() without arguments\n    else {\n      var args = {};\n    }\n\n    return this.schema.database.endpoint\n      .get(this, args)\n      .then(\n        function (row) {\n          if (row == null) {\n            throw 'Empty response';\n          } else if (row.result.length == 0) {\n            return null; // throw 'No row returned';\n          } else if (row.result.length > 1) {\n            throw 'Multiple rows returned';\n          }\n          const aqRow = new AQ.Row(this, row);\n          this.schema.database.track(aqRow.to_url(true), aqRow);\n          return aqRow;\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw 'Row request failed: ' + err;\n      });\n  };\n\n  /*--------------------------------- * Table * ---------------------------------*/\n  AQ.Table = function (schema, name) {\n    this.schema = schema;\n    this.name = name;\n    this.id = {schema_id: this.schema.id, name: this.name};\n  };\n  AQ.Table.prototype = Object.create(AQ.Relation.prototype);\n  AQ.Table.prototype.constructor = AQ.Table;\n  AQ.Table.prototype.insert = function (data) {\n    if (typeof data == 'undefined') {\n      // table.insert({}) is equivalent to table.insert()\n      // both will insert default values\n      data = {};\n    }\n\n    // Return inserted row promise\n    return this.schema.database.endpoint\n      .patch(this, data)\n      .then(\n        function (inserted_row) {\n          if (inserted_row == null) {\n            throw 'Empty response';\n          }\n          if (typeof data.length != 'undefined' && data.length > 1) {\n            return new AQ.Rowset(this, inserted_row, null);\n          }\n          return new AQ.Row(this, inserted_row);\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw 'Insert failed: ' + err;\n      });\n  };\n\n  /*--------------------------------- * View * ---------------------------------*/\n  AQ.View = function (schema, name) {\n    this.schema = schema;\n    this.name = name;\n    this.id = {schema_id: this.schema.id, name: this.name};\n  };\n  AQ.View.prototype = Object.create(AQ.Relation.prototype);\n  AQ.View.prototype.constructor = AQ.View;\n\n  /*--------------------------------- * Rowset * ---------------------------------*/\n  class Callbacks {\n    constructor() {\n      this.map = new Map();\n    }\n    call(cbType, payload) {\n      const callbacks = this.map.get(cbType) || [];\n      for (const callback of callbacks) {\n        callback(payload);\n      }\n    }\n    add(cbType, cb) {\n      this.map.set(\n        cbType,\n        this.map.has(cbType) ? this.map.get(cbType).concat(cb) : [cb]\n      );\n    }\n    remove(cbType, cb) {\n      const callbacks = this.map.get(cbType);\n      if (callbacks) {\n        this.map.set(\n          cbType,\n          callbacks.filter((callback) => callback !== cb)\n        );\n      }\n    }\n  }\n\n  AQ.Rowset = function (relation, response, server_arguments) {\n    this.relation = relation;\n    this.schema = relation.schema;\n    this.columns = response.columns || null;\n    this.pk_column_name = response.pk || null;\n    this.rows = response.result;\n    this.length = response.result.length;\n    this.server_arguments = server_arguments || {};\n    this.callbacks = new Callbacks();\n  };\n  AQ.Rowset.prototype.constructor = AQ.Rowset;\n  AQ.Rowset.prototype.map = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.Row(this.relation, {\n            columns: this.columns,\n            pk: this.pk_column_name,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .map(fn);\n  };\n  AQ.Rowset.prototype.forEach = function (fn) {\n    const newRow = (row) => {\n      return new AQ.Row(this.relation, {\n        columns: this.columns,\n        pk: this.pk_column_name,\n        result: [row],\n      });\n    };\n    this.onInsert(fn);\n    this.rows.map(newRow).forEach(fn);\n    return this;\n  };\n  AQ.Rowset.prototype.reload = function () {\n    return this.relation.rows(this.server_arguments);\n  };\n  AQ.Rowset.prototype._triggerEvent = function (eventType, payload, newRowId) {\n    const relId = this.relation.id;\n    const pkColumn = this.pk_column_name;\n    const rowIdStr = rowId(\n      newRowId.pk_column_id.relation_id,\n      newRowId.pk_value\n    ).url();\n    // TODO: need a rewrite on datum to fix this\n    // imitate api response to create row\n    const newRow = (row, pk) => {\n      return new AQ.Row(this.relation, {\n        columns: this.columns,\n        pk: pk || this.pk_column_name,\n        result: [row],\n      });\n    };\n    switch (eventType) {\n      case 'insert': {\n        const completeRow = {row: payload};\n        this.rows.push(completeRow);\n        payload = newRow(completeRow);\n        break;\n      }\n      case 'update': {\n        // TODO: I think payload is only the update fields, may need to reconstruct real row\n        let index = this.rows.findIndex(\n          ({row}) => rowId(relId, row[pkColumn]).url() === rowIdStr\n        );\n        if (index < 0) {\n          console.error(\n            'AQ.Rowset: trying to trigger update on nonexistant row'\n          );\n          break;\n        }\n        const completeRow = {row: {...this.rows[index].row, ...payload}};\n        this.rows[index] = completeRow;\n        payload = newRow(completeRow, pkColumn);\n        break;\n      }\n      case 'delete': {\n        // TODO: I think payload is only the row_id, may need to reconstruct real row\n        let index = this.rows.findIndex(\n          (row) => rowId(relId, row[pkColumn]).url() === rowIdStr\n        );\n        if (!index) {\n          console.error(\n            'AQ.Rowset: trying to trigger delete on nonexistant row'\n          );\n          break;\n        }\n        this.rows.splice(index, 1);\n        payload = rowIdStr;\n        break;\n      }\n    }\n    this.callbacks.call(eventType, payload);\n  };\n  AQ.Rowset.prototype.onInsert = function (fn) {\n    // TODO: maybe get rid of string\n    this.callbacks.add('insert', fn);\n  };\n  AQ.Rowset.prototype.onUpdate = function (fn) {\n    // TODO: can you update a rowset?\n    this.callbacks.add('update', fn);\n  };\n  AQ.Rowset.prototype.onDelete = function (fn) {\n    this.callbacks.add('delete', fn);\n  };\n\n  /**\n   * Call AQ.Rowset.where with (where_obj) or use shorthand notation (field, value) - filter results programmatically\n   *\n   * @param {Object} where_obj\n   * @param {[Boolean]} return_first\n   * @param {[Boolean]} async\n   *\n   * OR\n   *\n   * @param {String} field\n   * @param {Any} value\n   * @param {[Boolean]} return_first\n   * @param {[Boolean]} async\n   *\n   * @returns {Promise}\n   */\n  AQ.Rowset.prototype.where = function () {\n    var first = false,\n      async = true,\n      where_obj = {};\n    if (typeof arguments[0] == 'object') {\n      // AQ.Rowset.where(where_obj [, return_first] [, async]);\n      where_obj = arguments[0];\n      var field = where_obj.field;\n      var value = where_obj.value;\n      if (arguments.length > 1) first = arguments[1];\n      if (arguments.length > 2) async = arguments[2];\n    } else if (typeof arguments[0] == 'string' && arguments.length > 1) {\n      // AQ.Rowset.where(field, value [, return_first] [, async]);\n      var field = arguments[0];\n      var value = arguments[1];\n      if (arguments.length > 2) first = arguments[2];\n      if (arguments.length > 3) async = arguments[3];\n    }\n\n    return new Promise(\n      function (resolve, reject) {\n        // TODO lots of logic here\n        // The new rowset that is returned must be in the same format as the response from the server\n\n        if (first) {\n          for (var i = 0; i < this.rows.length; i++) {\n            if (this.rows[i].row[field] == value) {\n              resolve(\n                new AQ.Row(this.relation, {\n                  columns: this.columns,\n                  result: [this.rows[i]],\n                })\n              );\n            }\n          }\n          reject('could not find ' + field + ' ' + value);\n        } else {\n          var return_rowset = [];\n          for (var i = 0; i < this.rows.length; i++) {\n            if (this.rows[i].row[field] == value) {\n              return_rowset.push(this.rows[i]);\n            }\n          }\n          resolve(\n            new AQ.Rowset(this.relation, {\n              columns: this.columns,\n              result: return_rowset,\n            })\n          );\n        }\n\n        // 2\n\n        // maybe we don't need to search the entire row and instead we return the first item found\n        /*\n            var new_rowset = _.filter(this.rows, function(el) {\n                //return AQ.equals.call(this, el[field], val);\n            });\n*/\n        if (new_rowset.length == 1) {\n          return new AQ.Row(this.relation, new_rowset);\n        } else if (new_rowset.length > 1) {\n          throw 'Multiple Rows Returned';\n        }\n\n        // if row does not exist\n        return null;\n      }.bind(this)\n    );\n  };\n  AQ.Rowset.prototype.order_by = function (column, direction) {\n    /*\n        var ordered = _.sortBy(this.rows, function(el) {\n            return el.row[column];\n        });\n*/\n    if (direction !== 'asc') {\n      ordered.reverse();\n    }\n    return new AQ.Rowset(this.relation, {\n      columns: this.columns,\n      result: ordered,\n    });\n  };\n  AQ.Rowset.prototype.limit = function (lim) {\n    if (lim <= 0) {\n      throw 'Bad limit';\n    }\n    return new AQ.Rowset(this.relation, {\n      columns: this.columns,\n      result: this.rows.slice(0, lim),\n    });\n  };\n  AQ.Rowset.prototype.related_rows = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    var values = this.map(function (row) {\n      return row.get(self_column_name);\n    });\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: 'in',\n      value: values,\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n  };\n  AQ.Rowset.prototype.related_row = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    var values = this.map(function (row) {\n      return row.get(self_column_name);\n    });\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: 'in',\n      value: values,\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n  };\n\n  /*--------------------------------- * Row * ---------------------------------*/\n  function rowId(relId, pkValue) {\n    return {\n      url() {\n        return (\n          '/row/' + relId.schema_id.name + '/' + relId.name + '/' + pkValue\n        );\n      },\n    };\n  }\n  AQ.Row = function (relation, response) {\n    this.relation = relation;\n    this.schema = relation.schema;\n    this.row_data = response.result[0].row;\n\n    this.callbacks = new Callbacks();\n    this.cached_fields = {};\n    this.columns = response.columns || null;\n    this.pk_column_name = null;\n    this.pk_value = null;\n    this.id = null;\n    this.to_url = function () {\n      console.error(\n        'You must call a row with "meta_data: true" in order to use the to_url function'\n      );\n      throw 'Datum.js: Programming Error';\n    };\n\n    if (typeof response.pk != 'undefined') {\n      this.pk_column_name = response.pk;\n      this.pk_value = this.get(this.pk_column_name);\n      // this.id = {"pk_column_id":{"relation_id":{"schema_id":{"name":this.schema.name},"name":this.relation.name},"name":this.pk_column_name},"pk_value": this.pk_value}\n      this.id = {\n        pk_column_id: {\n          relation_id: this.relation.id,\n          name: this.pk_column_name,\n        },\n        pk_value: this.pk_value,\n      };\n\n      this.to_url = function (id_only) {\n        return id_only\n          ? '/row/' +\n              this.relation.schema.name +\n              '/' +\n              this.relation.name +\n              '/' +\n              /*JSON.stringify(this.pk_value)*/ this.pk_value\n          : this.relation.schema.database.endpoint.url +\n              '/row/' +\n              this.relation.schema.name +\n              '/' +\n              this.relation.name +\n              '/' +\n              /*JSON.stringify(this.pk_value)*/ this.pk_value;\n      };\n    }\n  };\n  AQ.Row.prototype = {\n    constructor: AQ.Row,\n    get: function (name) {\n      return this.row_data[name];\n    },\n    set: function (name, value) {\n      this.row_data[name] = value;\n      return this;\n    },\n    to_string: function () {\n      return JSON.stringify(this.row_data);\n    },\n    clone: function () {\n      return new AQ.Row(this.relation, {\n        columns: this.columns,\n        pk: this.pk_column_name,\n        result: [{row: this.row_data}],\n      });\n    },\n    field: function (name) {\n      if (typeof this.cached_fields[name] == 'undefined') {\n        this.cached_fields[name] = new AQ.Field(\n          this,\n          name,\n          name === this.pk_column_name\n        );\n      }\n      return this.cached_fields[name];\n    },\n    fields: function () {\n      if (this.columns != null) {\n        return this.columns.map(\n          function (c) {\n            return this.field(c.name);\n          }.bind(this)\n        );\n      }\n      return null;\n    },\n  };\n  AQ.Row.prototype._triggerEvent = function (eventType, payload) {\n    switch (eventType) {\n      case 'update': {\n        // TODO: update fields\n        break;\n      }\n    }\n    this.callbacks.call(eventType, payload);\n  };\n  AQ.Row.prototype.onUpdate = function (fn) {\n    this.callbacks.add('update', fn);\n  };\n  AQ.Row.prototype.onDelete = function (fn) {\n    this.callbacks.add('delete', fn);\n  };\n  AQ.Row.prototype.update = function () {\n    return this.relation.schema.database.endpoint\n      .patch(this, this.row_data)\n      .then(\n        function (response) {\n          if (response == null) {\n            throw 'Empty response';\n          }\n          return this;\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw 'Update failed: ' + err;\n      });\n  };\n  AQ.Row.prototype.delete = function () {\n    return this.relation.schema.database.endpoint\n      .delete(this)\n      .then(function (response) {\n        if (response == null) {\n          throw 'Empty response';\n        }\n      })\n      .catch(function (err) {\n        throw 'Delete failed: ' + err;\n      });\n  };\n  AQ.Row.prototype.related_rows = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: '=',\n      value: this.get(self_column_name),\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n  };\n  AQ.Row.prototype.related_row = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: '=',\n      value: this.get(self_column_name),\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n  };\n\n  /*--------------------------------- * Column * ---------------------------------*/\n  AQ.Column = function (relation, name) {\n    this.relation = relation;\n    this.name = name;\n    this.id = {relation_id: relation.id, name: name};\n  };\n  AQ.Column.prototype.constructor = AQ.Column;\n\n  /*--------------------------------- * Field * ---------------------------------*/\n  AQ.Field = function (row, name, pk) {\n    this.row = row;\n    this.column = new AQ.Column(row.relation, name);\n    this.is_primary_key = pk;\n    this.name = name;\n    this.value = row.get(name);\n    this.id = {row_id: this.row.id, column_id: this.column.id};\n    this.to_url = function (id_only) {\n      if (this.row.pk_value == null) {\n        console.error(\n          'You must call a row with "meta_data: true" in order to use the to_url function'\n        );\n        throw 'Datum.js: Programming Error';\n      }\n      return id_only\n        ? '/field/' +\n            this.row.relation.schema.name +\n            '/' +\n            this.row.relation.name +\n            '/' +\n            /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value +\n            '/' +\n            this.column.name\n        : this.row.relation.schema.database.endpoint.url +\n            '/field/' +\n            this.row.relation.schema.name +\n            '/' +\n            this.row.relation.name +\n            '/' +\n            /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value +\n            '/' +\n            this.column.name;\n    };\n  };\n  AQ.Field.prototype = {\n    constructor: AQ.Field,\n    get: function () {\n      return this.row.get(this.name);\n    },\n    set: function (value) {\n      this.value = value;\n      return this.row.set(this.name, value);\n    },\n    update: function () {\n      return this.row.update();\n    }, // TODO: This is wrong\n  };\n\n  /*--------------------------------- * Function * ---------------------------------*/\n  AQ.Function = function (schema, name, args) {\n    this.schema = schema;\n    this.name = name;\n\n    if (args instanceof Array) {\n      this.args = '{' + args.join(',') + '}';\n    } else {\n      this.args = args;\n    }\n\n    this.id = {schema_id: this.schema.id, name: this.name, args: this.args};\n    this.to_url = function (id_only) {\n      var base_url = id_only ? '' : this.schema.database.endpoint.url;\n      if (typeof this.args != 'undefined') {\n        return (\n          base_url +\n          '/function/' +\n          this.schema.name +\n          '/' +\n          this.name +\n          '/' +\n          this.args\n        );\n      }\n      return base_url + '/function/' + this.schema.name + '/' + this.name;\n    };\n  };\n  AQ.Function.prototype.constructor = AQ.Function;\n\n  /*--------------------------------- * Function Result * ---------------------------------*/\n  AQ.FunctionResult = function (fn, response) {\n    this.function = fn;\n    this.schema = fn.schema;\n    this.row_data = response.result[0].row;\n    this.rows = response.result;\n    this.columns = response.columns;\n  };\n  AQ.FunctionResult.prototype = {\n    constructor: AQ.FunctionResult,\n    get: function (name) {\n      return this.row_data[name];\n    },\n    to_string: function () {\n      return JSON.stringify(this.row_data);\n    },\n  };\n  AQ.FunctionResult.prototype.map = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.FunctionResult(this.function, {\n            columns: this.columns,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .map(fn);\n  };\n  AQ.FunctionResult.prototype.forEach = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.FunctionResult(this.function, {\n            columns: this.columns,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .forEach(fn);\n  };\n  AQ.FunctionResult.prototype.related_rows = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: '=',\n      value: this.get(self_column_name),\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n  };\n  AQ.FunctionResult.prototype.related_row = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: '=',\n      value: this.get(self_column_name),\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n  };\n\n  /*--------------------------------- * Function Result Set * ---------------------------------*/\n  AQ.FunctionResultSet = function (fn, response) {\n    this.function = fn;\n    this.schema = fn.schema;\n    this.columns = response.columns;\n    this.rows = response.result;\n  };\n  AQ.FunctionResultSet.prototype.constructor = AQ.FunctionResultSet;\n  AQ.FunctionResultSet.prototype.map = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.FunctionResult(this.function, {\n            columns: this.columns,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .map(fn);\n  };\n  AQ.FunctionResultSet.prototype.forEach = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.FunctionResult(this.function, {\n            columns: this.columns,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .forEach(fn);\n  };\n  AQ.FunctionResultSet.prototype.related_rows = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    var values = this.map(function (row) {\n      return row.get(self_column_name);\n    });\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: 'in',\n      value: values,\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n  };\n  AQ.FunctionResultSet.prototype.related_row = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    var values = this.map(function (row) {\n      return row.get(self_column_name);\n    });\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: 'in',\n      value: values,\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n  };\n\n  window.AQ = AQ;\n  return AQ;\n});\n
\\xd51e6ec94058554a84558a5b402ee6ef5fdf5455e35c902feda61cda8752943a	1.0.1
\\xdd2741e2734916143a6dbf1d1939cbc04396f10356faf54aba282066cec41b5f	944b5a05-be70-45a1-a549-1301d38799e4
\\xe2424eb9dc150314d6f59e73807aa999f142670a7f4c36b45dd4394fad6f95b4	9df5b070-1b83-412d-af2c-0fcc6756f374
\\xe5d974b26f6495bba2edcb7252cc5ebdc8ea6f832620835e87cb9122695c1a51	/*******************************************************************************\n * Datum.js\n *\n * Created by Aquameta Labs, an open source company in Portland Oregon, USA.\n * Company: http://aquameta.com/\n * Project: http://blog.aquameta.com/\n ******************************************************************************/\ndefine(['/jQuery.min.js'], function($, undefined) {\n    'use strict';\n    var AQ = AQ || {};\n\n\n\n    AQ.uuid = function() {\n        var d = new Date().getTime();\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = (d + Math.random()*16)%16 | 0;\n            d = Math.floor(d/16);\n            return (c=='x' ? r : (r&0x7|0x8)).toString(16);\n        });\n    }\n\n\n\n    function query_options( options ) {\n\n        var keys = [];\n\n        if (typeof options != 'undefined') {\n\n            // Meta data defaults to true;\n            if (typeof options.meta_data == 'undefined') {\n                options.meta_data = true;\n            }\n\n            // Map the keys of the options object to an array of encoded url components\n            Object.keys(options).sort().map(function(key_name) {\n\n                var key = options[key_name];\n\n                switch(key_name) {\n\n                    case 'where':\n                        // where: { name: 'column_name', op: '=', value: 'value' }\n                        // where: [{ name: 'column_name', op: '=', value: 'value' }]\n                        if (typeof key.length == 'undefined') key = [key];\n\n                        return key.map(function(where) {\n                            return 'where=' + encodeURIComponent(JSON.stringify(where));\n                        }).join('&');\n\n                    case 'order_by':\n                        // So many possibilities...\n                        // order_by: '-?column_name'\n                        // order_by: ['-?column_name']\n                        // order_by: { 'column_name': 'asc|desc' }\n                        // order_by: [{ 'column_name': 'asc|desc' }]\n                        // order_by: { column: 'column_name', direction: 'asc|desc' }\n                        // order_by: [{ column: 'column_name', direction: 'asc|desc' }]\n                        if (typeof key.length == 'undefined') key = [key];\n\n                        return key_name + '=' + encodeURIComponent(key.map(function(o,i) {\n                            return ((typeof o.direction != 'undefined' && o.direction != 'asc') ? '-' : '') + o.column;\n                        }).join(','));\n\n                    case 'limit':\n                        // limit: number\n                    case 'offset':\n                        // offset: number\n                        var parsedNum = parseInt(key);\n                        if (!isNaN(parsedNum)) {\n                            return key_name + '=' + parsedNum;\n                        }\n                        return;\n\n                    case 'evented':\n                        return 'session_id=' + encodeURIComponent(JSON.stringify(key));\n\n                    case 'meta_data':\n                    case 'args':\n                    case 'exclude':\n                    case 'include':\n                        return key_name + '=' + encodeURIComponent(JSON.stringify(key));\n                }\n            }\n\n            // Remove all undefined elements of the array\n            ).forEach(function(e) {\n                if (typeof e != 'undefined') keys.push(e);\n            });\n        }\n\n        // Return the query string by joining the array with &'s\n        return keys.length ? '?' + keys.join('&') : '?';\n    }\n\n\n\n    function Endpoint( url, evented ) {\n\n        this.url = url;\n        this.evented = evented;\n        this.cache = {};\n\n        var event_session_id;\n\n        // Auth session\n        this.auth_session_id = get_session_cookie();\n\n        function get_session_cookie() {\n            return document.cookie.replace(/(?:(?:^|.*;\\s*)SESSION\\s*\\=\\s*([^;]*).*$)|^.*$/, "$1");\n        }\n\n        var socket;\n        var socket_requests = {};\n        var open_functions = [];\n        var retries = 0;\n        var MAX_NUMBER_RETRIES = 5;\n\n        // this.settings.evented can be string or boolean\n        if(this.evented != 'no' && !this.evented) {\n\n            try {\n                //open_functions.push(connect_session);\n                connect_socket(this.evented == 'yes' || this.evented == true);\n            }\n            catch(err) {\n\n                if(this.evented == 'yes' || this.evented == true) {\n                    console.error('Websocket connection refused:', err);\n                    throw 'Websocket connection refused';\n                }\n\n                // if this.settings.evented == 'try', fail silently\n           \n            }\n        }\n\n        function connect_socket(fail_loudly) {\n\n            if (socket_connected()) {\n                return socket;\n            }\n\n            socket = new WebSocket('ws://' + location.host + url + '/event');\n            \n            socket.onopen = function (event) {\n                console.log('socket opened', this.readyState);\n                open_functions.forEach(function(e) { e.call(this); });\n            };\n            \n            socket.onerror = function(event) {\n                if (fail_loudly) {\n                    // TODO?\n                    console.error('really mad', event);\n                }\n                console.log('socket error', event);\n            };\n\n            socket.onclose = function(event) {\n                console.log('socket closed', event.code);\n                if (event.code == 1006) {\n                    retries++;\n                    if (retries < MAX_NUMBER_RETRIES) {\n                        // Try to reconnect\n                        connect_socket();\n                    }\n                }\n            };\n            \n            socket.onmessage = function (event) {\n                var response = JSON.parse(event.data);\n                console.log('message received', response);\n\n                switch (response.method) {\n                    case 'response':\n                        if (typeof response.request_id == 'undefined') {\n                            throw 'Websocket response is unidentifiable';\n                        }\n\n                        if (typeof socket_requests[response.request_id] == 'undefined') {\n                            // This will get hit if we sent the same request multiple times and more than one responsded\n                            // console.error('Websocket request not found', response);\n                        }\n                        else {\n                            console.log('resolving promise', response.request_id, socket_requests[response.request_id].tries);\n\n                            // Clear timeout\n                            clearTimeout(socket_requests[response.request_id].timeout_id);\n\n                            // Resolve promise\n                            socket_requests[response.request_id].resolve(response.data);\n\n                            // Delete promise from storage\n                            delete socket_requests[response.request_id];\n\n                            console.log('socket requests left to fulful', socket_requests);\n                        }\n                        break;\n                    case 'session_attach':\n                        this.event_session_id = response.session_id;\n                        break;\n\n                    case 'event':\n                        handle_event(JSON.parse(response.data));\n                        break;\n                }\n            };\n\n        }\n\n        function handle_event(event_data) {\n            // Route event\n            switch(event_data.subscription_type) {\n                case 'table':\n                    console.log(event_data.subscription_type + ':' + event_data.operation);\n                    break;\n                case 'column':\n                    console.log(event_data.subscription_type + ':' + event_data.operation);\n                    break;\n                case 'row':\n                    console.log(event_data.subscription_type + ':' + event_data.operation);\n                    break;\n                case 'field':\n                    console.log(event_data.subscription_type + ':' + event_data.operation);\n                    break;\n                default:\n                    break;\n            }\n            // Delete event\n            // endpoint...\n        }\n\n        function connect_session(session_id) {\n\n           if (typeof session_id != 'undefined') {\n               event_session_id = session_id;\n           }\n\n           if (socket_connected() && typeof event_session_id != 'undefined') {\n               socket_send({\n                   method: 'attach',\n                   session_id: event_session_id\n               });\n           }\n\n           else {\n               open_functions.push(connect_session);\n           }\n\n        }\n\n        // Boolean, whether socket is connected or not\n        function socket_connected() {\n\n            if (typeof socket != 'undefined' && typeof socket.readyState != 'undefined') {\n                return socket.readyState == 1;\n            }\n            return false;\n\n        }\n\n        // Grabs current connection and sends method\n        function socket_send( data ) {\n            return new Promise(function(resolve, reject) {\n\n                console.log('socket_send', data);\n                data.request_id = data.request_id || AQ.uuid();\n\n                var tries = 0;\n                if (typeof socket_requests[data.request_id] != 'undefined') {\n                    tries = socket_requests[data.request_id].tries + 1;\n                    clearTimeout(socket_requests[data.request_id].timeout_id);\n                }\n\n                socket_requests[data.request_id] = {\n                    resolve: function(response) { resolve(response); },\n                    reject: function(reason) { reject(reason); },\n                    timeout_id: setTimeout(function(data) {\n                            socket_send(data).then(\n                                function(r) { resolve(r); },\n                                function(e) { reject(e); }\n                            );\n                        }.bind(this, data), 300),\n                    tries: tries\n                };\n                socket.send(JSON.stringify(data)); \n            });\n        }\n\n        var resource = function( method, meta_id, args, data ) {\n\n            args = args || {};\n\n\t\t\t// console.log(method, meta_id, meta_id.to_url(), args, data);\n            $('.debugger3').trigger('debugger_request', { method: method, meta_id: meta_id, args: args, data: data });\n\n            // Get use_cache from args or data\n            var use_cache = false;\n            if (typeof data == 'undefined') {\n                if (typeof args.use_cache != 'undefined') {\n                    use_cache = args.use_cache;\n                }\n            }\n            else {\n                if (typeof data.use_cache != 'undefined') {\n                    use_cache = data.use_cache;\n                }\n            }\n\n            var current_session_cookie =  get_session_cookie();\n            if (this.auth_session_id != current_session_cookie) {\n                // session has changed\n                // update auth_session_id\n                this.auth_session_id = current_session_cookie;\n                // dump cache\n                this.cache = {};\n            }\n\n            // If this connection is evented, get event_session_id\n            if (this.evented) {\n                args.session_id = event_session_id;\n            }\n\n            // URLs\n            var id_url = meta_id.to_url(true); // ID part of the URL only\n            var url_without_query = this.url + id_url;\n            var url_with_query = url_without_query + query_options(args);\n\n            // Check cache\n            if (use_cache && url_with_query in this.cache) {\n                return this.cache[url_with_query];\n            }\n\n            // Send websocket method if this connection uses websocket\n            if (socket_connected()) {\n                // function values_to_string( obj ) {  // FIXME: Why in the HECK does this not work in Firefox 23.0.1??\n                var values_to_string = function ( obj ) {\n                    if (typeof obj == 'undefined' || obj == null) {\n                        return null;\n                    }\n                    var o = {};\n                    Object.keys(obj).forEach(function(key) {\n                        o[key] = JSON.stringify(obj[key]);\n                    });\n                    return JSON.stringify(o);\n                }\n\n                var request = socket_send({\n                    version: '0.3',\n                    method: 'request',\n                    verb: method,\n                    uri: id_url,\n                    query: values_to_string(args),\n                    data: values_to_string(data)\n                });\n\n            }\n            else {\n\n                // If query string is too long, upgrade GET method to POST\n                if(method == 'GET' && (location.host + url_with_query).length > 1000) {\n                    method = 'POST';\n                }\n\n                // This makes the uWSGI server send back json errors\n                var headers = new Headers();\n                headers.append('Content-Type', 'application/json');\n\n                // Settings object to send with 'fetch' method\n                var init_obj = {\n                    method: method,\n                    headers: headers,\n                    credentials: 'same-origin'\n                };\n\n                // Don't add data on GET requests\n                if (method != 'GET') {\n                    init_obj.body = JSON.stringify(data);\n                }\n\n                var request = fetch(method == 'GET' ? url_with_query : url_without_query, init_obj);\n            }\n\n            request = request.then(function(response) {\n\n                // JSON was returned from WebSocket\n                if (typeof response.json == 'undefined') {\n                    // TODO: ? Unfortunately this has no HTTP status like the result of fetch\n                    //console.log('i am the response', response);\n                    return response;\n                }\n\n                // Request object was returned from fetch\n\n                // Read json stream\n                var json = response.json();\n\n                if (response.status >= 200 && response.status < 300) {\n                    return json;\n                }\n\n                // If bad request (code 300 or higher), reject promise\n                return json.then(Promise.reject.bind(Promise));\n\n            }).catch(function(error) {\n\n                // Log error in collapsed group\n                console.groupCollapsed(method, error.status_code, error.title);\n                // console.error(url_without_query);\n                if ('message' in error) {\n                    console.error(error.message);\n                }\n                console.groupEnd();\n                throw error.title;\n\n            });\n\n            // Check cache for GET/POST\n            if (use_cache && (method == 'GET' || method == 'POST')) {\n                this.cache[url_with_query] = request;\n            }\n\n            return request;\n        }\n\n        return {\n            url: this.url,\n            connect_session: connect_session,\n            get: function( meta_id, args )        { return resource.call(this, 'GET', meta_id, args); }.bind(this),\n            post: function( meta_id, data )       { return resource.call(this, 'POST', meta_id, {}, data); }.bind(this),\n            patch: function( meta_id, data )      { return resource.call(this, 'PATCH', meta_id, {}, data); }.bind(this),\n            delete: function( meta_id, args )     { return resource.call(this, 'DELETE', meta_id, args); }.bind(this)\n        };\n    }\n\n    /*--------------------------------- * Database * ---------------------------------*/\n    AQ.Database = function( url, settings, ready_callback ) {\n        this.settings = settings;\n\n        // Not sure which name is better\n        this.endpoint = this.connection = new Endpoint(url, this.settings.evented);\n        if (this.settings.evented != 'no') {\n            this.schema('event').function('session_create').then(function(result) {\n                this.endpoint.connect_session(result.get('session_create'));\n            }.bind(this));\n        }\n        this.query_string = query_options;\n    };\n    AQ.Database.prototype.constructor = AQ.Database;\n    AQ.Database.prototype.schema = function( name ) { return new AQ.Schema(this, name); };\n\n    /*--------------------------------- * Schema * ---------------------------------*/\n    AQ.Schema = function( database, name ) {\n        this.database = database;\n        this.name = name;\n        this.id = { name: this.name };\n    };\n    AQ.Schema.prototype.constructor = AQ.Schema;\n    AQ.Schema.prototype.relation = function( name )         { return new AQ.Relation(this, name); };\n    AQ.Schema.prototype.table = function( name )            { return new AQ.Table(this, name); };\n    AQ.Schema.prototype.view = function( name )             { return new AQ.View(this, name); };\n    AQ.Schema.prototype.function = function( identifier, args, options )   {\n\n        // Function identifier (name and parameter list)\n        if (typeof identifier == 'object') {\n            var name = identifier.name;\n            var parameter_type_list = identifier.parameters;\n        }\n        // Selecting a function without specifying the parameters\n        else {\n            var name = identifier;\n        }\n\n        options = options || {};\n\n        // Arguments\n        options.args = {};\n\n        // `args = undefined` will pass no arguments into the server-side function\n        if (typeof args != 'undefined') {\n\n            // some_function?args={ kwargs: {} } -- Key/value object\n            if (!(args instanceof Array) && args instanceof Object) {\n                options.args.kwargs = args;\n            }\n            // some_function?args={ vals: [] } -- Array\n            else {\n                if (!(args instanceof Array)) {\n                    // Regular value is placed into array\n                    args = [ args ];\n                }\n                options.args.vals = args;\n            }\n        }\n\n        var fn = new AQ.Function(this, name, parameter_type_list);\n\n        return this.database.endpoint.get(fn, options)\n            .then(function(response) {\n\n                if (!response) {\n                    throw 'Empty response';\n                }\n\t\t\t\t/* sometimes results can be empty and that is ok.\n                else if (!response.result.length) {\n                    throw 'Result set empty';\n                }\n\t\t\t\t*/\n                if(response.result.length != 1) {\n                    return new AQ.FunctionResultSet(fn, response);\n                }\n                return new AQ.FunctionResult(fn, response);\n\n            }.bind(this)).catch(function(err) {\n                throw 'Function call request failed: ' + err;\n            });\n    };\n\n    /*--------------------------------- * Relation * ---------------------------------*/\n    AQ.Relation = function( schema, name ) {\n        this.schema = schema;\n        this.name = name;\n        this.id = { schema_id: this.schema.id, name: this.name };\n    };\n    AQ.Relation.prototype.constructor = AQ.Relation;\n    AQ.Relation.prototype.to_url = function( id_only ) {\n        return id_only ? '/relation/' + this.schema.name + '/' + this.name :\n              this.schema.database.endpoint.url + '/relation/' + this.schema.name + '/' + this.name;\n    };\n    AQ.Relation.prototype.column = function( name ) {\n        return new AQ.Column(this, name);\n    };\n    AQ.Relation.prototype.rows = function( options ) {\n\n        return this.schema.database.endpoint.get(this, options)\n            .then(function(rows) {\n\n                if (rows == null) {\n                    throw 'Empty response';\n                }/*\n                else if (rows.result.length < 1) {\n                    throw 'No rows returned';\n                }*/\n                return new AQ.Rowset(this, rows, options);\n\n            }.bind(this)).catch(function(err) {\n                throw 'Rows request failed: ' + err;\n            });\n    };\n    AQ.Relation.prototype.row = function() {\n\n        // Multiple different ways to call 'row' function\n\n        // 1. Calling with Options object\n        if (typeof arguments[0] == 'object') {\n\n            var obj = arguments[0];\n            var args = arguments[1] || {};\n\n            // AQ.Relation.row({ where: { column_name: 'column_name', op: '=', value: 'value' } })\n            // Maybe it should be this one: AQ.Relation.row({ where: { column_name: value } })\n            if (typeof obj.where != 'undefined') {\n                args.where = obj.where;\n            }\n            // AQ.Relation.row({ column_name: 'column_name', op: '=', value: 'value' })\n            // Maybe it should be this one: AQ.Relation.row({ column_name: value })\n            else {\n                args.where = obj;\n            }\n\n        }\n        // 2. Calling with column_name and value\n        else if (typeof arguments[0] == 'string') {\n\n            // AQ.Relation.row(column_name, value [, options_obj])\n            var name = arguments[0];\n            var value = arguments[1];\n            var args = arguments[2] || {};\n\n            args.where = { name: name, op: '=', value: value };\n\n        }\n        // 3. Calling AQ.Relation.row() without arguments\n        else {\n            var args = {};\n        }\n\n        return this.schema.database.endpoint.get(this, args)\n            .then(function(row) {\n\n                if (row == null) {\n                    throw 'Empty response';\n\t\t\t\t} \n                else if (row.result.length == 0) {\n\t\t\t\t\treturn null; // throw 'No row returned';\n\t\t\t\t}\n                else if (row.result.length > 1) {\n                    throw 'Multiple rows returned';\n                }\n                return new AQ.Row(this, row);\n\n            }.bind(this)).catch(function(err) {\n                throw 'Row request failed: ' + err;\n            });\n    };\n\n    /*--------------------------------- * Table * ---------------------------------*/\n    AQ.Table = function( schema, name ) {\n        this.schema = schema;\n        this.name = name;\n        this.id = { schema_id: this.schema.id, name: this.name };\n    };\n    AQ.Table.prototype = Object.create(AQ.Relation.prototype);\n    AQ.Table.prototype.constructor = AQ.Table;\n    AQ.Table.prototype.insert = function( data ) {\n\n        if (typeof data == 'undefined') {\n            // table.insert({}) is equivalent to table.insert()\n            // both will insert default values\n            data = {};\n        }\n\n        // Return inserted row promise\n        return this.schema.database.endpoint.patch(this, data)\n            .then(function(inserted_row) {\n\n                if (inserted_row == null) {\n                    throw 'Empty response';\n                }\n                if (typeof data.length != 'undefined' && data.length > 1) {\n                    return new AQ.Rowset(this, inserted_row, null);\n                }\n                return new AQ.Row(this, inserted_row);\n\n            }.bind(this)).catch(function(err) {\n                throw 'Insert failed: ' + err;\n            });\n\n    };\n\n    /*--------------------------------- * View * ---------------------------------*/\n    AQ.View = function( schema, name ) {\n        this.schema = schema;\n        this.name = name;\n        this.id = { schema_id: this.schema.id, name: this.name };\n    };\n    AQ.View.prototype = Object.create(AQ.Relation.prototype);\n    AQ.View.prototype.constructor = AQ.View;\n\n    /*--------------------------------- * Rowset * ---------------------------------*/\n    AQ.Rowset = function( relation, response, server_arguments ) {\n        this.relation = relation;\n        this.schema = relation.schema;\n        this.columns = response.columns || null;\n        this.pk_column_name = response.pk || null;\n        this.rows = response.result;\n        this.length = response.result.length;\n        this.server_arguments = server_arguments || {};\n    };\n    AQ.Rowset.prototype.constructor = AQ.Rowset;\n    AQ.Rowset.prototype.map = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.Row(this.relation, { columns: this.columns, pk: this.pk_column_name, result: [ row ] });\n        }.bind(this)).map(fn);\n    };\n    AQ.Rowset.prototype.forEach = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.Row(this.relation, { columns: this.columns, pk: this.pk_column_name, result: [ row ] });\n        }.bind(this)).forEach(fn);\n    };\n    AQ.Rowset.prototype.reload = function() {\n        return this.relation.rows(this.server_arguments);\n    };\n\n    /**\n     * Call AQ.Rowset.where with (where_obj) or use shorthand notation (field, value) - filter results programmatically\n     *\n     * @param {Object} where_obj\n     * @param {[Boolean]} return_first\n     * @param {[Boolean]} async\n     *\n     * OR\n     *\n     * @param {String} field\n     * @param {Any} value\n     * @param {[Boolean]} return_first\n     * @param {[Boolean]} async\n     *\n     * @returns {Promise}\n     */\n    AQ.Rowset.prototype.where = function() {\n\n        var first = false, async = true, where_obj = {};\n        if (typeof arguments[0] == 'object') {\n             // AQ.Rowset.where(where_obj [, return_first] [, async]);\n            where_obj = arguments[0];\n            var field = where_obj.field;\n            var value = where_obj.value;\n            if (arguments.length > 1) first = arguments[1];\n            if (arguments.length > 2) async = arguments[2];\n\n        }\n        else if (typeof arguments[0] == 'string' && arguments.length > 1) {\n            // AQ.Rowset.where(field, value [, return_first] [, async]);\n            var field = arguments[0];\n            var value = arguments[1];\n            if (arguments.length > 2) first = arguments[2];\n            if (arguments.length > 3) async = arguments[3];\n        }\n\n        return new Promise(function(resolve, reject) {\n\n            // TODO lots of logic here\n            // The new rowset that is returned must be in the same format as the response from the server\n\n            if (first) {\n                for (var i = 0; i < this.rows.length; i++) {\n                    if (this.rows[i].row[field] == value) {\n                        resolve(new AQ.Row(this.relation, { columns: this.columns, result: [ this.rows[i] ] }));\n                    }\n                }\n                reject('could not find ' + field + ' ' + value);\n            }\n            else {\n                var return_rowset = [];\n                for (var i = 0; i < this.rows.length; i++) {\n                    if (this.rows[i].row[field] == value) {\n                        return_rowset.push(this.rows[i]);\n                    }\n                }\n                resolve(new AQ.Rowset(this.relation, { columns: this.columns, result: return_rowset }));\n            }\n\n\n            // 2\n\n            // maybe we don't need to search the entire row and instead we return the first item found\n/*\n            var new_rowset = _.filter(this.rows, function(el) {\n                //return AQ.equals.call(this, el[field], val);\n            });\n*/\n            if (new_rowset.length == 1) {\n                return new AQ.Row(this.relation, new_rowset);\n            }\n            else if (new_rowset.length > 1) {\n                throw 'Multiple Rows Returned';\n            }\n\n            // if row does not exist\n            return null;\n\n        }.bind(this));\n\n    };\n    AQ.Rowset.prototype.order_by = function( column, direction ) {\n/*\n        var ordered = _.sortBy(this.rows, function(el) {\n            return el.row[column];\n        });\n*/\n        if (direction !== 'asc') {\n            ordered.reverse();\n        }\n        return new AQ.Rowset(this.relation, { columns: this.columns, result: ordered });\n    };\n    AQ.Rowset.prototype.limit = function( lim ) {\n        if (lim <= 0) {\n            throw 'Bad limit';\n        }\n        return new AQ.Rowset(this.relation, { columns: this.columns, result: this.rows.slice(0, lim) });\n    };\n    AQ.Rowset.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.relation.schema.database;\n\n        var values = this.map(function(row) {\n            return row.get(self_column_name);\n        });\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: 'in',\n            value: values\n        });\n\n\n        return db.schema(schema_name).relation(relation_name).rows(options);\n    };\n    AQ.Rowset.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.relation.schema.database;\n\n        var values = this.map(function(row) {\n            return row.get(self_column_name);\n        });\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: 'in',\n            value: values\n        });\n\n        return db.schema(schema_name).relation(relation_name).row(options);\n\n    };\n\n    /*--------------------------------- * Row * ---------------------------------*/\n    AQ.Row = function( relation, response ) {\n        this.relation = relation;\n        this.schema = relation.schema;\n        this.row_data = response.result[0].row;\n\n        this.cached_fields = {};\n        this.columns = response.columns || null;\n        this.pk_column_name = null;\n        this.pk_value = null;\n        this.id = null;\n        this.to_url = function() {\n            console.error('You must call a row with "meta_data: true" in order to use the to_url function');\n            throw 'Datum.js: Programming Error';\n        };\n\n        if (typeof response.pk != 'undefined') {\n            this.pk_column_name = response.pk;\n            this.pk_value = this.get(this.pk_column_name);\n            // this.id = {"pk_column_id":{"relation_id":{"schema_id":{"name":this.schema.name},"name":this.relation.name},"name":this.pk_column_name},"pk_value": this.pk_value}\n            this.id = {\n                pk_column_id: {\n                    relation_id: this.relation.id,\n                    name: this.pk_column_name\n                },\n                pk_value: this.pk_value\n            };\n\n            this.to_url = function( id_only ) {\n                return id_only ? '/row/' + this.relation.schema.name + '/' + this.relation.name + '/' + /*JSON.stringify(this.pk_value)*/ this.pk_value :\n                    this.relation.schema.database.endpoint.url + '/row/' + this.relation.schema.name + '/' + this.relation.name + '/' + /*JSON.stringify(this.pk_value)*/ this.pk_value;\n           };\n\n        }\n    };\n    AQ.Row.prototype = {\n        constructor: AQ.Row,\n        get: function( name )           { return this.row_data[name]; },\n        set: function( name, value )    { this.row_data[name] = value; return this; },\n        to_string: function()           { return JSON.stringify(this.row_data); },\n        clone: function()               { return new AQ.Row(this.relation, { columns: this.columns, pk: this.pk_column_name, result: [{ row: this.row_data }]}); },\n        field: function( name ) {\n            if (typeof this.cached_fields[name] == 'undefined') {\n                this.cached_fields[name] = new AQ.Field(this, name, name === this.pk_column_name);\n            }\n            return this.cached_fields[name];\n        },\n        fields: function() {\n            if (this.columns != null) {\n                return this.columns.map(function(c) {\n                    return this.field(c.name);\n                }.bind(this));\n            }\n            return null;\n        }\n    };\n    AQ.Row.prototype.update = function() {\n        return this.relation.schema.database.endpoint.patch(this, this.row_data)\n            .then(function(response) {\n\n                if(response == null) {\n                    throw 'Empty response';\n                }\n                return this;\n\n            }.bind(this)).catch(function(err) {\n                throw 'Update failed: ' + err;\n            });\n    };\n    AQ.Row.prototype.delete = function() { \n        return this.relation.schema.database.endpoint.delete(this)\n            .then(function(response) {\n\n                if(response == null) {\n                    throw 'Empty response';\n                }\n\n            }).catch(function(err) {\n                throw 'Delete failed: ' + err;\n            });\n    };\n    AQ.Row.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options )  {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.relation.schema.database;\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: '=',\n            value: this.get(self_column_name)\n        });\n\n        return db.schema(schema_name).relation(relation_name).rows(options);\n    };\n    AQ.Row.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.relation.schema.database;\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: '=',\n            value: this.get(self_column_name)\n        });\n\n        return db.schema(schema_name).relation(relation_name).row(options);\n    };\n\n    /*--------------------------------- * Column * ---------------------------------*/\n    AQ.Column = function( relation, name ) {\n        this.relation = relation;\n        this.name = name;\n        this.id = { relation_id: relation.id, name: name };\n    };\n    AQ.Column.prototype.constructor = AQ.Column;\n\n    /*--------------------------------- * Field * ---------------------------------*/\n    AQ.Field = function( row, name, pk ) {\n        this.row = row;\n        this.column = new AQ.Column(row.relation, name);\n        this.is_primary_key = pk;\n        this.name = name;\n        this.value = row.get(name);\n        this.id = { row_id: this.row.id, column_id: this.column.id };\n        this.to_url = function( id_only ) {\n            if (this.row.pk_value == null) {\n                console.error('You must call a row with "meta_data: true" in order to use the to_url function');\n                throw 'Datum.js: Programming Error';\n            }\n            return id_only ? '/field/' + this.row.relation.schema.name + '/' + this.row.relation.name + '/' + /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value + '/' + this.column.name :\n                this.row.relation.schema.database.endpoint.url + '/field/' + this.row.relation.schema.name + '/' + this.row.relation.name + '/' + /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value + '/' + this.column.name;\n            };\n    };\n    AQ.Field.prototype = {\n        constructor: AQ.Field,\n        get: function()          { return this.row.get(this.name); },\n        set: function(value)     { this.value = value; return this.row.set(this.name, value); },\n        update: function()       { return this.row.update(); } // TODO: This is wrong\n    };\n\n    /*--------------------------------- * Function * ---------------------------------*/\n    AQ.Function = function( schema, name, args ) {\n        this.schema = schema;\n        this.name = name;\n\n        if(args instanceof Array) {\n            this.args = '{' + args.join(',') + '}';\n        }\n        else {\n            this.args = args;\n        }\n\n        this.id = { schema_id: this.schema.id, name: this.name, args: this.args };\n        this.to_url = function( id_only ) {\n           var base_url = id_only ? '' : this.schema.database.endpoint.url;\n           if (typeof this.args != 'undefined') {\n               return base_url + '/function/' + this.schema.name + '/' + this.name + '/' + this.args;\n           }\n           return base_url + '/function/' + this.schema.name + '/' + this.name;\n        };\n    };\n    AQ.Function.prototype.constructor = AQ.Function;\n\n    /*--------------------------------- * Function Result * ---------------------------------*/\n    AQ.FunctionResult = function( fn, response ) {\n        this.function = fn;\n        this.schema = fn.schema;\n        this.row_data = response.result[0].row;\n        this.rows = response.result;\n        this.columns = response.columns;\n    };\n    AQ.FunctionResult.prototype = {\n        constructor: AQ.FunctionResult,\n        get: function( name )           { return this.row_data[name]; },\n        to_string: function()           { return JSON.stringify(this.row_data); }\n    };\n    AQ.FunctionResult.prototype.map = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n        }.bind(this)).map(fn);\n    };\n    AQ.FunctionResult.prototype.forEach = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n        }.bind(this)).forEach(fn);\n    };\n    AQ.FunctionResult.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options )  {\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.function.schema.database;\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: '=',\n            value: this.get(self_column_name)\n        });\n\n        return db.schema(schema_name).relation(relation_name).rows(options);\n    };\n    AQ.FunctionResult.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.function.schema.database;\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: '=',\n            value: this.get(self_column_name)\n        });\n\n        return db.schema(schema_name).relation(relation_name).row(options);\n    };\n\n    /*--------------------------------- * Function Result Set * ---------------------------------*/\n    AQ.FunctionResultSet = function( fn, response ) {\n        this.function = fn;\n        this.schema = fn.schema;\n        this.columns = response.columns;\n        this.rows = response.result;\n    };\n    AQ.FunctionResultSet.prototype.constructor = AQ.FunctionResultSet;\n    AQ.FunctionResultSet.prototype.map = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n        }.bind(this)).map(fn);\n    };\n    AQ.FunctionResultSet.prototype.forEach = function(fn) {\n        return this.rows.map(function(row) {\n            return new AQ.FunctionResult(this.function, { columns: this.columns, result: [ row ] });\n        }.bind(this)).forEach(fn);\n    };\n    AQ.FunctionResultSet.prototype.related_rows = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.function.schema.database;\n\n        var values = this.map(function(row) {\n            return row.get(self_column_name);\n        });\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: 'in',\n            value: values\n        });\n\n        return db.schema(schema_name).relation(relation_name).rows(options);\n    };\n    AQ.FunctionResultSet.prototype.related_row = function( self_column_name, related_relation_name, related_column_name, options ) {\n\n        var relation_parts = related_relation_name.split('.');\n        if (relation_parts.length < 2) {\n            console.error("Related relation name must be schema qualified (schema_name.relation_name)");\n            // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n        }\n\n        var schema_name = relation_parts[0];\n        var relation_name = relation_parts[1];\n        var db = this.function.schema.database;\n\n        var values = this.map(function(row) {\n            return row.get(self_column_name);\n        });\n\n        options = options || {};\n        options.where = options.where instanceof Array ? options.where : (typeof options.where == 'undefined' ?  [] : [options.where]);\n        options.where.push({\n            name: related_column_name,\n            op: 'in',\n            value: values\n        });\n\n        return db.schema(schema_name).relation(relation_name).row(options);\n\n    };\n\n    window.AQ = AQ;\n    return AQ;\n});
\\xe7d49cca61290be8f37223db523fef0f0b39fc9f894f75143c8784077fde395d	/*! jQuery v1.12.3 | (c) jQuery Foundation | jquery.org/license */\n!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=a.document,e=c.slice,f=c.concat,g=c.push,h=c.indexOf,i={},j=i.toString,k=i.hasOwnProperty,l={},m="1.12.3",n=function(a,b){return new n.fn.init(a,b)},o=/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,p=/^-ms-/,q=/-([\\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return e.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:e.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a){return n.each(this,a)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(e.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor()},push:g,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(n.isPlainObject(c)||(b=n.isArray(c)))?(b?(b=!1,f=a&&n.isArray(a)?a:[]):f=a&&n.isPlainObject(a)?a:{},g[d]=n.extend(j,f,c)):void 0!==c&&(g[d]=c));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray||function(a){return"array"===n.type(a)},isWindow:function(a){return null!=a&&a==a.window},isNumeric:function(a){var b=a&&a.toString();return!n.isArray(a)&&b-parseFloat(b)+1>=0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},isPlainObject:function(a){var b;if(!a||"object"!==n.type(a)||a.nodeType||n.isWindow(a))return!1;try{if(a.constructor&&!k.call(a,"constructor")&&!k.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}if(!l.ownFirst)for(b in a)return k.call(a,b);for(b in a);return void 0===b||k.call(a,b)},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?i[j.call(a)]||"object":typeof a},globalEval:function(b){b&&n.trim(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b){var c,d=0;if(s(a)){for(c=a.length;c>d;d++)if(b.call(a[d],d,a[d])===!1)break}else for(d in a)if(b.call(a[d],d,a[d])===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):g.call(c,a)),c},inArray:function(a,b,c){var d;if(b){if(h)return h.call(b,a,c);for(d=b.length,c=c?0>c?Math.max(0,d+c):c:0;d>c;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,b){var c=+b.length,d=0,e=a.length;while(c>d)a[e++]=b[d++];if(c!==c)while(void 0!==b[d])a[e++]=b[d++];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,e,g=0,h=[];if(s(a))for(d=a.length;d>g;g++)e=b(a[g],g,c),null!=e&&h.push(e);else for(g in a)e=b(a[g],g,c),null!=e&&h.push(e);return f.apply([],h)},guid:1,proxy:function(a,b){var c,d,f;return"string"==typeof b&&(f=a[b],b=a,a=f),n.isFunction(a)?(c=e.call(arguments,2),d=function(){return a.apply(b||this,c.concat(e.call(arguments)))},d.guid=a.guid=a.guid||n.guid++,d):void 0},now:function(){return+new Date},support:l}),"function"==typeof Symbol&&(n.fn[Symbol.iterator]=c[Symbol.iterator]),n.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(a,b){i["[object "+b+"]"]=b.toLowerCase()});function s(a){var b=!!a&&"length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ga(),z=ga(),A=ga(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\\\x20\\\\t\\\\r\\\\n\\\\f]",M="(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+",N="\\\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|("+M+"))|)"+L+"*\\\\]",O=":("+M+")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|"+N+")*)|.*)\\\\)|)",P=new RegExp(L+"+","g"),Q=new RegExp("^"+L+"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)"+L+"+$","g"),R=new RegExp("^"+L+"*,"+L+"*"),S=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),T=new RegExp("="+L+"*([^\\\\]'\\"]*?)"+L+"*\\\\]","g"),U=new RegExp(O),V=new RegExp("^"+M+"$"),W={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+N),PSEUDO:new RegExp("^"+O),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\("+L+"*(even|odd|(([+-]|)(\\\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\\\d+)|))"+L+"*\\\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\("+L+"*((?:-\\\\d)?\\\\d*)"+L+"*\\\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\\d$/i,Z=/^[^{]+\\{\\s*\\[native \\w/,$=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,_=/[+~]/,aa=/'|\\\\/g,ba=new RegExp("\\\\\\\\([\\\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),ca=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},da=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(ea){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function fa(a,b,d,e){var f,h,j,k,l,o,r,s,w=b&&b.ownerDocument,x=b?b.nodeType:9;if(d=d||[],"string"!=typeof a||!a||1!==x&&9!==x&&11!==x)return d;if(!e&&((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,p)){if(11!==x&&(o=$.exec(a)))if(f=o[1]){if(9===x){if(!(j=b.getElementById(f)))return d;if(j.id===f)return d.push(j),d}else if(w&&(j=w.getElementById(f))&&t(b,j)&&j.id===f)return d.push(j),d}else{if(o[2])return H.apply(d,b.getElementsByTagName(a)),d;if((f=o[3])&&c.getElementsByClassName&&b.getElementsByClassName)return H.apply(d,b.getElementsByClassName(f)),d}if(c.qsa&&!A[a+" "]&&(!q||!q.test(a))){if(1!==x)w=b,s=a;else if("object"!==b.nodeName.toLowerCase()){(k=b.getAttribute("id"))?k=k.replace(aa,"\\\\$&"):b.setAttribute("id",k=u),r=g(a),h=r.length,l=V.test(k)?"#"+k:"[id='"+k+"']";while(h--)r[h]=l+" "+qa(r[h]);s=r.join(","),w=_.test(a)&&oa(b.parentNode)||b}if(s)try{return H.apply(d,w.querySelectorAll(s)),d}catch(y){}finally{k===u&&b.removeAttribute("id")}}}return i(a.replace(Q,"$1"),b,d,e)}function ga(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ha(a){return a[u]=!0,a}function ia(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ja(a,b){var c=a.split("|"),e=c.length;while(e--)d.attrHandle[c[e]]=b}function ka(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function la(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function na(a){return ha(function(b){return b=+b,ha(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function oa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=fa.support={},f=fa.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=fa.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=n.documentElement,p=!f(n),(e=n.defaultView)&&e.top!==e&&(e.addEventListener?e.addEventListener("unload",da,!1):e.attachEvent&&e.attachEvent("onunload",da)),c.attributes=ia(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ia(function(a){return a.appendChild(n.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=Z.test(n.getElementsByClassName),c.getById=ia(function(a){return o.appendChild(a).id=u,!n.getElementsByName||!n.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ba,ca);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return"undefined"!=typeof b.getElementsByClassName&&p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=Z.test(n.querySelectorAll))&&(ia(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\\r\\\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\\"\\")"),a.querySelectorAll("[selected]").length||q.push("\\\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ia(function(a){var b=n.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=Z.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ia(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",O)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=Z.test(o.compareDocumentPosition),t=b||Z.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===n||a.ownerDocument===v&&t(v,a)?-1:b===n||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,g=[a],h=[b];if(!e||!f)return a===n?-1:b===n?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return ka(a,b);c=a;while(c=c.parentNode)g.unshift(c);c=b;while(c=c.parentNode)h.unshift(c);while(g[d]===h[d])d++;return d?ka(g[d],h[d]):g[d]===v?-1:h[d]===v?1:0},n):n},fa.matches=function(a,b){return fa(a,null,null,b)},fa.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(T,"='$1']"),c.matchesSelector&&p&&!A[b+" "]&&(!r||!r.test(b))&&(!q||!q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return fa(b,n,null,[a]).length>0},fa.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},fa.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},fa.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},fa.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=fa.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=fa.selectors={cacheLength:50,createPseudo:ha,match:W,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ba,ca),a[3]=(a[3]||a[4]||a[5]||"").replace(ba,ca),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||fa.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&fa.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return W.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&U.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ba,ca).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=fa.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(P," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h,t=!1;if(q){if(f){while(p){m=b;while(m=m[p])if(h?m.nodeName.toLowerCase()===r:1===m.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){m=q,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n&&j[2],m=n&&q.childNodes[n];while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if(1===m.nodeType&&++t&&m===b){k[a]=[w,n,t];break}}else if(s&&(m=b,l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),j=k[a]||[],n=j[0]===w&&j[1],t=n),t===!1)while(m=++n&&m&&m[p]||(t=n=0)||o.pop())if((h?m.nodeName.toLowerCase()===r:1===m.nodeType)&&++t&&(s&&(l=m[u]||(m[u]={}),k=l[m.uniqueID]||(l[m.uniqueID]={}),k[a]=[w,t]),m===b))break;return t-=e,t===d||t%d===0&&t/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||fa.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ha(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ha(function(a){var b=[],c=[],d=h(a.replace(Q,"$1"));return d[u]?ha(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ha(function(a){return function(b){return fa(a,b).length>0}}),contains:ha(function(a){return a=a.replace(ba,ca),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ha(function(a){return V.test(a||"")||fa.error("unsupported lang: "+a),a=a.replace(ba,ca).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Y.test(a.nodeName)},input:function(a){return X.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:na(function(){return[0]}),last:na(function(a,b){return[b-1]}),eq:na(function(a,b,c){return[0>c?c+b:c]}),even:na(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:na(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:na(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:na(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=la(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=ma(b);function pa(){}pa.prototype=d.filters=d.pseudos,d.setFilters=new pa,g=fa.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){c&&!(e=R.exec(h))||(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=S.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(Q," ")}),h=h.slice(c.length));for(g in d.filter)!(e=W[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?fa.error(a):z(a,i).slice(0)};function qa(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function ra(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j,k=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(j=b[u]||(b[u]={}),i=j[b.uniqueID]||(j[b.uniqueID]={}),(h=i[d])&&h[0]===w&&h[1]===f)return k[2]=h[2];if(i[d]=k,k[2]=a(b,c,g))return!0}}}function sa(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ta(a,b,c){for(var d=0,e=b.length;e>d;d++)fa(a,b[d],c);return c}function ua(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(c&&!c(f,d,e)||(g.push(f),j&&b.push(h)));return g}function va(a,b,c,d,e,f){return d&&!d[u]&&(d=va(d)),e&&!e[u]&&(e=va(e,f)),ha(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ta(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:ua(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=ua(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=ua(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function wa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=ra(function(a){return a===b},h,!0),l=ra(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[ra(sa(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return va(i>1&&sa(m),i>1&&qa(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(Q,"$1"),c,e>i&&wa(a.slice(i,e)),f>e&&wa(a=a.slice(e)),f>e&&qa(a))}m.push(c)}return sa(m)}function xa(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,o,q,r=0,s="0",t=f&&[],u=[],v=j,x=f||e&&d.find.TAG("*",k),y=w+=null==v?1:Math.random()||.1,z=x.length;for(k&&(j=g===n||g||k);s!==z&&null!=(l=x[s]);s++){if(e&&l){o=0,g||l.ownerDocument===n||(m(l),h=!p);while(q=a[o++])if(q(l,g||n,h)){i.push(l);break}k&&(w=y)}c&&((l=!q&&l)&&r--,f&&t.push(l))}if(r+=s,c&&s!==r){o=0;while(q=b[o++])q(t,u,g,h);if(f){if(r>0)while(s--)t[s]||u[s]||(u[s]=F.call(i));u=ua(u)}H.apply(i,u),k&&!f&&u.length>0&&r+b.length>1&&fa.uniqueSort(i)}return k&&(w=y,j=v),t};return c?ha(f):f}return h=fa.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=wa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,xa(e,d)),f.selector=a}return f},i=fa.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ba,ca),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=W.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ba,ca),_.test(j[0].type)&&oa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&qa(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,!b||_.test(a)&&oa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ia(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ia(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ja("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ia(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ja("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ia(function(a){return null==a.getAttribute("disabled")})||ja(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),fa}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.uniqueSort=n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},v=function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c},w=n.expr.match.needsContext,x=/^<([\\w-]+)\\s*\\/?>(?:<\\/\\1>|)$/,y=/^.[^:#\\[\\.,]*$/;function z(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(y.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return n.inArray(a,b)>-1!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=[],d=this,e=d.length;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;e>b;b++)if(n.contains(d[b],this))return!0}));for(b=0;e>b;b++)n.find(a,d[b],c);return c=this.pushStack(e>1?n.unique(c):c),c.selector=this.selector?this.selector+" "+a:a,c},filter:function(a){return this.pushStack(z(this,a||[],!1))},not:function(a){return this.pushStack(z(this,a||[],!0))},is:function(a){return!!z(this,"string"==typeof a&&w.test(a)?n(a):a||[],!1).length}});var A,B=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,C=n.fn.init=function(a,b,c){var e,f;if(!a)return this;if(c=c||A,"string"==typeof a){if(e="<"===a.charAt(0)&&">"===a.charAt(a.length-1)&&a.length>=3?[null,a,null]:B.exec(a),!e||!e[1]&&b)return!b||b.jquery?(b||c).find(a):this.constructor(b).find(a);if(e[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(e[1],b&&b.nodeType?b.ownerDocument||b:d,!0)),x.test(e[1])&&n.isPlainObject(b))for(e in b)n.isFunction(this[e])?this[e](b[e]):this.attr(e,b[e]);return this}if(f=d.getElementById(e[2]),f&&f.parentNode){if(f.id!==e[2])return A.find(a);this.length=1,this[0]=f}return this.context=d,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof c.ready?c.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};C.prototype=n.fn,A=n(d);var D=/^(?:parents|prev(?:Until|All))/,E={children:!0,contents:!0,next:!0,prev:!0};n.fn.extend({has:function(a){var b,c=n(a,this),d=c.length;return this.filter(function(){for(b=0;d>b;b++)if(n.contains(this,c[b]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=w.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.uniqueSort(f):f)},index:function(a){return a?"string"==typeof a?n.inArray(this[0],n(a)):n.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.uniqueSort(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function F(a,b){do a=a[b];while(a&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return u(a,"parentNode")},parentsUntil:function(a,b,c){return u(a,"parentNode",c)},next:function(a){return F(a,"nextSibling")},prev:function(a){return F(a,"previousSibling")},nextAll:function(a){return u(a,"nextSibling")},prevAll:function(a){return u(a,"previousSibling")},nextUntil:function(a,b,c){return u(a,"nextSibling",c)},prevUntil:function(a,b,c){return u(a,"previousSibling",c)},siblings:function(a){return v((a.parentNode||{}).firstChild,a)},children:function(a){return v(a.firstChild)},contents:function(a){return n.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(E[a]||(e=n.uniqueSort(e)),D.test(a)&&(e=e.reverse())),this.pushStack(e)}});var G=/\\S+/g;function H(a){var b={};return n.each(a.match(G)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?H(a):n.extend({},a);var b,c,d,e,f=[],g=[],h=-1,i=function(){for(e=a.once,d=b=!0;g.length;h=-1){c=g.shift();while(++h<f.length)f[h].apply(c[0],c[1])===!1&&a.stopOnFalse&&(h=f.length,c=!1)}a.memory||(c=!1),b=!1,e&&(f=c?[]:"")},j={add:function(){return f&&(c&&!b&&(h=f.length-1,g.push(c)),function d(b){n.each(b,function(b,c){n.isFunction(c)?a.unique&&j.has(c)||f.push(c):c&&c.length&&"string"!==n.type(c)&&d(c)})}(arguments),c&&!b&&i()),this},remove:function(){return n.each(arguments,function(a,b){var c;while((c=n.inArray(b,f,c))>-1)f.splice(c,1),h>=c&&h--}),this},has:function(a){return a?n.inArray(a,f)>-1:f.length>0},empty:function(){return f&&(f=[]),this},disable:function(){return e=g=[],f=c="",this},disabled:function(){return!f},lock:function(){return e=!0,c||j.disable(),this},locked:function(){return!!e},fireWith:function(a,c){return e||(c=c||[],c=[a,c.slice?c.slice():c],g.push(c),b||i()),this},fire:function(){return j.fireWith(this,arguments),this},fired:function(){return!!d}};return j},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().progress(c.notify).done(c.resolve).fail(c.reject):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=e.call(arguments),d=c.length,f=1!==d||a&&n.isFunction(a.promise)?d:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?e.call(arguments):d,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(d>1)for(i=new Array(d),j=new Array(d),k=new Array(d);d>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().progress(h(b,j,i)).done(h(b,k,c)).fail(g.reject):--f;return f||g.resolveWith(k,c),g.promise()}});var I;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(I.resolveWith(d,[n]),n.fn.triggerHandler&&(n(d).triggerHandler("ready"),n(d).off("ready"))))}});function J(){d.addEventListener?(d.removeEventListener("DOMContentLoaded",K),a.removeEventListener("load",K)):(d.detachEvent("onreadystatechange",K),a.detachEvent("onload",K))}function K(){(d.addEventListener||"load"===a.event.type||"complete"===d.readyState)&&(J(),n.ready())}n.ready.promise=function(b){if(!I)if(I=n.Deferred(),"complete"===d.readyState||"loading"!==d.readyState&&!d.documentElement.doScroll)a.setTimeout(n.ready);else if(d.addEventListener)d.addEventListener("DOMContentLoaded",K),a.addEventListener("load",K);else{d.attachEvent("onreadystatechange",K),a.attachEvent("onload",K);var c=!1;try{c=null==a.frameElement&&d.documentElement}catch(e){}c&&c.doScroll&&!function f(){if(!n.isReady){try{c.doScroll("left")}catch(b){return a.setTimeout(f,50)}J(),n.ready()}}()}return I.promise(b)},n.ready.promise();var L;for(L in n(l))break;l.ownFirst="0"===L,l.inlineBlockNeedsLayout=!1,n(function(){var a,b,c,e;c=d.getElementsByTagName("body")[0],c&&c.style&&(b=d.createElement("div"),e=d.createElement("div"),e.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(e).appendChild(b),"undefined"!=typeof b.style.zoom&&(b.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",l.inlineBlockNeedsLayout=a=3===b.offsetWidth,a&&(c.style.zoom=1)),c.removeChild(e))}),function(){var a=d.createElement("div");l.deleteExpando=!0;try{delete a.test}catch(b){l.deleteExpando=!1}a=null}();var M=function(a){var b=n.noData[(a.nodeName+" ").toLowerCase()],c=+a.nodeType||1;return 1!==c&&9!==c?!1:!b||b!==!0&&a.getAttribute("classid")===b},N=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,O=/([A-Z])/g;function P(a,b,c){if(void 0===c&&1===a.nodeType){var d="data-"+b.replace(O,"-$1").toLowerCase();if(c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}n.data(a,b,c)}else c=void 0;\n}return c}function Q(a){var b;for(b in a)if(("data"!==b||!n.isEmptyObject(a[b]))&&"toJSON"!==b)return!1;return!0}function R(a,b,d,e){if(M(a)){var f,g,h=n.expando,i=a.nodeType,j=i?n.cache:a,k=i?a[h]:a[h]&&h;if(k&&j[k]&&(e||j[k].data)||void 0!==d||"string"!=typeof b)return k||(k=i?a[h]=c.pop()||n.guid++:h),j[k]||(j[k]=i?{}:{toJSON:n.noop}),"object"!=typeof b&&"function"!=typeof b||(e?j[k]=n.extend(j[k],b):j[k].data=n.extend(j[k].data,b)),g=j[k],e||(g.data||(g.data={}),g=g.data),void 0!==d&&(g[n.camelCase(b)]=d),"string"==typeof b?(f=g[b],null==f&&(f=g[n.camelCase(b)])):f=g,f}}function S(a,b,c){if(M(a)){var d,e,f=a.nodeType,g=f?n.cache:a,h=f?a[n.expando]:n.expando;if(g[h]){if(b&&(d=c?g[h]:g[h].data)){n.isArray(b)?b=b.concat(n.map(b,n.camelCase)):b in d?b=[b]:(b=n.camelCase(b),b=b in d?[b]:b.split(" ")),e=b.length;while(e--)delete d[b[e]];if(c?!Q(d):!n.isEmptyObject(d))return}(c||(delete g[h].data,Q(g[h])))&&(f?n.cleanData([a],!0):l.deleteExpando||g!=g.window?delete g[h]:g[h]=void 0)}}}n.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(a){return a=a.nodeType?n.cache[a[n.expando]]:a[n.expando],!!a&&!Q(a)},data:function(a,b,c){return R(a,b,c)},removeData:function(a,b){return S(a,b)},_data:function(a,b,c){return R(a,b,c,!0)},_removeData:function(a,b){return S(a,b,!0)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=n.data(f),1===f.nodeType&&!n._data(f,"parsedAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));n._data(f,"parsedAttrs",!0)}return e}return"object"==typeof a?this.each(function(){n.data(this,a)}):arguments.length>1?this.each(function(){n.data(this,a,b)}):f?P(f,a,n.data(f,a)):void 0},removeData:function(a){return this.each(function(){n.removeData(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=n._data(a,b),c&&(!d||n.isArray(c)?d=n._data(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return n._data(a,c)||n._data(a,c,{empty:n.Callbacks("once memory").add(function(){n._removeData(a,b+"queue"),n._removeData(a,c)})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=n._data(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}}),function(){var a;l.shrinkWrapBlocks=function(){if(null!=a)return a;a=!1;var b,c,e;return c=d.getElementsByTagName("body")[0],c&&c.style?(b=d.createElement("div"),e=d.createElement("div"),e.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",c.appendChild(e).appendChild(b),"undefined"!=typeof b.style.zoom&&(b.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",b.appendChild(d.createElement("div")).style.width="5px",a=3!==b.offsetWidth),c.removeChild(e),a):void 0}}();var T=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,U=new RegExp("^(?:([+-])=|)("+T+")([a-z%]*)$","i"),V=["Top","Right","Bottom","Left"],W=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)};function X(a,b,c,d){var e,f=1,g=20,h=d?function(){return d.cur()}:function(){return n.css(a,b,"")},i=h(),j=c&&c[3]||(n.cssNumber[b]?"":"px"),k=(n.cssNumber[b]||"px"!==j&&+i)&&U.exec(n.css(a,b));if(k&&k[3]!==j){j=j||k[3],c=c||[],k=+i||1;do f=f||".5",k/=f,n.style(a,b,k+j);while(f!==(f=h()/i)&&1!==f&&--g)}return c&&(k=+k||+i||0,e=c[1]?k+(c[1]+1)*c[2]:+c[2],d&&(d.unit=j,d.start=k,d.end=e)),e}var Y=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)Y(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f},Z=/^(?:checkbox|radio)$/i,$=/<([\\w:-]+)/,_=/^$|\\/(?:java|ecma)script/i,aa=/^\\s+/,ba="abbr|article|aside|audio|bdi|canvas|data|datalist|details|dialog|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|picture|progress|section|summary|template|time|video";function ca(a){var b=ba.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}!function(){var a=d.createElement("div"),b=d.createDocumentFragment(),c=d.createElement("input");a.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",l.leadingWhitespace=3===a.firstChild.nodeType,l.tbody=!a.getElementsByTagName("tbody").length,l.htmlSerialize=!!a.getElementsByTagName("link").length,l.html5Clone="<:nav></:nav>"!==d.createElement("nav").cloneNode(!0).outerHTML,c.type="checkbox",c.checked=!0,b.appendChild(c),l.appendChecked=c.checked,a.innerHTML="<textarea>x</textarea>",l.noCloneChecked=!!a.cloneNode(!0).lastChild.defaultValue,b.appendChild(a),c=d.createElement("input"),c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),a.appendChild(c),l.checkClone=a.cloneNode(!0).cloneNode(!0).lastChild.checked,l.noCloneEvent=!!a.addEventListener,a[n.expando]=1,l.attributes=!a.getAttribute(n.expando)}();var da={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:l.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]};da.optgroup=da.option,da.tbody=da.tfoot=da.colgroup=da.caption=da.thead,da.th=da.td;function ea(a,b){var c,d,e=0,f="undefined"!=typeof a.getElementsByTagName?a.getElementsByTagName(b||"*"):"undefined"!=typeof a.querySelectorAll?a.querySelectorAll(b||"*"):void 0;if(!f)for(f=[],c=a.childNodes||a;null!=(d=c[e]);e++)!b||n.nodeName(d,b)?f.push(d):n.merge(f,ea(d,b));return void 0===b||b&&n.nodeName(a,b)?n.merge([a],f):f}function fa(a,b){for(var c,d=0;null!=(c=a[d]);d++)n._data(c,"globalEval",!b||n._data(b[d],"globalEval"))}var ga=/<|&#?\\w+;/,ha=/<tbody/i;function ia(a){Z.test(a.type)&&(a.defaultChecked=a.checked)}function ja(a,b,c,d,e){for(var f,g,h,i,j,k,m,o=a.length,p=ca(b),q=[],r=0;o>r;r++)if(g=a[r],g||0===g)if("object"===n.type(g))n.merge(q,g.nodeType?[g]:g);else if(ga.test(g)){i=i||p.appendChild(b.createElement("div")),j=($.exec(g)||["",""])[1].toLowerCase(),m=da[j]||da._default,i.innerHTML=m[1]+n.htmlPrefilter(g)+m[2],f=m[0];while(f--)i=i.lastChild;if(!l.leadingWhitespace&&aa.test(g)&&q.push(b.createTextNode(aa.exec(g)[0])),!l.tbody){g="table"!==j||ha.test(g)?"<table>"!==m[1]||ha.test(g)?0:i:i.firstChild,f=g&&g.childNodes.length;while(f--)n.nodeName(k=g.childNodes[f],"tbody")&&!k.childNodes.length&&g.removeChild(k)}n.merge(q,i.childNodes),i.textContent="";while(i.firstChild)i.removeChild(i.firstChild);i=p.lastChild}else q.push(b.createTextNode(g));i&&p.removeChild(i),l.appendChecked||n.grep(ea(q,"input"),ia),r=0;while(g=q[r++])if(d&&n.inArray(g,d)>-1)e&&e.push(g);else if(h=n.contains(g.ownerDocument,g),i=ea(p.appendChild(g),"script"),h&&fa(i),c){f=0;while(g=i[f++])_.test(g.type||"")&&c.push(g)}return i=null,p}!function(){var b,c,e=d.createElement("div");for(b in{submit:!0,change:!0,focusin:!0})c="on"+b,(l[b]=c in a)||(e.setAttribute(c,"t"),l[b]=e.attributes[c].expando===!1);e=null}();var ka=/^(?:input|select|textarea)$/i,la=/^key/,ma=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,na=/^(?:focusinfocus|focusoutblur)$/,oa=/^([^.]*)(?:\\.(.+)|)/;function pa(){return!0}function qa(){return!1}function ra(){try{return d.activeElement}catch(a){}}function sa(a,b,c,d,e,f){var g,h;if("object"==typeof b){"string"!=typeof c&&(d=d||c,c=void 0);for(h in b)sa(a,h,c,d,b[h],f);return a}if(null==d&&null==e?(e=c,d=c=void 0):null==e&&("string"==typeof c?(e=d,d=void 0):(e=d,d=c,c=void 0)),e===!1)e=qa;else if(!e)return a;return 1===f&&(g=e,e=function(a){return n().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=n.guid++)),a.each(function(){n.event.add(this,b,e,d,c)})}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n._data(a);if(r){c.handler&&(i=c,c=i.handler,e=i.selector),c.guid||(c.guid=n.guid++),(g=r.events)||(g=r.events={}),(k=r.handle)||(k=r.handle=function(a){return"undefined"==typeof n||a&&n.event.triggered===a.type?void 0:n.event.dispatch.apply(k.elem,arguments)},k.elem=a),b=(b||"").match(G)||[""],h=b.length;while(h--)f=oa.exec(b[h])||[],o=q=f[1],p=(f[2]||"").split(".").sort(),o&&(j=n.event.special[o]||{},o=(e?j.delegateType:j.bindType)||o,j=n.event.special[o]||{},l=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},i),(m=g[o])||(m=g[o]=[],m.delegateCount=0,j.setup&&j.setup.call(a,d,p,k)!==!1||(a.addEventListener?a.addEventListener(o,k,!1):a.attachEvent&&a.attachEvent("on"+o,k))),j.add&&(j.add.call(a,l),l.handler.guid||(l.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,l):m.push(l),n.event.global[o]=!0);a=null}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=n.hasData(a)&&n._data(a);if(r&&(k=r.events)){b=(b||"").match(G)||[""],j=b.length;while(j--)if(h=oa.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=k[o]||[],h=h[2]&&new RegExp("(^|\\\\.)"+p.join("\\\\.(?:.*\\\\.|)")+"(\\\\.|$)"),i=f=m.length;while(f--)g=m[f],!e&&q!==g.origType||c&&c.guid!==g.guid||h&&!h.test(g.namespace)||d&&d!==g.selector&&("**"!==d||!g.selector)||(m.splice(f,1),g.selector&&m.delegateCount--,l.remove&&l.remove.call(a,g));i&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete k[o])}else for(o in k)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(k)&&(delete r.handle,n._removeData(a,"events"))}},trigger:function(b,c,e,f){var g,h,i,j,l,m,o,p=[e||d],q=k.call(b,"type")?b.type:b,r=k.call(b,"namespace")?b.namespace.split("."):[];if(i=m=e=e||d,3!==e.nodeType&&8!==e.nodeType&&!na.test(q+n.event.triggered)&&(q.indexOf(".")>-1&&(r=q.split("."),q=r.shift(),r.sort()),h=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=f?2:3,b.namespace=r.join("."),b.rnamespace=b.namespace?new RegExp("(^|\\\\.)"+r.join("\\\\.(?:.*\\\\.|)")+"(\\\\.|$)"):null,b.result=void 0,b.target||(b.target=e),c=null==c?[b]:n.makeArray(c,[b]),l=n.event.special[q]||{},f||!l.trigger||l.trigger.apply(e,c)!==!1)){if(!f&&!l.noBubble&&!n.isWindow(e)){for(j=l.delegateType||q,na.test(j+q)||(i=i.parentNode);i;i=i.parentNode)p.push(i),m=i;m===(e.ownerDocument||d)&&p.push(m.defaultView||m.parentWindow||a)}o=0;while((i=p[o++])&&!b.isPropagationStopped())b.type=o>1?j:l.bindType||q,g=(n._data(i,"events")||{})[b.type]&&n._data(i,"handle"),g&&g.apply(i,c),g=h&&i[h],g&&g.apply&&M(i)&&(b.result=g.apply(i,c),b.result===!1&&b.preventDefault());if(b.type=q,!f&&!b.isDefaultPrevented()&&(!l._default||l._default.apply(p.pop(),c)===!1)&&M(e)&&h&&e[q]&&!n.isWindow(e)){m=e[h],m&&(e[h]=null),n.event.triggered=q;try{e[q]()}catch(s){}n.event.triggered=void 0,m&&(e[h]=m)}return b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,d,f,g,h=[],i=e.call(arguments),j=(n._data(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())a.rnamespace&&!a.rnamespace.test(g.namespace)||(a.handleObj=g,a.data=g.data,d=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==d&&(a.result=d)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&("click"!==a.type||isNaN(a.button)||a.button<1))for(;i!=this;i=i.parentNode||this)if(1===i.nodeType&&(i.disabled!==!0||"click"!==a.type)){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>-1:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},fix:function(a){if(a[n.expando])return a;var b,c,e,f=a.type,g=a,h=this.fixHooks[f];h||(this.fixHooks[f]=h=ma.test(f)?this.mouseHooks:la.test(f)?this.keyHooks:{}),e=h.props?this.props.concat(h.props):this.props,a=new n.Event(g),b=e.length;while(b--)c=e[b],a[c]=g[c];return a.target||(a.target=g.srcElement||d),3===a.target.nodeType&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,h.filter?h.filter(a,g):a},props:"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,e,f,g=b.button,h=b.fromElement;return null==a.pageX&&null!=b.clientX&&(e=a.target.ownerDocument||d,f=e.documentElement,c=e.body,a.pageX=b.clientX+(f&&f.scrollLeft||c&&c.scrollLeft||0)-(f&&f.clientLeft||c&&c.clientLeft||0),a.pageY=b.clientY+(f&&f.scrollTop||c&&c.scrollTop||0)-(f&&f.clientTop||c&&c.clientTop||0)),!a.relatedTarget&&h&&(a.relatedTarget=h===a.target?b.toElement:h),a.which||void 0===g||(a.which=1&g?1:2&g?3:4&g?2:0),a}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==ra()&&this.focus)try{return this.focus(),!1}catch(a){}},delegateType:"focusin"},blur:{trigger:function(){return this===ra()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return n.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c){var d=n.extend(new n.Event,c,{type:a,isSimulated:!0});n.event.trigger(d,null,b),d.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=d.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c)}:function(a,b,c){var d="on"+b;a.detachEvent&&("undefined"==typeof a[d]&&(a[d]=null),a.detachEvent(d,c))},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?pa:qa):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={constructor:n.Event,isDefaultPrevented:qa,isPropagationStopped:qa,isImmediatePropagationStopped:qa,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=pa,a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=pa,a&&!this.isSimulated&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=pa,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return e&&(e===d||n.contains(d,e))||(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),l.submit||(n.event.special.submit={setup:function(){return n.nodeName(this,"form")?!1:void n.event.add(this,"click._submit keypress._submit",function(a){var b=a.target,c=n.nodeName(b,"input")||n.nodeName(b,"button")?n.prop(b,"form"):void 0;c&&!n._data(c,"submit")&&(n.event.add(c,"submit._submit",function(a){a._submitBubble=!0}),n._data(c,"submit",!0))})},postDispatch:function(a){a._submitBubble&&(delete a._submitBubble,this.parentNode&&!a.isTrigger&&n.event.simulate("submit",this.parentNode,a))},teardown:function(){return n.nodeName(this,"form")?!1:void n.event.remove(this,"._submit")}}),l.change||(n.event.special.change={setup:function(){return ka.test(this.nodeName)?("checkbox"!==this.type&&"radio"!==this.type||(n.event.add(this,"propertychange._change",function(a){"checked"===a.originalEvent.propertyName&&(this._justChanged=!0)}),n.event.add(this,"click._change",function(a){this._justChanged&&!a.isTrigger&&(this._justChanged=!1),n.event.simulate("change",this,a)})),!1):void n.event.add(this,"beforeactivate._change",function(a){var b=a.target;ka.test(b.nodeName)&&!n._data(b,"change")&&(n.event.add(b,"change._change",function(a){!this.parentNode||a.isSimulated||a.isTrigger||n.event.simulate("change",this.parentNode,a)}),n._data(b,"change",!0))})},handle:function(a){var b=a.target;return this!==b||a.isSimulated||a.isTrigger||"radio"!==b.type&&"checkbox"!==b.type?a.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return n.event.remove(this,"._change"),!ka.test(this.nodeName)}}),l.focusin||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a))};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=n._data(d,b);e||d.addEventListener(a,c,!0),n._data(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=n._data(d,b)-1;e?n._data(d,b,e):(d.removeEventListener(a,c,!0),n._removeData(d,b))}}}),n.fn.extend({on:function(a,b,c,d){return sa(this,a,b,c,d)},one:function(a,b,c,d){return sa(this,a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return b!==!1&&"function"!=typeof b||(c=b,b=void 0),c===!1&&(c=qa),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var ta=/ jQuery\\d+="(?:null|\\d+)"/g,ua=new RegExp("<(?:"+ba+")[\\\\s/>]","i"),va=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:-]+)[^>]*)\\/>/gi,wa=/<script|<style|<link/i,xa=/checked\\s*(?:[^=]|=\\s*.checked.)/i,ya=/^true\\/(.*)/,za=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,Aa=ca(d),Ba=Aa.appendChild(d.createElement("div"));function Ca(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function Da(a){return a.type=(null!==n.find.attr(a,"type"))+"/"+a.type,a}function Ea(a){var b=ya.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function Fa(a,b){if(1===b.nodeType&&n.hasData(a)){var c,d,e,f=n._data(a),g=n._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;e>d;d++)n.event.add(b,c,h[c][d])}g.data&&(g.data=n.extend({},g.data))}}function Ga(a,b){var c,d,e;if(1===b.nodeType){if(c=b.nodeName.toLowerCase(),!l.noCloneEvent&&b[n.expando]){e=n._data(b);for(d in e.events)n.removeEvent(b,d,e.handle);b.removeAttribute(n.expando)}"script"===c&&b.text!==a.text?(Da(b).text=a.text,Ea(b)):"object"===c?(b.parentNode&&(b.outerHTML=a.outerHTML),l.html5Clone&&a.innerHTML&&!n.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):"input"===c&&Z.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):"option"===c?b.defaultSelected=b.selected=a.defaultSelected:"input"!==c&&"textarea"!==c||(b.defaultValue=a.defaultValue)}}function Ha(a,b,c,d){b=f.apply([],b);var e,g,h,i,j,k,m=0,o=a.length,p=o-1,q=b[0],r=n.isFunction(q);if(r||o>1&&"string"==typeof q&&!l.checkClone&&xa.test(q))return a.each(function(e){var f=a.eq(e);r&&(b[0]=q.call(this,e,f.html())),Ha(f,b,c,d)});if(o&&(k=ja(b,a[0].ownerDocument,!1,a,d),e=k.firstChild,1===k.childNodes.length&&(k=e),e||d)){for(i=n.map(ea(k,"script"),Da),h=i.length;o>m;m++)g=k,m!==p&&(g=n.clone(g,!0,!0),h&&n.merge(i,ea(g,"script"))),c.call(a[m],g,m);if(h)for(j=i[i.length-1].ownerDocument,n.map(i,Ea),m=0;h>m;m++)g=i[m],_.test(g.type||"")&&!n._data(g,"globalEval")&&n.contains(j,g)&&(g.src?n._evalUrl&&n._evalUrl(g.src):n.globalEval((g.text||g.textContent||g.innerHTML||"").replace(za,"")));k=e=null}return a}function Ia(a,b,c){for(var d,e=b?n.filter(b,a):a,f=0;null!=(d=e[f]);f++)c||1!==d.nodeType||n.cleanData(ea(d)),d.parentNode&&(c&&n.contains(d.ownerDocument,d)&&fa(ea(d,"script")),d.parentNode.removeChild(d));return a}n.extend({htmlPrefilter:function(a){return a.replace(va,"<$1></$2>")},clone:function(a,b,c){var d,e,f,g,h,i=n.contains(a.ownerDocument,a);if(l.html5Clone||n.isXMLDoc(a)||!ua.test("<"+a.nodeName+">")?f=a.cloneNode(!0):(Ba.innerHTML=a.outerHTML,Ba.removeChild(f=Ba.firstChild)),!(l.noCloneEvent&&l.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(d=ea(f),h=ea(a),g=0;null!=(e=h[g]);++g)d[g]&&Ga(e,d[g]);if(b)if(c)for(h=h||ea(a),d=d||ea(f),g=0;null!=(e=h[g]);g++)Fa(e,d[g]);else Fa(a,f);return d=ea(f,"script"),d.length>0&&fa(d,!i&&ea(a,"script")),d=h=e=null,f},cleanData:function(a,b){for(var d,e,f,g,h=0,i=n.expando,j=n.cache,k=l.attributes,m=n.event.special;null!=(d=a[h]);h++)if((b||M(d))&&(f=d[i],g=f&&j[f])){if(g.events)for(e in g.events)m[e]?n.event.remove(d,e):n.removeEvent(d,e,g.handle);j[f]&&(delete j[f],k||"undefined"==typeof d.removeAttribute?d[i]=void 0:d.removeAttribute(i),c.push(f))}}}),n.fn.extend({domManip:Ha,detach:function(a){return Ia(this,a,!0)},remove:function(a){return Ia(this,a)},text:function(a){return Y(this,function(a){return void 0===a?n.text(this):this.empty().append((this[0]&&this[0].ownerDocument||d).createTextNode(a))},null,a,arguments.length)},append:function(){return Ha(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ca(this,a);b.appendChild(a)}})},prepend:function(){return Ha(this,arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=Ca(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return Ha(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return Ha(this,arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},empty:function(){for(var a,b=0;null!=(a=this[b]);b++){1===a.nodeType&&n.cleanData(ea(a,!1));while(a.firstChild)a.removeChild(a.firstChild);a.options&&n.nodeName(a,"select")&&(a.options.length=0)}return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return Y(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a)return 1===b.nodeType?b.innerHTML.replace(ta,""):void 0;if("string"==typeof a&&!wa.test(a)&&(l.htmlSerialize||!ua.test(a))&&(l.leadingWhitespace||!aa.test(a))&&!da[($.exec(a)||["",""])[1].toLowerCase()]){a=n.htmlPrefilter(a);try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(ea(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=[];return Ha(this,arguments,function(b){var c=this.parentNode;n.inArray(this,a)<0&&(n.cleanData(ea(this)),c&&c.replaceChild(b,this))},a)}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=0,e=[],f=n(a),h=f.length-1;h>=d;d++)c=d===h?this:this.clone(!0),n(f[d])[b](c),g.apply(e,c.get());return this.pushStack(e)}});var Ja,Ka={HTML:"block",BODY:"block"};function La(a,b){var c=n(b.createElement(a)).appendTo(b.body),d=n.css(c[0],"display");return c.detach(),d}function Ma(a){var b=d,c=Ka[a];return c||(c=La(a,b),"none"!==c&&c||(Ja=(Ja||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=(Ja[0].contentWindow||Ja[0].contentDocument).document,b.write(),b.close(),c=La(a,b),Ja.detach()),Ka[a]=c),c}var Na=/^margin/,Oa=new RegExp("^("+T+")(?!px)[a-z%]+$","i"),Pa=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e},Qa=d.documentElement;!function(){var b,c,e,f,g,h,i=d.createElement("div"),j=d.createElement("div");if(j.style){j.style.cssText="float:left;opacity:.5",l.opacity="0.5"===j.style.opacity,l.cssFloat=!!j.style.cssFloat,j.style.backgroundClip="content-box",j.cloneNode(!0).style.backgroundClip="",l.clearCloneStyle="content-box"===j.style.backgroundClip,i=d.createElement("div"),i.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",j.innerHTML="",i.appendChild(j),l.boxSizing=""===j.style.boxSizing||""===j.style.MozBoxSizing||""===j.style.WebkitBoxSizing,n.extend(l,{reliableHiddenOffsets:function(){return null==b&&k(),f},boxSizingReliable:function(){return null==b&&k(),e},pixelMarginRight:function(){return null==b&&k(),c},pixelPosition:function(){return null==b&&k(),b},reliableMarginRight:function(){return null==b&&k(),g},reliableMarginLeft:function(){return null==b&&k(),h}});function k(){var k,l,m=d.documentElement;m.appendChild(i),j.style.cssText="-webkit-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",b=e=h=!1,c=g=!0,a.getComputedStyle&&(l=a.getComputedStyle(j),b="1%"!==(l||{}).top,h="2px"===(l||{}).marginLeft,e="4px"===(l||{width:"4px"}).width,j.style.marginRight="50%",c="4px"===(l||{marginRight:"4px"}).marginRight,k=j.appendChild(d.createElement("div")),k.style.cssText=j.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",k.style.marginRight=k.style.width="0",j.style.width="1px",g=!parseFloat((a.getComputedStyle(k)||{}).marginRight),j.removeChild(k)),j.style.display="none",f=0===j.getClientRects().length,f&&(j.style.display="",j.innerHTML="<table><tr><td></td><td>t</td></tr></table>",k=j.getElementsByTagName("td"),k[0].style.cssText="margin:0;border:0;padding:0;display:none",f=0===k[0].offsetHeight,f&&(k[0].style.display="",k[1].style.display="none",f=0===k[0].offsetHeight)),m.removeChild(i)}}}();var Ra,Sa,Ta=/^(top|right|bottom|left)$/;a.getComputedStyle?(Ra=function(b){var c=b.ownerDocument.defaultView;return c&&c.opener||(c=a),c.getComputedStyle(b)},Sa=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ra(a),g=c?c.getPropertyValue(b)||c[b]:void 0,""!==g&&void 0!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),c&&!l.pixelMarginRight()&&Oa.test(g)&&Na.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f),void 0===g?g:g+""}):Qa.currentStyle&&(Ra=function(a){return a.currentStyle},Sa=function(a,b,c){var d,e,f,g,h=a.style;return c=c||Ra(a),g=c?c[b]:void 0,null==g&&h&&h[b]&&(g=h[b]),Oa.test(g)&&!Ta.test(b)&&(d=h.left,e=a.runtimeStyle,f=e&&e.left,f&&(e.left=a.currentStyle.left),h.left="fontSize"===b?"1em":g,g=h.pixelLeft+"px",h.left=d,f&&(e.left=f)),void 0===g?g:g+""||"auto"});function Ua(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}var Va=/alpha\\([^)]*\\)/i,Wa=/opacity\\s*=\\s*([^)]*)/i,Xa=/^(none|table(?!-c[ea]).+)/,Ya=new RegExp("^("+T+")(.*)$","i"),Za={position:"absolute",visibility:"hidden",display:"block"},$a={letterSpacing:"0",fontWeight:"400"},_a=["Webkit","O","Moz","ms"],ab=d.createElement("div").style;function bb(a){if(a in ab)return a;var b=a.charAt(0).toUpperCase()+a.slice(1),c=_a.length;while(c--)if(a=_a[c]+b,a in ab)return a}function cb(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=n._data(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&W(d)&&(f[g]=n._data(d,"olddisplay",Ma(d.nodeName)))):(e=W(d),(c&&"none"!==c||!e)&&n._data(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}function db(a,b,c){var d=Ya.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function eb(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+V[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+V[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+V[f]+"Width",!0,e))):(g+=n.css(a,"padding"+V[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+V[f]+"Width",!0,e)));return g}function fb(b,c,e){var f=!0,g="width"===c?b.offsetWidth:b.offsetHeight,h=Ra(b),i=l.boxSizing&&"border-box"===n.css(b,"boxSizing",!1,h);if(d.msFullscreenElement&&a.top!==a&&b.getClientRects().length&&(g=Math.round(100*b.getBoundingClientRect()[c])),0>=g||null==g){if(g=Sa(b,c,h),(0>g||null==g)&&(g=b.style[c]),Oa.test(g))return g;f=i&&(l.boxSizingReliable()||g===b.style[c]),g=parseFloat(g)||0}return g+eb(b,c,e||(i?"border":"content"),f,h)+"px"}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=Sa(a,"opacity");return""===c?"1":c}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":l.cssFloat?"cssFloat":"styleFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;if(b=n.cssProps[h]||(n.cssProps[h]=bb(h)||h),g=n.cssHooks[b]||n.cssHooks[h],void 0===c)return g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b];if(f=typeof c,"string"===f&&(e=U.exec(c))&&e[1]&&(c=X(a,b,e),f="number"),null!=c&&c===c&&("number"===f&&(c+=e&&e[3]||(n.cssNumber[h]?"":"px")),l.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),!(g&&"set"in g&&void 0===(c=g.set(a,c,d)))))try{i[b]=c}catch(j){}}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=bb(h)||h),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(f=g.get(a,!0,c)),void 0===f&&(f=Sa(a,b,d)),"normal"===f&&b in $a&&(f=$a[b]),""===c||c?(e=parseFloat(f),c===!0||isFinite(e)?e||0:f):f}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?Xa.test(n.css(a,"display"))&&0===a.offsetWidth?Pa(a,Za,function(){return fb(a,b,d)}):fb(a,b,d):void 0},set:function(a,c,d){var e=d&&Ra(a);return db(a,c,d?eb(a,b,d,l.boxSizing&&"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),l.opacity||(n.cssHooks.opacity={get:function(a,b){return Wa.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=n.isNumeric(b)?"alpha(opacity="+100*b+")":"",f=d&&d.filter||c.filter||"";c.zoom=1,(b>=1||""===b)&&""===n.trim(f.replace(Va,""))&&c.removeAttribute&&(c.removeAttribute("filter"),""===b||d&&!d.filter)||(c.filter=Va.test(f)?f.replace(Va,e):f+" "+e)}}),n.cssHooks.marginRight=Ua(l.reliableMarginRight,function(a,b){return b?Pa(a,{display:"inline-block"},Sa,[a,"marginRight"]):void 0}),n.cssHooks.marginLeft=Ua(l.reliableMarginLeft,function(a,b){\nreturn b?(parseFloat(Sa(a,"marginLeft"))||(n.contains(a.ownerDocument,a)?a.getBoundingClientRect().left-Pa(a,{marginLeft:0},function(){return a.getBoundingClientRect().left}):0))+"px":void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+V[d]+b]=f[d]||f[d-2]||f[0];return e}},Na.test(a)||(n.cssHooks[a+b].set=db)}),n.fn.extend({css:function(a,b){return Y(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=Ra(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return cb(this,!0)},hide:function(){return cb(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){W(this)?n(this).show():n(this).hide()})}});function gb(a,b,c,d,e){return new gb.prototype.init(a,b,c,d,e)}n.Tween=gb,gb.prototype={constructor:gb,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||n.easing._default,this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=gb.propHooks[this.prop];return a&&a.get?a.get(this):gb.propHooks._default.get(this)},run:function(a){var b,c=gb.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):gb.propHooks._default.set(this),this}},gb.prototype.init.prototype=gb.prototype,gb.propHooks={_default:{get:function(a){var b;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0)},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):1!==a.elem.nodeType||null==a.elem.style[n.cssProps[a.prop]]&&!n.cssHooks[a.prop]?a.elem[a.prop]=a.now:n.style(a.elem,a.prop,a.now+a.unit)}}},gb.propHooks.scrollTop=gb.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},n.fx=gb.prototype.init,n.fx.step={};var hb,ib,jb=/^(?:toggle|show|hide)$/,kb=/queueHooks$/;function lb(){return a.setTimeout(function(){hb=void 0}),hb=n.now()}function mb(a,b){var c,d={height:a},e=0;for(b=b?1:0;4>e;e+=2-b)c=V[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function nb(a,b,c){for(var d,e=(qb.tweeners[b]||[]).concat(qb.tweeners["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function ob(a,b,c){var d,e,f,g,h,i,j,k,m=this,o={},p=a.style,q=a.nodeType&&W(a),r=n._data(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,m.always(function(){m.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[p.overflow,p.overflowX,p.overflowY],j=n.css(a,"display"),k="none"===j?n._data(a,"olddisplay")||Ma(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(l.inlineBlockNeedsLayout&&"inline"!==Ma(a.nodeName)?p.zoom=1:p.display="inline-block")),c.overflow&&(p.overflow="hidden",l.shrinkWrapBlocks()||m.always(function(){p.overflow=c.overflow[0],p.overflowX=c.overflow[1],p.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],jb.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(q?"hide":"show")){if("show"!==e||!r||void 0===r[d])continue;q=!0}o[d]=r&&r[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(o))"inline"===("none"===j?Ma(a.nodeName):j)&&(p.display=j);else{r?"hidden"in r&&(q=r.hidden):r=n._data(a,"fxshow",{}),f&&(r.hidden=!q),q?n(a).show():m.done(function(){n(a).hide()}),m.done(function(){var b;n._removeData(a,"fxshow");for(b in o)n.style(a,b,o[b])});for(d in o)g=nb(q?r[d]:0,d,m),d in r||(r[d]=g.start,q&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function pb(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function qb(a,b,c){var d,e,f=0,g=qb.prefilters.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=hb||lb(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{},easing:n.easing._default},c),originalProperties:b,originalOptions:c,startTime:hb||lb(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?(h.notifyWith(a,[j,1,0]),h.resolveWith(a,[j,b])):h.rejectWith(a,[j,b]),this}}),k=j.props;for(pb(k,j.opts.specialEasing);g>f;f++)if(d=qb.prefilters[f].call(j,a,k,j.opts))return n.isFunction(d.stop)&&(n._queueHooks(j.elem,j.opts.queue).stop=n.proxy(d.stop,d)),d;return n.map(k,nb,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(qb,{tweeners:{"*":[function(a,b){var c=this.createTween(a,b);return X(c.elem,a,U.exec(b),c),c}]},tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.match(G);for(var c,d=0,e=a.length;e>d;d++)c=a[d],qb.tweeners[c]=qb.tweeners[c]||[],qb.tweeners[c].unshift(b)},prefilters:[ob],prefilter:function(a,b){b?qb.prefilters.unshift(a):qb.prefilters.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,null!=d.queue&&d.queue!==!0||(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(W).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=qb(this,n.extend({},a),f);(e||n._data(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=n._data(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&kb.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));!b&&c||n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=n._data(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(mb(b,!0),a,d,e)}}),n.each({slideDown:mb("show"),slideUp:mb("hide"),slideToggle:mb("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=n.timers,c=0;for(hb=n.now();c<b.length;c++)a=b[c],a()||b[c]!==a||b.splice(c--,1);b.length||n.fx.stop(),hb=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){ib||(ib=a.setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){a.clearInterval(ib),ib=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(b,c){return b=n.fx?n.fx.speeds[b]||b:b,c=c||"fx",this.queue(c,function(c,d){var e=a.setTimeout(c,b);d.stop=function(){a.clearTimeout(e)}})},function(){var a,b=d.createElement("input"),c=d.createElement("div"),e=d.createElement("select"),f=e.appendChild(d.createElement("option"));c=d.createElement("div"),c.setAttribute("className","t"),c.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",a=c.getElementsByTagName("a")[0],b.setAttribute("type","checkbox"),c.appendChild(b),a=c.getElementsByTagName("a")[0],a.style.cssText="top:1px",l.getSetAttribute="t"!==c.className,l.style=/top/.test(a.getAttribute("style")),l.hrefNormalized="/a"===a.getAttribute("href"),l.checkOn=!!b.value,l.optSelected=f.selected,l.enctype=!!d.createElement("form").enctype,e.disabled=!0,l.optDisabled=!f.disabled,b=d.createElement("input"),b.setAttribute("value",""),l.input=""===b.getAttribute("value"),b.value="t",b.setAttribute("type","radio"),l.radioValue="t"===b.value}();var rb=/\\r/g,sb=/[\\x20\\t\\r\\n\\f]+/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(rb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a)).replace(sb," ")}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],(c.selected||i===e)&&(l.optDisabled?!c.disabled:null===c.getAttribute("disabled"))&&(!c.parentNode.disabled||!n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)if(d=e[g],n.inArray(n.valHooks.option.get(d),f)>-1)try{d.selected=c=!0}catch(h){d.scrollHeight}else d.selected=!1;return c||(a.selectedIndex=-1),e}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>-1:void 0}},l.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})});var tb,ub,vb=n.expr.attrHandle,wb=/^(?:checked|selected)$/i,xb=l.getSetAttribute,yb=l.input;n.fn.extend({attr:function(a,b){return Y(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return"undefined"==typeof a.getAttribute?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),e=n.attrHooks[b]||(n.expr.match.bool.test(b)?ub:tb)),void 0!==c?null===c?void n.removeAttr(a,b):e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:(a.setAttribute(b,c+""),c):e&&"get"in e&&null!==(d=e.get(a,b))?d:(d=n.find.attr(a,b),null==d?void 0:d))},attrHooks:{type:{set:function(a,b){if(!l.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(G);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)?yb&&xb||!wb.test(c)?a[d]=!1:a[n.camelCase("default-"+c)]=a[d]=!1:n.attr(a,c,""),a.removeAttribute(xb?c:d)}}),ub={set:function(a,b,c){return b===!1?n.removeAttr(a,c):yb&&xb||!wb.test(c)?a.setAttribute(!xb&&n.propFix[c]||c,c):a[n.camelCase("default-"+c)]=a[c]=!0,c}},n.each(n.expr.match.bool.source.match(/\\w+/g),function(a,b){var c=vb[b]||n.find.attr;yb&&xb||!wb.test(b)?vb[b]=function(a,b,d){var e,f;return d||(f=vb[b],vb[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,vb[b]=f),e}:vb[b]=function(a,b,c){return c?void 0:a[n.camelCase("default-"+b)]?b.toLowerCase():null}}),yb&&xb||(n.attrHooks.value={set:function(a,b,c){return n.nodeName(a,"input")?void(a.defaultValue=b):tb&&tb.set(a,b,c)}}),xb||(tb={set:function(a,b,c){var d=a.getAttributeNode(c);return d||a.setAttributeNode(d=a.ownerDocument.createAttribute(c)),d.value=b+="","value"===c||b===a.getAttribute(c)?b:void 0}},vb.id=vb.name=vb.coords=function(a,b,c){var d;return c?void 0:(d=a.getAttributeNode(b))&&""!==d.value?d.value:null},n.valHooks.button={get:function(a,b){var c=a.getAttributeNode(b);return c&&c.specified?c.value:void 0},set:tb.set},n.attrHooks.contenteditable={set:function(a,b,c){tb.set(a,""===b?!1:b,c)}},n.each(["width","height"],function(a,b){n.attrHooks[b]={set:function(a,c){return""===c?(a.setAttribute(b,"auto"),c):void 0}}})),l.style||(n.attrHooks.style={get:function(a){return a.style.cssText||void 0},set:function(a,b){return a.style.cssText=b+""}});var zb=/^(?:input|select|textarea|button|object)$/i,Ab=/^(?:a|area)$/i;n.fn.extend({prop:function(a,b){return Y(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return a=n.propFix[a]||a,this.each(function(){try{this[a]=void 0,delete this[a]}catch(b){}})}}),n.extend({prop:function(a,b,c){var d,e,f=a.nodeType;if(3!==f&&8!==f&&2!==f)return 1===f&&n.isXMLDoc(a)||(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){var b=n.find.attr(a,"tabindex");return b?parseInt(b,10):zb.test(a.nodeName)||Ab.test(a.nodeName)&&a.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),l.hrefNormalized||n.each(["href","src"],function(a,b){n.propHooks[b]={get:function(a){return a.getAttribute(b,4)}}}),l.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null},set:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex)}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this}),l.enctype||(n.propFix.enctype="encoding");var Bb=/[\\t\\r\\n\\f]/g;function Cb(a){return n.attr(a,"class")||""}n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,Cb(this)))});if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=Cb(c),d=1===c.nodeType&&(" "+e+" ").replace(Bb," ")){g=0;while(f=b[g++])d.indexOf(" "+f+" ")<0&&(d+=f+" ");h=n.trim(d),e!==h&&n.attr(c,"class",h)}}return this},removeClass:function(a){var b,c,d,e,f,g,h,i=0;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,Cb(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof a&&a){b=a.match(G)||[];while(c=this[i++])if(e=Cb(c),d=1===c.nodeType&&(" "+e+" ").replace(Bb," ")){g=0;while(f=b[g++])while(d.indexOf(" "+f+" ")>-1)d=d.replace(" "+f+" "," ");h=n.trim(d),e!==h&&n.attr(c,"class",h)}}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):n.isFunction(a)?this.each(function(c){n(this).toggleClass(a.call(this,c,Cb(this),b),b)}):this.each(function(){var b,d,e,f;if("string"===c){d=0,e=n(this),f=a.match(G)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else void 0!==a&&"boolean"!==c||(b=Cb(this),b&&n._data(this,"__className__",b),n.attr(this,"class",b||a===!1?"":n._data(this,"__className__")||""))})},hasClass:function(a){var b,c,d=0;b=" "+a+" ";while(c=this[d++])if(1===c.nodeType&&(" "+Cb(c)+" ").replace(Bb," ").indexOf(b)>-1)return!0;return!1}}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var Db=a.location,Eb=n.now(),Fb=/\\?/,Gb=/(,)|(\\[|{)|(}|])|"(?:[^"\\\\\\r\\n]|\\\\["\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)/g;n.parseJSON=function(b){if(a.JSON&&a.JSON.parse)return a.JSON.parse(b+"");var c,d=null,e=n.trim(b+"");return e&&!n.trim(e.replace(Gb,function(a,b,e,f){return c&&b&&(d=0),0===d?a:(c=e||b,d+=!f-!e,"")}))?Function("return "+e)():n.error("Invalid JSON: "+b)},n.parseXML=function(b){var c,d;if(!b||"string"!=typeof b)return null;try{a.DOMParser?(d=new a.DOMParser,c=d.parseFromString(b,"text/xml")):(c=new a.ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b))}catch(e){c=void 0}return c&&c.documentElement&&!c.getElementsByTagName("parsererror").length||n.error("Invalid XML: "+b),c};var Hb=/#.*$/,Ib=/([?&])_=[^&]*/,Jb=/^(.*?):[ \\t]*([^\\r\\n]*)\\r?$/gm,Kb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Lb=/^(?:GET|HEAD)$/,Mb=/^\\/\\//,Nb=/^([\\w.+-]+:)(?:\\/\\/(?:[^\\/?#]*@|)([^\\/?#:]*)(?::(\\d+)|)|)/,Ob={},Pb={},Qb="*/".concat("*"),Rb=Db.href,Sb=Nb.exec(Rb.toLowerCase())||[];function Tb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(G)||[];if(n.isFunction(c))while(d=f[e++])"+"===d.charAt(0)?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function Ub(a,b,c,d){var e={},f=a===Pb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function Vb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(d in b)void 0!==b[d]&&((e[d]?a:c||(c={}))[d]=b[d]);return c&&n.extend(!0,a,c),a}function Wb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===e&&(e=a.mimeType||b.getResponseHeader("Content-Type"));if(e)for(g in h)if(h[g]&&h[g].test(e)){i.unshift(g);break}if(i[0]in c)f=i[0];else{for(g in c){if(!i[0]||a.converters[g+" "+i[0]]){f=g;break}d||(d=g)}f=f||d}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function Xb(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Rb,type:"GET",isLocal:Kb.test(Sb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Qb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\\bxml\\b/,html:/\\bhtml/,json:/\\bjson\\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?Vb(Vb(a,n.ajaxSettings),b):Vb(n.ajaxSettings,a)},ajaxPrefilter:Tb(Ob),ajaxTransport:Tb(Pb),ajax:function(b,c){"object"==typeof b&&(c=b,b=void 0),c=c||{};var d,e,f,g,h,i,j,k,l=n.ajaxSetup({},c),m=l.context||l,o=l.context&&(m.nodeType||m.jquery)?n(m):n.event,p=n.Deferred(),q=n.Callbacks("once memory"),r=l.statusCode||{},s={},t={},u=0,v="canceled",w={readyState:0,getResponseHeader:function(a){var b;if(2===u){if(!k){k={};while(b=Jb.exec(g))k[b[1].toLowerCase()]=b[2]}b=k[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===u?g:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return u||(a=t[c]=t[c]||a,s[a]=b),this},overrideMimeType:function(a){return u||(l.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>u)for(b in a)r[b]=[r[b],a[b]];else w.always(a[w.status]);return this},abort:function(a){var b=a||v;return j&&j.abort(b),y(0,b),this}};if(p.promise(w).complete=q.add,w.success=w.done,w.error=w.fail,l.url=((b||l.url||Rb)+"").replace(Hb,"").replace(Mb,Sb[1]+"//"),l.type=c.method||c.type||l.method||l.type,l.dataTypes=n.trim(l.dataType||"*").toLowerCase().match(G)||[""],null==l.crossDomain&&(d=Nb.exec(l.url.toLowerCase()),l.crossDomain=!(!d||d[1]===Sb[1]&&d[2]===Sb[2]&&(d[3]||("http:"===d[1]?"80":"443"))===(Sb[3]||("http:"===Sb[1]?"80":"443")))),l.data&&l.processData&&"string"!=typeof l.data&&(l.data=n.param(l.data,l.traditional)),Ub(Ob,l,c,w),2===u)return w;i=n.event&&l.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),l.type=l.type.toUpperCase(),l.hasContent=!Lb.test(l.type),f=l.url,l.hasContent||(l.data&&(f=l.url+=(Fb.test(f)?"&":"?")+l.data,delete l.data),l.cache===!1&&(l.url=Ib.test(f)?f.replace(Ib,"$1_="+Eb++):f+(Fb.test(f)?"&":"?")+"_="+Eb++)),l.ifModified&&(n.lastModified[f]&&w.setRequestHeader("If-Modified-Since",n.lastModified[f]),n.etag[f]&&w.setRequestHeader("If-None-Match",n.etag[f])),(l.data&&l.hasContent&&l.contentType!==!1||c.contentType)&&w.setRequestHeader("Content-Type",l.contentType),w.setRequestHeader("Accept",l.dataTypes[0]&&l.accepts[l.dataTypes[0]]?l.accepts[l.dataTypes[0]]+("*"!==l.dataTypes[0]?", "+Qb+"; q=0.01":""):l.accepts["*"]);for(e in l.headers)w.setRequestHeader(e,l.headers[e]);if(l.beforeSend&&(l.beforeSend.call(m,w,l)===!1||2===u))return w.abort();v="abort";for(e in{success:1,error:1,complete:1})w[e](l[e]);if(j=Ub(Pb,l,c,w)){if(w.readyState=1,i&&o.trigger("ajaxSend",[w,l]),2===u)return w;l.async&&l.timeout>0&&(h=a.setTimeout(function(){w.abort("timeout")},l.timeout));try{u=1,j.send(s,y)}catch(x){if(!(2>u))throw x;y(-1,x)}}else y(-1,"No Transport");function y(b,c,d,e){var k,s,t,v,x,y=c;2!==u&&(u=2,h&&a.clearTimeout(h),j=void 0,g=e||"",w.readyState=b>0?4:0,k=b>=200&&300>b||304===b,d&&(v=Wb(l,w,d)),v=Xb(l,v,w,k),k?(l.ifModified&&(x=w.getResponseHeader("Last-Modified"),x&&(n.lastModified[f]=x),x=w.getResponseHeader("etag"),x&&(n.etag[f]=x)),204===b||"HEAD"===l.type?y="nocontent":304===b?y="notmodified":(y=v.state,s=v.data,t=v.error,k=!t)):(t=y,!b&&y||(y="error",0>b&&(b=0))),w.status=b,w.statusText=(c||y)+"",k?p.resolveWith(m,[s,y,w]):p.rejectWith(m,[w,y,t]),w.statusCode(r),r=void 0,i&&o.trigger(k?"ajaxSuccess":"ajaxError",[w,l,k?s:t]),q.fireWith(m,[w,y]),i&&(o.trigger("ajaxComplete",[w,l]),--n.active||n.event.trigger("ajaxStop")))}return w},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax(n.extend({url:a,type:b,dataType:e,data:c,success:d},n.isPlainObject(a)&&a))}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){if(n.isFunction(a))return this.each(function(b){n(this).wrapAll(a.call(this,b))});if(this[0]){var b=n(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&1===a.firstChild.nodeType)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return n.isFunction(a)?this.each(function(b){n(this).wrapInner(a.call(this,b))}):this.each(function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}});function Yb(a){return a.style&&a.style.display||n.css(a,"display")}function Zb(a){while(a&&1===a.nodeType){if("none"===Yb(a)||"hidden"===a.type)return!0;a=a.parentNode}return!1}n.expr.filters.hidden=function(a){return l.reliableHiddenOffsets()?a.offsetWidth<=0&&a.offsetHeight<=0&&!a.getClientRects().length:Zb(a)},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var $b=/%20/g,_b=/\\[\\]$/,ac=/\\r?\\n/g,bc=/^(?:submit|button|image|reset|file)$/i,cc=/^(?:input|select|textarea|keygen)/i;function dc(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||_b.test(a)?d(a,e):dc(a+"["+("object"==typeof e&&null!=e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)dc(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)dc(c,a[c],b,e);return d.join("&").replace($b,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&cc.test(this.nodeName)&&!bc.test(a)&&(this.checked||!Z.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(ac,"\\r\\n")}}):{name:b.name,value:c.replace(ac,"\\r\\n")}}).get()}}),n.ajaxSettings.xhr=void 0!==a.ActiveXObject?function(){return this.isLocal?ic():d.documentMode>8?hc():/^(get|post|head|put|delete|options)$/i.test(this.type)&&hc()||ic()}:hc;var ec=0,fc={},gc=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in fc)fc[a](void 0,!0)}),l.cors=!!gc&&"withCredentials"in gc,gc=l.ajax=!!gc,gc&&n.ajaxTransport(function(b){if(!b.crossDomain||l.cors){var c;return{send:function(d,e){var f,g=b.xhr(),h=++ec;if(g.open(b.type,b.url,b.async,b.username,b.password),b.xhrFields)for(f in b.xhrFields)g[f]=b.xhrFields[f];b.mimeType&&g.overrideMimeType&&g.overrideMimeType(b.mimeType),b.crossDomain||d["X-Requested-With"]||(d["X-Requested-With"]="XMLHttpRequest");for(f in d)void 0!==d[f]&&g.setRequestHeader(f,d[f]+"");g.send(b.hasContent&&b.data||null),c=function(a,d){var f,i,j;if(c&&(d||4===g.readyState))if(delete fc[h],c=void 0,g.onreadystatechange=n.noop,d)4!==g.readyState&&g.abort();else{j={},f=g.status,"string"==typeof g.responseText&&(j.text=g.responseText);try{i=g.statusText}catch(k){i=""}f||!b.isLocal||b.crossDomain?1223===f&&(f=204):f=j.text?200:404}j&&e(f,i,j,g.getAllResponseHeaders())},b.async?4===g.readyState?a.setTimeout(c):g.onreadystatechange=fc[h]=c:c()},abort:function(){c&&c(void 0,!0)}}}});function hc(){try{return new a.XMLHttpRequest}catch(b){}}function ic(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\\b(?:java|ecma)script\\b/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c=d.head||n("head")[0]||d.documentElement;return{send:function(e,f){b=d.createElement("script"),b.async=!0,a.scriptCharset&&(b.charset=a.scriptCharset),b.src=a.url,b.onload=b.onreadystatechange=function(a,c){(c||!b.readyState||/loaded|complete/.test(b.readyState))&&(b.onload=b.onreadystatechange=null,b.parentNode&&b.parentNode.removeChild(b),b=null,c||f(200,"success"))},c.insertBefore(b,c.firstChild)},abort:function(){b&&b.onload(void 0,!0)}}}});var jc=[],kc=/(=)\\?(?=&|$)|\\?\\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=jc.pop()||n.expando+"_"+Eb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(kc.test(b.url)?"url":"string"==typeof b.data&&0===(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&kc.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(kc,"$1"+e):b.jsonp!==!1&&(b.url+=(Fb.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){void 0===f?n(a).removeProp(e):a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,jc.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||d;var e=x.exec(a),f=!c&&[];return e?[b.createElement(e[1])]:(e=ja([a],b,f),f&&f.length&&n(f).remove(),n.merge([],e.childNodes))};var lc=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&lc)return lc.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>-1&&(d=n.trim(a.slice(h,a.length)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e||"GET",dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).always(c&&function(a,b){g.each(function(){c.apply(this,f||[a.responseText,b,a])})}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};function mc(a){return n.isWindow(a)?a:9===a.nodeType?a.defaultView||a.parentWindow:!1}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&n.inArray("auto",[f,i])>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,n.extend({},h))),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d={top:0,left:0},e=this[0],f=e&&e.ownerDocument;if(f)return b=f.documentElement,n.contains(b,e)?("undefined"!=typeof e.getBoundingClientRect&&(d=e.getBoundingClientRect()),c=mc(f),{top:d.top+(c.pageYOffset||b.scrollTop)-(b.clientTop||0),left:d.left+(c.pageXOffset||b.scrollLeft)-(b.clientLeft||0)}):d},position:function(){if(this[0]){var a,b,c={top:0,left:0},d=this[0];return"fixed"===n.css(d,"position")?b=d.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(c=a.offset()),c.top+=n.css(a[0],"borderTopWidth",!0),c.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-c.top-n.css(d,"marginTop",!0),left:b.left-c.left-n.css(d,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Qa})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,b){var c=/Y/.test(b);n.fn[a]=function(d){return Y(this,function(a,d,e){var f=mc(a);return void 0===e?f?b in f?f[b]:f.document.documentElement[d]:a[d]:void(f?f.scrollTo(c?n(f).scrollLeft():e,c?e:n(f).scrollTop()):a[d]=e)},a,d,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=Ua(l.pixelPosition,function(a,c){return c?(c=Sa(a,b),Oa.test(c)?n(a).position()[b]+"px":c):void 0;\n})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return Y(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.extend({bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var nc=a.jQuery,oc=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=oc),b&&a.jQuery===n&&(a.jQuery=nc),n},b||(a.jQuery=a.$=n),n});
\\xf4bb78d9d0cf4c6c4335864e2edd55cfad8217ac9270a10e33c8c3e320156614	/*******************************************************************************\n * Datum.js\n ******************************************************************************/\n\n/* eslint-env browser */\n/* globals Set Map define */\ndefine(['/jQuery.min.js', '/socket.io-client-1.4.8.min.js'], function (\n  $,\n  io,\n  undefined // eslint-disable-line\n) {\n  'use strict';\n  var AQ = AQ || {};\n\n  // Note: Add `?events=false` to a url to stop all events\n  const query = new Set(location.search.slice(1).split('&'));\n\n  // TODO: how does session persistence work for events\n  const sessionId = getPersistedSessionId();\n  if (sessionId) {\n    // TODO: Can we use beacon or beforeunload to send detach event?\n    fetch(`/_socket/detach/${sessionId}`);\n  }\n  // TODO: Maybe sessionIds should be stored in localStorage as an array and when\n  // we try to detach them, we can get a payload back that says whether it was\n  // successful or not\n  sessionStorage.clear();\n\n  function buildQueryString(options) {\n    const keys = [];\n\n    if (typeof options != 'undefined') {\n      // Meta data defaults to true;\n      if (typeof options.meta_data == 'undefined') {\n        options.meta_data = true;\n      }\n\n      // Map the keys of the options object to an array of encoded url components\n      const params = Object.entries(options).sort(([a], [b]) =>\n        a.localeCompare(b)\n      );\n      for (let [key, value] of params) {\n        switch (key) {\n          case 'where':\n            // where: { name: 'column_name', op: '=', value: 'value' }\n            // where: [{ name: 'column_name', op: '=', value: 'value' }]\n            if (typeof value.length == 'undefined') value = [value];\n\n            keys.push(\n              value\n                .map(function (where) {\n                  return 'where=' + encodeURIComponent(JSON.stringify(where));\n                })\n                .join('&')\n            );\n            break;\n\n          case 'order_by':\n            // So many possibilities...\n            // order_by: '-?column_name'\n            // order_by: ['-?column_name']\n            // order_by: { 'column_name': 'asc|desc' }\n            // order_by: [{ 'column_name': 'asc|desc' }]\n            // order_by: { column: 'column_name', direction: 'asc|desc' }\n            // order_by: [{ column: 'column_name', direction: 'asc|desc' }]\n            if (typeof value.length == 'undefined') value = [value];\n\n            keys.push(\n              key +\n                '=' +\n                encodeURIComponent(\n                  value\n                    .map(function (o) {\n                      return (\n                        (typeof o.direction != 'undefined' &&\n                        o.direction != 'asc'\n                          ? '-'\n                          : '') + o.column\n                      );\n                    })\n                    .join(',')\n                )\n            );\n            break;\n\n          case 'limit':\n          // limit: number\n          /* eslint-disable-next-line no-fallthrough */\n          case 'offset':\n            // offset: number\n            var parsedNum = parseInt(value);\n            if (!isNaN(parsedNum)) {\n              keys.push(key + '=' + parsedNum);\n            }\n            break;\n\n          case 'session_id':\n            keys.push(\n              'session_id=' + encodeURIComponent(JSON.stringify(value))\n            );\n            break;\n\n          case 'meta_data':\n          case 'args':\n          case 'exclude':\n          case 'include':\n            keys.push(key + '=' + encodeURIComponent(JSON.stringify(value)));\n            break;\n          default:\n            console.log('query_options: could not find key', key, value);\n        }\n      }\n    }\n\n    // Return the query string by joining the array with &'s\n    return keys.length ? '?' + keys.join('&') : '?';\n  }\n\n  function getPersistedSessionId() {\n    return sessionStorage.getItem('sessionId') || null;\n  }\n\n  function persistSessionId(sessionId) {\n    if (sessionId) {\n      sessionStorage.setItem('sessionId', sessionId);\n    }\n  }\n\n  class Socket {\n    constructor(handleEvent) {\n      this.handleEvent = handleEvent;\n      this.isAttached = false;\n      this.sessionId = null;\n      this.intendedSessionId = null;\n      this._socket = io('/');\n      this._socket.on('event', this.onMessage.bind(this));\n      this._socket.on('connect', () => {\n        if (!this.isAttached) {\n          if (this.sessionId) {\n            this.attach(this.sessionId);\n          } else if (this.intendedSessionId) {\n            this.attach(this.intendedSessionId);\n          }\n          // else { connectSession has not been called yet }\n        }\n      });\n      this._socket.on('disconnect', () => {\n        this.isAttached = false;\n        // socket.io will handle reconnecting\n      });\n      this.cache = {};\n    }\n    onMessage(event) {\n      let response;\n      try {\n        response = JSON.parse(event);\n      } catch (e) {\n        console.error('socket: error while parsing event', e);\n        return;\n      }\n\n      switch (response.type) {\n        case 'attached':\n          this.isAttached = true;\n          this.sessionId = response.sessionId;\n          this.intendedSessionId = null;\n          console.log('socket attached', response.sessionId);\n          break;\n\n        case 'event':\n          this.handleEvent(response.data);\n          break;\n      }\n    }\n    attach(sessionId) {\n      if (!this.sessionId) {\n        this.intendedSessionId = sessionId;\n      }\n      if (this._socket.connected) {\n        if (!sessionId) {\n          console.error('socket error: invalid session id', sessionId);\n        }\n        this._socket.emit('attach', sessionId);\n      }\n      // else { socket will attempt to attach when connected }\n    }\n  }\n\n  class Endpoint {\n    constructor(url, database, evented) {\n      this.url = url;\n      this.database = database;\n      this.evented = query.has('events=false') ? false : evented;\n      this.cache = {};\n      this.sessionId = null; // = getPersistedSessionId();\n      this.socket = this.evented\n        ? new Socket(this.handleEvent.bind(this))\n        : null;\n    }\n    connectSession(sessionId) {\n      this.sessionId = sessionId;\n      if (this.socket) {\n        this.socket.attach(sessionId);\n      }\n    }\n    handleEvent(event) {\n      const {\n        subscription_type: subscriptionType,\n        payload,\n        operation,\n        row_id: rowId,\n      } = event;\n      console.log({subscriptionType, payload, operation, rowId});\n\n      switch (subscriptionType) {\n        case 'table': {\n          console.log(subscriptionType + ':' + operation);\n          const rowsets = this.database.getTracked(\n            relationId(rowId.pk_column_id.relation_id).url()\n          );\n          for (const rowset of rowsets) {\n            rowset._triggerEvent(operation, payload, rowId);\n          }\n          break;\n        }\n        case 'column':\n          console.log(subscriptionType + ':' + operation);\n          break;\n        case 'row':\n          console.log(subscriptionType + ':' + operation);\n          break;\n        case 'field':\n          console.log(subscriptionType + ':' + operation);\n          break;\n        default:\n          break;\n      }\n      // TODO: Delete event\n    }\n    _resource(method, meta_id, args, data) {\n      args = args || {};\n\n      $('.debugger3').trigger('debugger_request', {\n        method: method,\n        meta_id: meta_id,\n        args: args,\n        data: data,\n      });\n\n      // Get use_cache from args or data\n      let use_cache = false;\n      if (!data && args.use_cache) {\n        use_cache = args.use_cache;\n        delete args.use_cache;\n      } else if (data?.use_cache) {\n        use_cache = data.use_cache;\n        delete data.use_cache;\n      }\n\n      // allow un-evented call by passing false for 'events'\n      const passed = Object.hasOwn(args, 'events');\n      const isTruthy = Boolean(args.events);\n      if (!passed || isTruthy) {\n        // If this connection is evented, get event_session_id\n        if (this.evented && this.sessionId) {\n          args.session_id = this.sessionId;\n        }\n      }\n      delete args.events;\n\n      // URLs\n      const id_url = meta_id.to_url(true); // ID part of the URL only\n      const url_without_query = this.url + id_url;\n      const url_with_query = url_without_query + buildQueryString(args);\n\n      // Check cache\n      if (use_cache && url_with_query in this.cache) {\n        return this.cache[url_with_query];\n      }\n\n      // If query string is too long, upgrade GET method to POST\n      if (method == 'GET' && (location.host + url_with_query).length > 1000) {\n        method = 'POST';\n      }\n\n      const headers = new Headers();\n      headers.append('Content-Type', 'application/json');\n\n      const init_obj = {\n        method: method,\n        headers: headers,\n        credentials: 'same-origin',\n      };\n\n      // Don't add data on GET requests\n      if (method !== 'GET') {\n        init_obj.body = JSON.stringify(data);\n      }\n\n      const request = fetch(\n        method === 'GET' ? url_with_query : url_without_query,\n        init_obj\n      )\n        .then(function (response) {\n          // this will never happen\n          // JSON was returned from WebSocket\n          if (typeof response.json == 'undefined') {\n            // TODO: ? Unfortunately this has no HTTP status like the result of fetch\n            return response;\n          }\n\n          // Request object was returned from fetch\n          // Read json stream\n          var json = response.json();\n\n          if (response.status >= 200 && response.status < 300) {\n            return json;\n          }\n\n          // If bad request (code 300 or higher), reject promise\n          return json.then(Promise.reject.bind(Promise));\n        })\n        .catch(function (server_error) {\n          // Construct real Error object\n          const err = new Error(server_error.message.message);\n          err.metadata = server_error.message || {};\n          err.metadata.status_code = server_error.status_code;\n          err.metadata.title = server_error.title;\n\n          // Log error in collapsed group\n          console.groupCollapsed(\n            method,\n            server_error.status_code,\n            server_error.title\n          );\n          // console.error(url_without_query);\n          if ('message' in server_error) {\n            console.error(method == 'GET' ? url_with_query : url_without_query);\n            console.error(server_error.message.message);\n            console.error(server_error.message.context);\n          }\n          console.groupEnd();\n\n          throw err;\n        });\n\n      // Check cache for GET/POST\n      if (use_cache && (method == 'GET' || method == 'POST')) {\n        this.cache[url_with_query] = request;\n      }\n\n      return request;\n    }\n\n    get(meta_id, args) {\n      return this._resource('GET', meta_id, args);\n    }\n\n    post(meta_id, data) {\n      return this._resource('POST', meta_id, {}, data);\n    }\n\n    patch(meta_id, data) {\n      return this._resource('PATCH', meta_id, {}, data);\n    }\n\n    delete(meta_id, args) {\n      return this._resource('DELETE', meta_id, args);\n    }\n  }\n\n  AQ.uuid = function () {\n    var d = new Date().getTime();\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n      /[xy]/g,\n      function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == 'x' ? r : (r & 0x7) | 0x8).toString(16);\n      }\n    );\n  };\n  /*--------------------------------- * Database * ---------------------------------*/\n  AQ.Database = function (url, settings) {\n    this.settings = settings;\n\n    if (typeof this.settings.evented === 'string') {\n      console.warn(\n        'AQ.Database: `evented` setting has been deprecated. Use `events=true|false` instead'\n      );\n      delete this.settings.evented;\n    }\n\n    this.settings.events = Object.hasOwn(this.settings, 'events')\n\t\t? this.settings.events\n\t\t: false;\n    this.endpoint = new Endpoint(url, this, this.settings.events);\n    this.tracked = {relation: {}, row: {}, field: {}};\n\n    if (this.settings.events) {\n      this.schema('event')\n        .function('session_create')\n        .then(\n          function (result) {\n            const sessionId = result.get('session_create');\n            if (sessionId) {\n              this.endpoint.connectSession(sessionId);\n              persistSessionId(sessionId);\n            } else {\n              console.log('got a null sessionId', sessionId);\n            }\n          }.bind(this)\n        );\n    }\n  };\n  AQ.Database.prototype.constructor = AQ.Database;\n  AQ.Database.prototype.schema = function (name) {\n    return new AQ.Schema(this, name);\n  };\n  AQ.Database.prototype.getTracked = function (id) {\n    let idType;\n    if (id.startsWith('/relation/')) {\n      idType = 'relation';\n    } else if (id.startsWith('/row/')) {\n      idType = 'row';\n    } else if (id.startsWith('/field/')) {\n      idType = 'field';\n    }\n    const tracked = this.tracked[idType][id];\n    if (!tracked) {\n      return [];\n    }\n    return tracked;\n  };\n  AQ.Database.prototype.track = function (id, obj) {\n    // TODO: db.track should only be called when events are set up on this query\n    let idType;\n    if (id.startsWith('/relation/')) {\n      idType = 'relation';\n    } else if (id.startsWith('/row/')) {\n      idType = 'row';\n    } else if (id.startsWith('/field/')) {\n      idType = 'field';\n    }\n\n    // columns are supposed to have events, but what does that mean?\n    // functions do not have events\n    // schema do not have events\n\n    switch (idType) {\n      case 'relation':\n        this.tracked.relation[id] = this.tracked.relation[id] || [];\n        this.tracked.relation[id].push(obj);\n        break;\n      case 'row':\n        this.tracked.row[id] = obj;\n        break;\n      case 'field':\n        this.tracked.field[id] = obj;\n        break;\n    }\n  };\n\n  /*--------------------------------- * Schema * ---------------------------------*/\n  AQ.Schema = function (database, name) {\n    this.database = database;\n    this.name = name;\n    this.id = {name: this.name};\n  };\n  AQ.Schema.prototype.constructor = AQ.Schema;\n  AQ.Schema.prototype.relation = function (name) {\n    return new AQ.Relation(this, name);\n  };\n  AQ.Schema.prototype.table = function (name) {\n    return new AQ.Table(this, name);\n  };\n  AQ.Schema.prototype.view = function (name) {\n    return new AQ.View(this, name);\n  };\n  AQ.Schema.prototype.function = function (identifier, args, options) {\n    // Function identifier (name and parameter list)\n    if (typeof identifier == 'object') {\n      var name = identifier.name;\n      var parameter_type_list = identifier.parameters;\n    }\n    // Selecting a function without specifying the parameters\n    else {\n      var name = identifier;\n    }\n\n    options = options || {};\n\n    // Arguments\n    options.args = {};\n\n    // `args = undefined` will pass no arguments into the server-side function\n    if (typeof args != 'undefined') {\n      // some_function?args={ kwargs: {} } -- Key/value object\n      if (!(args instanceof Array) && args instanceof Object) {\n        options.args.kwargs = args;\n      }\n      // some_function?args={ vals: [] } -- Array\n      else {\n        if (!(args instanceof Array)) {\n          // Regular value is placed into array\n          args = [args];\n        }\n        options.args.vals = args;\n      }\n    }\n\n    var fn = new AQ.Function(this, name, parameter_type_list);\n\n    return this.database.endpoint\n      .get(fn, options)\n      .then(\n        function (response) {\n          if (!response) {\n            throw 'Empty response';\n          }\n          /* sometimes results can be empty and that is ok.\n                else if (!response.result.length) {\n                    throw 'Result set empty';\n                }\n\t\t\t\t*/\n          if (response.result.length != 1) {\n            return new AQ.FunctionResultSet(fn, response);\n          }\n          return new AQ.FunctionResult(fn, response);\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw err;\n      });\n  };\n\n  /*--------------------------------- * Relation * ---------------------------------*/\n  function relationId(id) {\n    return {\n      url() {\n        return '/relation/' + id.schema_id.name + '/' + id.name;\n      },\n    };\n  }\n  AQ.Relation = function (schema, name) {\n    this.schema = schema;\n    this.name = name;\n    this.id = {schema_id: this.schema.id, name: this.name};\n  };\n  AQ.Relation.prototype.constructor = AQ.Relation;\n  AQ.Relation.prototype.to_url = function (id_only) {\n    return id_only\n      ? '/relation/' + this.schema.name + '/' + this.name\n      : this.schema.database.endpoint.url +\n          '/relation/' +\n          this.schema.name +\n          '/' +\n          this.name;\n  };\n  AQ.Relation.prototype.column = function (name) {\n    return new AQ.Column(this, name);\n  };\n  AQ.Relation.prototype.rows = function (options) {\n    return this.schema.database.endpoint\n      .get(this, options)\n      .then(\n        function (rows) {\n          if (rows == null) {\n            throw 'Empty response';\n          } /*\n                else if (rows.result.length < 1) {\n                    throw 'No rows returned';\n                }*/\n          const rowset = new AQ.Rowset(this, rows, options);\n          this.schema.database.track(this.to_url(true), rowset);\n          return rowset;\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw 'Rows request failed: ' + err;\n      });\n  };\n  AQ.Relation.prototype.row = function () {\n    // Multiple different ways to call 'row' function\n\n    // 1. Calling with Options object\n    if (typeof arguments[0] == 'object') {\n      var obj = arguments[0];\n      var args = arguments[1] || {};\n\n      // AQ.Relation.row({ where: { column_name: 'column_name', op: '=', value: 'value' } })\n      // Maybe it should be this one: AQ.Relation.row({ where: { column_name: value } })\n      if (typeof obj.where != 'undefined') {\n        args.where = obj.where;\n      }\n      // AQ.Relation.row({ column_name: 'column_name', op: '=', value: 'value' })\n      // Maybe it should be this one: AQ.Relation.row({ column_name: value })\n      else {\n        args.where = obj;\n      }\n    }\n    // 2. Calling with column_name and value\n    else if (typeof arguments[0] == 'string') {\n      // AQ.Relation.row(column_name, value [, options_obj])\n      var name = arguments[0];\n      var value = arguments[1];\n      var args = arguments[2] || {};\n\n      args.where = {name: name, op: '=', value: value};\n    }\n    // 3. Calling AQ.Relation.row() without arguments\n    else {\n      var args = {};\n    }\n\n    return this.schema.database.endpoint\n      .get(this, args)\n      .then(\n        function (row) {\n          if (row == null) {\n            throw 'Empty response';\n          } else if (row.result.length == 0) {\n            return null; // throw 'No row returned';\n          } else if (row.result.length > 1) {\n            throw 'Multiple rows returned';\n          }\n          const aqRow = new AQ.Row(this, row);\n          this.schema.database.track(aqRow.to_url(true), aqRow);\n          return aqRow;\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw 'Row request failed: ' + err;\n      });\n  };\n\n  /*--------------------------------- * Table * ---------------------------------*/\n  AQ.Table = function (schema, name) {\n    this.schema = schema;\n    this.name = name;\n    this.id = {schema_id: this.schema.id, name: this.name};\n  };\n  AQ.Table.prototype = Object.create(AQ.Relation.prototype);\n  AQ.Table.prototype.constructor = AQ.Table;\n  AQ.Table.prototype.insert = function (data) {\n    if (typeof data == 'undefined') {\n      // table.insert({}) is equivalent to table.insert()\n      // both will insert default values\n      data = {};\n    }\n\n    // Return inserted row promise\n    return this.schema.database.endpoint\n      .patch(this, data)\n      .then(\n        function (inserted_row) {\n          if (inserted_row == null) {\n            throw 'Empty response';\n          }\n          if (typeof data.length != 'undefined' && data.length > 1) {\n            return new AQ.Rowset(this, inserted_row, null);\n          }\n          return new AQ.Row(this, inserted_row);\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw 'Insert failed: ' + err;\n      });\n  };\n\n  /*--------------------------------- * View * ---------------------------------*/\n  AQ.View = function (schema, name) {\n    this.schema = schema;\n    this.name = name;\n    this.id = {schema_id: this.schema.id, name: this.name};\n  };\n  AQ.View.prototype = Object.create(AQ.Relation.prototype);\n  AQ.View.prototype.constructor = AQ.View;\n\n  /*--------------------------------- * Rowset * ---------------------------------*/\n  class Callbacks {\n    constructor() {\n      this.map = new Map();\n    }\n    call(cbType, payload) {\n      const callbacks = this.map.get(cbType) || [];\n      for (const callback of callbacks) {\n        callback(payload);\n      }\n    }\n    add(cbType, cb) {\n      this.map.set(\n        cbType,\n        this.map.has(cbType) ? this.map.get(cbType).concat(cb) : [cb]\n      );\n    }\n    remove(cbType, cb) {\n      const callbacks = this.map.get(cbType);\n      if (callbacks) {\n        this.map.set(\n          cbType,\n          callbacks.filter((callback) => callback !== cb)\n        );\n      }\n    }\n  }\n\n  AQ.Rowset = function (relation, response, server_arguments) {\n    this.relation = relation;\n    this.schema = relation.schema;\n    this.columns = response.columns || null;\n    this.pk_column_name = response.pk || null;\n    this.rows = response.result;\n    this.length = response.result.length;\n    this.server_arguments = server_arguments || {};\n    this.callbacks = new Callbacks();\n  };\n  AQ.Rowset.prototype.constructor = AQ.Rowset;\n  AQ.Rowset.prototype.map = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.Row(this.relation, {\n            columns: this.columns,\n            pk: this.pk_column_name,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .map(fn);\n  };\n  AQ.Rowset.prototype.forEach = function (fn) {\n    const newRow = (row) => {\n      return new AQ.Row(this.relation, {\n        columns: this.columns,\n        pk: this.pk_column_name,\n        result: [row],\n      });\n    };\n    this.onInsert(fn);\n    this.rows.map(newRow).forEach(fn);\n    return this;\n  };\n  AQ.Rowset.prototype.reload = function () {\n    return this.relation.rows(this.server_arguments);\n  };\n  AQ.Rowset.prototype._triggerEvent = function (eventType, payload, newRowId) {\n    const relId = this.relation.id;\n    const pkColumn = this.pk_column_name;\n    const rowIdStr = rowId(\n      newRowId.pk_column_id.relation_id,\n      newRowId.pk_value\n    ).url();\n    // TODO: need a rewrite on datum to fix this\n    // imitate api response to create row\n    const newRow = (row, pk) => {\n      return new AQ.Row(this.relation, {\n        columns: this.columns,\n        pk: pk || this.pk_column_name,\n        result: [row],\n      });\n    };\n    switch (eventType) {\n      case 'insert': {\n        const completeRow = {row: payload};\n        this.rows.push(completeRow);\n        payload = newRow(completeRow);\n        break;\n      }\n      case 'update': {\n        // TODO: I think payload is only the update fields, may need to reconstruct real row\n        let index = this.rows.findIndex(\n          ({row}) => rowId(relId, row[pkColumn]).url() === rowIdStr\n        );\n        if (index < 0) {\n          console.error(\n            'AQ.Rowset: trying to trigger update on nonexistant row'\n          );\n          break;\n        }\n        const completeRow = {row: {...this.rows[index].row, ...payload}};\n        this.rows[index] = completeRow;\n        payload = newRow(completeRow, pkColumn);\n        break;\n      }\n      case 'delete': {\n        // TODO: I think payload is only the row_id, may need to reconstruct real row\n        let index = this.rows.findIndex(\n          (row) => rowId(relId, row[pkColumn]).url() === rowIdStr\n        );\n        if (!index) {\n          console.error(\n            'AQ.Rowset: trying to trigger delete on nonexistant row'\n          );\n          break;\n        }\n        this.rows.splice(index, 1);\n        payload = rowIdStr;\n        break;\n      }\n    }\n    this.callbacks.call(eventType, payload);\n  };\n  AQ.Rowset.prototype.onInsert = function (fn) {\n    // TODO: maybe get rid of string\n    this.callbacks.add('insert', fn);\n  };\n  AQ.Rowset.prototype.onUpdate = function (fn) {\n    // TODO: can you update a rowset?\n    this.callbacks.add('update', fn);\n  };\n  AQ.Rowset.prototype.onDelete = function (fn) {\n    this.callbacks.add('delete', fn);\n  };\n\n  /**\n   * Call AQ.Rowset.where with (where_obj) or use shorthand notation (field, value) - filter results programmatically\n   *\n   * @param {Object} where_obj\n   * @param {[Boolean]} return_first\n   * @param {[Boolean]} async\n   *\n   * OR\n   *\n   * @param {String} field\n   * @param {Any} value\n   * @param {[Boolean]} return_first\n   * @param {[Boolean]} async\n   *\n   * @returns {Promise}\n   */\n  AQ.Rowset.prototype.where = function () {\n    var first = false,\n      async = true,\n      where_obj = {};\n    if (typeof arguments[0] == 'object') {\n      // AQ.Rowset.where(where_obj [, return_first] [, async]);\n      where_obj = arguments[0];\n      var field = where_obj.field;\n      var value = where_obj.value;\n      if (arguments.length > 1) first = arguments[1];\n      if (arguments.length > 2) async = arguments[2];\n    } else if (typeof arguments[0] == 'string' && arguments.length > 1) {\n      // AQ.Rowset.where(field, value [, return_first] [, async]);\n      var field = arguments[0];\n      var value = arguments[1];\n      if (arguments.length > 2) first = arguments[2];\n      if (arguments.length > 3) async = arguments[3];\n    }\n\n    return new Promise(\n      function (resolve, reject) {\n        // TODO lots of logic here\n        // The new rowset that is returned must be in the same format as the response from the server\n\n        if (first) {\n          for (var i = 0; i < this.rows.length; i++) {\n            if (this.rows[i].row[field] == value) {\n              resolve(\n                new AQ.Row(this.relation, {\n                  columns: this.columns,\n                  result: [this.rows[i]],\n                })\n              );\n            }\n          }\n          reject('could not find ' + field + ' ' + value);\n        } else {\n          var return_rowset = [];\n          for (var i = 0; i < this.rows.length; i++) {\n            if (this.rows[i].row[field] == value) {\n              return_rowset.push(this.rows[i]);\n            }\n          }\n          resolve(\n            new AQ.Rowset(this.relation, {\n              columns: this.columns,\n              result: return_rowset,\n            })\n          );\n        }\n\n        // 2\n\n        // maybe we don't need to search the entire row and instead we return the first item found\n        /*\n            var new_rowset = _.filter(this.rows, function(el) {\n                //return AQ.equals.call(this, el[field], val);\n            });\n*/\n        if (new_rowset.length == 1) {\n          return new AQ.Row(this.relation, new_rowset);\n        } else if (new_rowset.length > 1) {\n          throw 'Multiple Rows Returned';\n        }\n\n        // if row does not exist\n        return null;\n      }.bind(this)\n    );\n  };\n  AQ.Rowset.prototype.order_by = function (column, direction) {\n    /*\n        var ordered = _.sortBy(this.rows, function(el) {\n            return el.row[column];\n        });\n*/\n    if (direction !== 'asc') {\n      ordered.reverse();\n    }\n    return new AQ.Rowset(this.relation, {\n      columns: this.columns,\n      result: ordered,\n    });\n  };\n  AQ.Rowset.prototype.limit = function (lim) {\n    if (lim <= 0) {\n      throw 'Bad limit';\n    }\n    return new AQ.Rowset(this.relation, {\n      columns: this.columns,\n      result: this.rows.slice(0, lim),\n    });\n  };\n  AQ.Rowset.prototype.related_rows = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    var values = this.map(function (row) {\n      return row.get(self_column_name);\n    });\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: 'in',\n      value: values,\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n  };\n  AQ.Rowset.prototype.related_row = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    var values = this.map(function (row) {\n      return row.get(self_column_name);\n    });\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: 'in',\n      value: values,\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n  };\n\n  /*--------------------------------- * Row * ---------------------------------*/\n  function rowId(relId, pkValue) {\n    return {\n      url() {\n        return (\n          '/row/' + relId.schema_id.name + '/' + relId.name + '/' + pkValue\n        );\n      },\n    };\n  }\n  AQ.Row = function (relation, response) {\n    this.relation = relation;\n    this.schema = relation.schema;\n    this.row_data = response.result[0].row;\n\n    this.callbacks = new Callbacks();\n    this.cached_fields = {};\n    this.columns = response.columns || null;\n    this.pk_column_name = null;\n    this.pk_value = null;\n    this.id = null;\n    this.to_url = function () {\n      console.error(\n        'You must call a row with "meta_data: true" in order to use the to_url function'\n      );\n      throw 'Datum.js: Programming Error';\n    };\n\n    if (typeof response.pk != 'undefined') {\n      this.pk_column_name = response.pk;\n      this.pk_value = this.get(this.pk_column_name);\n      // this.id = {"pk_column_id":{"relation_id":{"schema_id":{"name":this.schema.name},"name":this.relation.name},"name":this.pk_column_name},"pk_value": this.pk_value}\n      this.id = {\n        pk_column_id: {\n          relation_id: this.relation.id,\n          name: this.pk_column_name,\n        },\n        pk_value: this.pk_value,\n      };\n\n      this.to_url = function (id_only) {\n        return id_only\n          ? '/row/' +\n              this.relation.schema.name +\n              '/' +\n              this.relation.name +\n              '/' +\n              /*JSON.stringify(this.pk_value)*/ this.pk_value\n          : this.relation.schema.database.endpoint.url +\n              '/row/' +\n              this.relation.schema.name +\n              '/' +\n              this.relation.name +\n              '/' +\n              /*JSON.stringify(this.pk_value)*/ this.pk_value;\n      };\n    }\n  };\n  AQ.Row.prototype = {\n    constructor: AQ.Row,\n    get: function (name) {\n      return this.row_data[name];\n    },\n    set: function (name, value) {\n      this.row_data[name] = value;\n      return this;\n    },\n    to_string: function () {\n      return JSON.stringify(this.row_data);\n    },\n    clone: function () {\n      return new AQ.Row(this.relation, {\n        columns: this.columns,\n        pk: this.pk_column_name,\n        result: [{row: this.row_data}],\n      });\n    },\n    field: function (name) {\n      if (typeof this.cached_fields[name] == 'undefined') {\n        this.cached_fields[name] = new AQ.Field(\n          this,\n          name,\n          name === this.pk_column_name\n        );\n      }\n      return this.cached_fields[name];\n    },\n    fields: function () {\n      if (this.columns != null) {\n        return this.columns.map(\n          function (c) {\n            return this.field(c.name);\n          }.bind(this)\n        );\n      }\n      return null;\n    },\n  };\n  AQ.Row.prototype._triggerEvent = function (eventType, payload) {\n    switch (eventType) {\n      case 'update': {\n        // TODO: update fields\n        break;\n      }\n    }\n    this.callbacks.call(eventType, payload);\n  };\n  AQ.Row.prototype.onUpdate = function (fn) {\n    this.callbacks.add('update', fn);\n  };\n  AQ.Row.prototype.onDelete = function (fn) {\n    this.callbacks.add('delete', fn);\n  };\n  AQ.Row.prototype.update = function () {\n    return this.relation.schema.database.endpoint\n      .patch(this, this.row_data)\n      .then(\n        function (response) {\n          if (response == null) {\n            throw 'Empty response';\n          }\n          return this;\n        }.bind(this)\n      )\n      .catch(function (err) {\n        throw 'Update failed: ' + err;\n      });\n  };\n  AQ.Row.prototype.delete = function () {\n    return this.relation.schema.database.endpoint\n      .delete(this)\n      .then(function (response) {\n        if (response == null) {\n          throw 'Empty response';\n        }\n      })\n      .catch(function (err) {\n        throw 'Delete failed: ' + err;\n      });\n  };\n  AQ.Row.prototype.related_rows = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: '=',\n      value: this.get(self_column_name),\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n  };\n  AQ.Row.prototype.related_row = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.relation.schema.database;\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: '=',\n      value: this.get(self_column_name),\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n  };\n\n  /*--------------------------------- * Column * ---------------------------------*/\n  AQ.Column = function (relation, name) {\n    this.relation = relation;\n    this.name = name;\n    this.id = {relation_id: relation.id, name: name};\n  };\n  AQ.Column.prototype.constructor = AQ.Column;\n\n  /*--------------------------------- * Field * ---------------------------------*/\n  AQ.Field = function (row, name, pk) {\n    this.row = row;\n    this.column = new AQ.Column(row.relation, name);\n    this.is_primary_key = pk;\n    this.name = name;\n    this.value = row.get(name);\n    this.id = {row_id: this.row.id, column_id: this.column.id};\n    this.to_url = function (id_only) {\n      if (this.row.pk_value == null) {\n        console.error(\n          'You must call a row with "meta_data: true" in order to use the to_url function'\n        );\n        throw 'Datum.js: Programming Error';\n      }\n      return id_only\n        ? '/field/' +\n            this.row.relation.schema.name +\n            '/' +\n            this.row.relation.name +\n            '/' +\n            /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value +\n            '/' +\n            this.column.name\n        : this.row.relation.schema.database.endpoint.url +\n            '/field/' +\n            this.row.relation.schema.name +\n            '/' +\n            this.row.relation.name +\n            '/' +\n            /*JSON.stringify(this.row.pk_value)*/ this.row.pk_value +\n            '/' +\n            this.column.name;\n    };\n  };\n  AQ.Field.prototype = {\n    constructor: AQ.Field,\n    get: function () {\n      return this.row.get(this.name);\n    },\n    set: function (value) {\n      this.value = value;\n      return this.row.set(this.name, value);\n    },\n    update: function () {\n      return this.row.update();\n    }, // TODO: This is wrong\n  };\n\n  /*--------------------------------- * Function * ---------------------------------*/\n  AQ.Function = function (schema, name, args) {\n    this.schema = schema;\n    this.name = name;\n\n    if (args instanceof Array) {\n      this.args = '{' + args.join(',') + '}';\n    } else {\n      this.args = args;\n    }\n\n    this.id = {schema_id: this.schema.id, name: this.name, args: this.args};\n    this.to_url = function (id_only) {\n      var base_url = id_only ? '' : this.schema.database.endpoint.url;\n      if (typeof this.args != 'undefined') {\n        return (\n          base_url +\n          '/function/' +\n          this.schema.name +\n          '/' +\n          this.name +\n          '/' +\n          this.args\n        );\n      }\n      return base_url + '/function/' + this.schema.name + '/' + this.name;\n    };\n  };\n  AQ.Function.prototype.constructor = AQ.Function;\n\n  /*--------------------------------- * Function Result * ---------------------------------*/\n  AQ.FunctionResult = function (fn, response) {\n    this.function = fn;\n    this.schema = fn.schema;\n    this.row_data = response.result[0].row;\n    this.rows = response.result;\n    this.columns = response.columns;\n  };\n  AQ.FunctionResult.prototype = {\n    constructor: AQ.FunctionResult,\n    get: function (name) {\n      return this.row_data[name];\n    },\n    to_string: function () {\n      return JSON.stringify(this.row_data);\n    },\n  };\n  AQ.FunctionResult.prototype.map = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.FunctionResult(this.function, {\n            columns: this.columns,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .map(fn);\n  };\n  AQ.FunctionResult.prototype.forEach = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.FunctionResult(this.function, {\n            columns: this.columns,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .forEach(fn);\n  };\n  AQ.FunctionResult.prototype.related_rows = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: '=',\n      value: this.get(self_column_name),\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n  };\n  AQ.FunctionResult.prototype.related_row = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: '=',\n      value: this.get(self_column_name),\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n  };\n\n  /*--------------------------------- * Function Result Set * ---------------------------------*/\n  AQ.FunctionResultSet = function (fn, response) {\n    this.function = fn;\n    this.schema = fn.schema;\n    this.columns = response.columns;\n    this.rows = response.result;\n  };\n  AQ.FunctionResultSet.prototype.constructor = AQ.FunctionResultSet;\n  AQ.FunctionResultSet.prototype.map = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.FunctionResult(this.function, {\n            columns: this.columns,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .map(fn);\n  };\n  AQ.FunctionResultSet.prototype.forEach = function (fn) {\n    return this.rows\n      .map(\n        function (row) {\n          return new AQ.FunctionResult(this.function, {\n            columns: this.columns,\n            result: [row],\n          });\n        }.bind(this)\n      )\n      .forEach(fn);\n  };\n  AQ.FunctionResultSet.prototype.related_rows = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    var values = this.map(function (row) {\n      return row.get(self_column_name);\n    });\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: 'in',\n      value: values,\n    });\n\n    return db.schema(schema_name).relation(relation_name).rows(options);\n  };\n  AQ.FunctionResultSet.prototype.related_row = function (\n    self_column_name,\n    related_relation_name,\n    related_column_name,\n    options\n  ) {\n    var relation_parts = related_relation_name.split('.');\n    if (relation_parts.length < 2) {\n      console.error(\n        'Related relation name must be schema qualified (schema_name.relation_name)'\n      );\n      // throw "Related relation name must be schema qualified (schema_name.relation_name)";\n    }\n\n    var schema_name = relation_parts[0];\n    var relation_name = relation_parts[1];\n    var db = this.function.schema.database;\n\n    var values = this.map(function (row) {\n      return row.get(self_column_name);\n    });\n\n    options = options || {};\n    options.where =\n      options.where instanceof Array\n        ? options.where\n        : typeof options.where == 'undefined'\n        ? []\n        : [options.where];\n    options.where.push({\n      name: related_column_name,\n      op: 'in',\n      value: values,\n    });\n\n    return db.schema(schema_name).relation(relation_name).row(options);\n  };\n\n  window.AQ = AQ;\n  return AQ;\n});\n
\\xf55aa5d87f52e6ef2e902294007ada0b6e91c7e3cef1b6aa579f843871fd05a0	// doT.js\n// 2011, Laura Doktorova, https://github.com/olado/doT\n// Licensed under the MIT license.\n\n(function() {\n    "use strict";\n\n    var doT = {\n        version: '1.0.1',\n        templateSettings: {\n            evaluate:    /\\{\\{([\\s\\S]+?(\\}?)+)\\}\\}/g,\n            interpolate: /\\{\\{=([\\s\\S]+?)\\}\\}/g,\n            encode:      /\\{\\{!([\\s\\S]+?)\\}\\}/g,\n            use:         /\\{\\{#([\\s\\S]+?)\\}\\}/g,\n            useParams:   /(^|[^\\w$])def(?:\\.|\\[[\\'\\"])([\\w$\\.]+)(?:[\\'\\"]\\])?\\s*\\:\\s*([\\w$\\.]+|\\"[^\\"]+\\"|\\'[^\\']+\\'|\\{[^\\}]+\\})/g,\n            define:      /\\{\\{##\\s*([\\w\\.$]+)\\s*(\\:|=)([\\s\\S]+?)#\\}\\}/g,\n            defineParams:/^\\s*([\\w$]+):([\\s\\S]+)/,\n            conditional: /\\{\\{\\?(\\?)?\\s*([\\s\\S]*?)\\s*\\}\\}/g,\n            iterate:     /\\{\\{~\\s*(?:\\}\\}|([\\s\\S]+?)\\s*\\:\\s*([\\w$]+)\\s*(?:\\:\\s*([\\w$]+))?\\s*\\}\\})/g,\n//          varname:    'it',\n            strip:      true,\n            append:     true,\n            selfcontained: false\n        },\n        template: undefined, //fn, compile template\n        compile:  undefined  //fn, for express\n    }, global;\n\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = doT;\n    } else if (typeof define === 'function' && define.amd) {\n        define(function(){return doT;});\n    } else {\n        global = (function(){ return this || (0,eval)('this'); }());\n        global.doT = doT;\n    }\n\n    function encodeHTMLSource() {\n        var encodeHTMLRules = { "&": "&#38;", "<": "&#60;", ">": "&#62;", '"': '&#34;', "'": '&#39;', "/": '&#47;' },\n            matchHTML = /&(?!#?\\w+;)|<|>|"|'|\\//g;\n        return function() {\n            return this ? this.replace(matchHTML, function(m) {return encodeHTMLRules[m] || m;}) : this;\n        };\n    }\n    String.prototype.encodeHTML = encodeHTMLSource();\n\n    var startend = {\n        append: { start: "'+(",      end: ")+'",      endencode: "||'').toString().encodeHTML()+'" },\n        split:  { start: "';out+=(", end: ");out+='", endencode: "||'').toString().encodeHTML();out+='"}\n    }, skip = /$^/;\n\n    function resolveDefs(c, block, def) {\n        return ((typeof block === 'string') ? block : block.toString())\n        .replace(c.define || skip, function(m, code, assign, value) {\n            if (code.indexOf('def.') === 0) {\n                code = code.substring(4);\n            }\n            if (!(code in def)) {\n                if (assign === ':') {\n                    if (c.defineParams) value.replace(c.defineParams, function(m, param, v) {\n                        def[code] = {arg: param, text: v};\n                    });\n                    if (!(code in def)) def[code]= value;\n                } else {\n                    new Function("def", "def['"+code+"']=" + value)(def);\n                }\n            }\n            return '';\n        })\n        .replace(c.use || skip, function(m, code) {\n            if (c.useParams) code = code.replace(c.useParams, function(m, s, d, param) {\n                if (def[d] && def[d].arg && param) {\n                    var rw = (d+":"+param).replace(/'|\\\\/g, '_');\n                    def.__exp = def.__exp || {};\n                    def.__exp[rw] = def[d].text.replace(new RegExp("(^|[^\\\\w$])" + def[d].arg + "([^\\\\w$])", "g"), "$1" + param + "$2");\n                    return s + "def.__exp['"+rw+"']";\n                }\n            });\n            var v = new Function("def", "return " + code)(def);\n            return v ? resolveDefs(c, v, def) : v;\n        });\n    }\n\n    function unescape(code) {\n        return code.replace(/\\\\('|\\\\)/g, "$1").replace(/[\\r\\t\\n]/g, ' ');\n    }\n\n    doT.template = function(tmpl, c, def) {\n        c = c || doT.templateSettings;\n        var cse = c.append ? startend.append : startend.split, needhtmlencode, sid = 0, indv,\n            str  = (c.use || c.define) ? resolveDefs(c, tmpl, def || {}) : tmpl;\n\n        str = ("var out='" + (c.strip ? str.replace(/(^|\\r|\\n)\\t* +| +\\t*(\\r|\\n|$)/g,' ')\n                    .replace(/\\r|\\n|\\t|\\/\\*[\\s\\S]*?\\*\\//g,''): str)\n            .replace(/'|\\\\/g, '\\\\$&')\n            .replace(c.interpolate || skip, function(m, code) {\n                return cse.start + unescape(code) + cse.end;\n            })\n            .replace(c.encode || skip, function(m, code) {\n                needhtmlencode = true;\n                return cse.start + unescape(code) + cse.endencode;\n            })\n            .replace(c.conditional || skip, function(m, elsecase, code) {\n                return elsecase ?\n                    (code ? "';}else if(" + unescape(code) + "){out+='" : "';}else{out+='") :\n                    (code ? "';if(" + unescape(code) + "){out+='" : "';}out+='");\n            })\n            .replace(c.iterate || skip, function(m, iterate, vname, iname) {\n                if (!iterate) return "';} } out+='";\n                sid+=1; indv=iname || "i"+sid; iterate=unescape(iterate);\n                return "';var arr"+sid+"="+iterate+";if(arr"+sid+"){var "+vname+","+indv+"=-1,l"+sid+"=arr"+sid+".length-1;while("+indv+"<l"+sid+"){"\n                    +vname+"=arr"+sid+"["+indv+"+=1];out+='";\n            })\n            .replace(c.evaluate || skip, function(m, code) {\n                return "';" + unescape(code) + "out+='";\n            })\n            + "';return out;")\n            .replace(/\\n/g, '\\\\n').replace(/\\t/g, '\\\\t').replace(/\\r/g, '\\\\r')\n            .replace(/(\\s|;|\\}|^|\\{)out\\+='';/g, '$1').replace(/\\+''/g, '')\n            .replace(/(\\s|;|\\}|^|\\{)out\\+=''\\+/g,'$1out+=');\n\n        if (needhtmlencode && c.selfcontained) {\n            str = "String.prototype.encodeHTML=(" + encodeHTMLSource.toString() + "());" + str;\n        }\n\n                str += '\\n//# sourceURL=doT-template_' + 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n                    var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n                    return v.toString(16);\n                });\n\n        try {\n            if('varname' in c) {\n            return new Function(c.varname, str);\n            }\n            else {\n            return function(context) {\n                var argnames = [];\n                var argvals = [];\n\n                for(var argname in context) {\n                argnames.push(argname);\n                argvals.push(context[argname]);\n                }\n\n                var f = Function.apply(this, argnames.concat([str]));\n\n                return f.apply(this, argvals);\n            };\n            }\n        } catch (e) {\n            if (typeof console !== 'undefined') console.log("Could not create a template function: " + str);\n            throw e;\n        }\n    };\n\n    doT.compile = function(tmpl, def) {\n        return doT.template(tmpl, null, def);\n    };\n}());
\\xffb6bfecfe8f0a310d5f74913989dcbe485524cb3a133cce7601e06627fcdb46	aquameta-template-plv8
