\\x09f7dc118beb6c7aa05fca47796aa7ef526b995919a05b1e66f3ce0a450f6146	788fdcbd-d672-4ff7-9c30-e6f2cc1dcc34
\\x0aca120bbb0623f5f4e412cbc64f869e28ce7859adbb346c110c07988f9029be	<div id="{{= id }}" class="{{= name }}">\n    GAME OVER\n</div>
\\x0b69511910c9fa61280d6bccf3487246723e3a08495198293386da55d8638df3	var w = $("#"+id);\n\n/*\nfor (var i=0;i<50;i++) {\n    for (var j=0;j<50;j++) {\n        w.append(widget('s:square', { x: i, y: j }));\n    }\n}\n*/\nw.append(widget('s:snake'));\nw.append(widget('s:food'));
\\x0ba9b693da6b2dbb83cee744e953ac5cb5f3d2cb93a4a0550b607a7fdcca02c2	.{{= name }} {\n}
\\x12d17b5fd917e1ce1445963dbef9cd54e29bfadd82cbed8a1291f74e8fadb3e5	ac294312-bd44-4f99-bfff-1313e97df9a7
\\x1400cb70908a8f850d11210478824c09509a0fdfe76621fa37896fd822d9611d	var w = $("#"+id);\n\nw.css('width', config.PIECE_SIZE);\nw.css('height', config.PIECE_SIZE);\n\nvar x_pos = Math.floor(config.BOARD_WIDTH / 2);\nvar y_pos = Math.floor(config.BOARD_HEIGHT / 2);\nvar x_dir = 1, y_dir = 0;\nvar tail = Array({x_pos, y_pos});\ngame_over = false;\n\n\nfunction reverse() {\n    console.log('reverse!');\n\n    tail.reverse();\n\n\t// direction\n    if (tail.length > 2) {\n        x_dir = tail[0].x - tail[1].x;\n        y_dir = tail[0].y - tail[1].y;\n    } else {\n        x_dir = x_dir * -1;\n        y_dir = y_dir * -1;\n    }\n\n    \n    x_pos = tail[0].x;\n    y_pos = tail[0].y;\n}\n\n\nfunction draw() {\n    // update position\n    x_pos += x_dir;\n    y_pos += y_dir;\n\n    // check for collission\n    // wall\n    if (x_pos < 0 || x_pos >= config.BOARD_WIDTH || y_pos < 0 || y_pos >= config.BOARD_HEIGHT) {\n        game_over_f();\n        return;\n    }\n\t// self\n    for (var i=0;i<tail.length;i++) {\n        if (x_pos == tail[i].x && y_pos == tail[i].y) {\n            game_over_f();\n            return;\n        }\n    }\n\n    // add to tail\n    tail.unshift({ x: x_pos, y: y_pos });\n\n    // redraw\n    w.css('left', x_pos * config.PIECE_SIZE + 'px');\n    w.css('top', y_pos * config.PIECE_SIZE + 'px');\n\n    // check for food\n    var food_x = $('.food').data('x');\n    var food_y = $('.food').data('y');\n\n    if (food_x == x_pos && food_y == y_pos) {\n        w.trigger('piece_eaten', { tail: tail } );\n    } else {\n        // remove tail piece\n        tail.splice(-1);\n    }\n\n    // tail\n    var tail_of_tail_x = tail[tail.length-1].x;\n    var tail_of_tail_y = tail[tail.length-1].y;\n    \n    // console.log('tail of tail: ', tail_of_tail_y, tail_of_tail_x);\n    \n    /*\n    failed attempt at optimizing this so we don't redraw the whole snake each move:\n    \n    w.closest('.board')\n    \t.append(widget('s:tail_piece', {\n            x: tail[0].x,\n            y: tail[0].y,\n            config: config \n        }));\n    \n    $('.tail_piece[data-xpos='+tail_of_tail_x+'][data-ypos='+tail_of_tail_y+']').remove();\n    */\n    \n    $(document).find('.tail_piece').remove();\n    for (var i=1;i<tail.length;i++) {\n        w.closest('.board').append(widget('s:tail_piece', { x: tail[i].x, y: tail[i].y, config: config }));\n    }\n    // */\n\n    if (!game_over) {\n        setTimeout(draw, config.SPEED);\n    }\n}\n\n\nfunction game_over_f() {\n    w.trigger('game_over');\n    game_over = true;\n}\n\n\njwerty.key('↑', function() { x_dir = 0; y_dir = -1 });\njwerty.key('↓', function() { x_dir = 0; y_dir = 1; });\njwerty.key('←', function() { x_dir = -1; y_dir = 0; });\njwerty.key('→', function() { x_dir = 1; y_dir = 0 });\njwerty.key('r', reverse);\n\ndraw();\n
\\x1414da518ee9e808abc4fd36777e2830f5866fcd9059e4458808e8db95b1e026	var w = $("#"+id);\n\n// constants\nvar config = {\n    'BOARD_WIDTH': 40,\n    'BOARD_HEIGHT': 30,\n    'PIECE_SIZE': 20,\n    'SPEED': 100\n}\n\nw.append(widget('s:board', { config: config }));\n\nw.bind('game_over', function() {\n    w.append(widget('s:game_over'));\n});
\\x1b20202f843b1b82042e3973896c7deab276364a528b7b567bf5f8c296e76447	.{{= name }} {\n    position: absolute;\n    background-color: pink;\n}
\\x1fd045cf2b409a1d3535c6ebd7a99bf3fd5d5d7ef82537a310d2b881c5ca41fe	var w = $("#"+id);\n\n// constants\nvar config = {\n    'BOARD_WIDTH': 40,\n    'BOARD_HEIGHT': 30,\n    'PIECE_SIZE': 20,\n    'SPEED': 100\n}\n\nw.append(widget('s:board', { config: config }));\nw.append(widget('s:instructions', { config: config }));\n\nw.bind('game_over', function() {\n    w.append(widget('s:game_over'));\n});
\\x238fa28a94976c7da14563bc873c2729bd5cd325389085bb4c6dd0de28923590	instructions
\\x262132a4bb4feca53a36993b55a69d1e7ac233847824ac7edb34fbc0a97c350a	<!DOCTYPE html>\n<html lang="en">\n    <head>\n        <script src='/system.js'></script>\n        <title>Snake!</title>\n        <meta http-equiv="Content-type" content="text/html; charset=utf-8">\n        <meta name="viewport" content="width=device-width">\n\n\n\n        <link href='//fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>\n        <style>\n            html {\n                box-sizing: border-box;\n                background-color: black;\n                color: white;\n            }\n            *, *:before, *:after {\n                box-sizing: inherit;\n            }\n            body {\n                font-family: 'Open Sans', sans-serif;\n            }\n            html, body {\n                height: 100%;\n                margin: 0;\n            }\n        </style>\n    </head>\n    <body></body>\n    <script>\n        System.import('/widget.js').then(function(widget) {\n\n            var db = new AQ.Database('/endpoint/0.3', { evented: 'no' });\n            window.endpoint = db;\n\n            AQ.Widget.import('org.aquameta.core.ide', 'ide', db);\n            AQ.Widget.import('org.aquameta.games.snake', 's', db);\n\n            $('body').append(widget('s:game'));\n            $('body').append(widget('ide:debugger3_manager'));\n\n        });\n    </script>\n</html>\n
\\x269f6b563ce1bd483546e3d5294295313338e47ec6b3c38443d5061e7ff43b65	var w = $("#"+id);\n\n// constants\nvar BOARD_WIDTH = 20;\nvar BOARD_HEIGHT = 20;\nvar PIECE_SIZE = 20;\n\n// setup\nw.css('width', PIECE_SIZE + 'px');\nw.css('height', PIECE_SIZE + 'px');\n\nvar x, y;\n\nfunction draw (e, tail) {\n    var tail_collission = false;\n    \n    do {\n        x = Math.floor(Math.random() * BOARD_WIDTH);\n        y = Math.floor(Math.random() * BOARD_HEIGHT);\n\n        for (var i=0;i<tail.length;i++) {\n            if (x == tail[i].x && y == tail[i].y)\n                tail_collision = true;\n        }\n    } while (tail_collission == true);\n\n    w.css('left', x * PIECE_SIZE + 'px');\n    w.css('top', y * PIECE_SIZE + 'px');\n    \n    w.data('x',x);\n    w.data('y',y);\n}\n\nw.closest('.game').bind('piece_eaten', draw);\ndraw(null, Array());\n
\\x2f59d3778a727c31c1992fc03657dec05bc7e496e13ec5b0e294816cb75f90d8	var w = $("#"+id);\n\nw.css('top',y * 22 + 'px');\nw.css('left',x * 22 + 'px');
\\x306ec15614b6246f952339b5073caf2dc6a1b452c530fd90168fdf609b6b389e	var w = $("#"+id);\n\n// constants\nvar BOARD_WIDTH = 20;\nvar BOARD_HEIGHT = 20;\nvar PIECE_SIZE = 20;\n\nw.css('width', BOARD_WIDTH * PIECE_SIZE + 'px');\nw.css('height', BOARD_HEIGHT * PIECE_SIZE + 'px');\n\n/*\nfor (var i=0;i<50;i++) {\n    for (var j=0;j<50;j++) {\n        w.append(widget('s:square', { x: i, y: j }));\n    }\n}\n*/\nw.append(widget('s:snake'));\nw.append(widget('s:food'));
\\x3109334ac622b1ed4db38c480826227b22be3a855a54ee9708d232e38f77f725	.{{= name }} {\n    position: absolute;\n    background-color: green;\n}
\\x3500a1efacdb55acbdf30362c012675481bb580540e6611fb73616366d3d4263	6dfdf1c9-b7a1-4d4f-a1c7-778171b81e28
\\x3ce5fef4216c56c249757c6f934650949276c9fb1d83a77ea6a30e2383bba157	8c212247-ec13-4d86-a905-85875a0365c5
\\x3e28fba5d349422ee7e3e3f7c580e344bb506b8e3e4931784ad266cb577f239e	var w = $("#"+id);\n\n// constants\nvar BOARD_WIDTH = 20;\nvar BOARD_HEIGHT = 20;\nvar PIECE_SIZE = 20;\nvar SPEED = 100;\n\nvar x_pos = 10;\nvar y_pos = 10;\nvar x_dir = 1, y_dir = 0;\nvar tail = Array({x_pos, y_pos});\ngame_over = false;\n\n\njwerty.key('↑', function() { x_dir = 0; y_dir = -1 });\njwerty.key('↓', function() { x_dir = 0; y_dir = 1; });\njwerty.key('←', function() { x_dir = -1; y_dir = 0; });\njwerty.key('→', function() { x_dir = 1; y_dir = 0 });\n\n\nfunction game_over_f() {\n    alert ('BOOM!');\n    w.trigger('game_over');\n    game_over = true;\n}\n\n\nfunction draw() {\n    // update position\n    x_pos += x_dir;\n    y_pos += y_dir;\n\n    // check for collission\n    if (x_pos < 0 || x_pos >= BOARD_WIDTH || y_pos < 0 || y_pos >= BOARD_HEIGHT) {\n        game_over_f();\n        return;\n    }\n\n    for (var i=0;i<tail.length;i++) {\n        if (x_pos == tail[i].x && y_pos == tail[i].y) {\n            game_over_f();\n            return;\n        }\n    }\n\n    // add to tail\n    tail.unshift({ x: x_pos, y: y_pos });\n\n    // redraw\n    w.css('left', x_pos * 20 + 'px');\n    w.css('top', y_pos * 20 + 'px');\n\n    // check for food\n    var food_x = $('.food').data('x');\n    var food_y = $('.food').data('y');\n\n    if (food_x == x_pos && food_y == y_pos) {\n        w.trigger('piece_eaten', { tail: tail } );\n    } else {\n        // remove tail piece\n        tail.splice(-1);\n    }\n\n    // tail\n    $(document).find('.tail_piece').remove();\n    for (var i=1;i<tail.length;i++) {\n        w.closest('.board').append(widget('s:tail_piece', { x: tail[i].x, y: tail[i].y }));\n    }\n\n    if (!game_over) {\n        setTimeout(draw, SPEED);\n    }\n}\n\ndraw();\n
\\x43a0e521cca1d131fe11d90a61998970292ca3be14f927c92ab190d549ad2528	var w = $("#"+id);\n\n// constants\nvar BOARD_WIDTH = 20;\nvar BOARD_HEIGHT = 20;\nvar PIECE_SIZE = 20;\n\nvar x_pos = 10;\nvar y_pos = 10;\nvar x_dir = 1, y_dir = 0;\nvar tail = Array();\ngame_over = false;\n\n\njwerty.key('↑', function() { console.log('up'); x_dir = 0; y_dir = -1 });\njwerty.key('↓', function() { x_dir = 0; y_dir = 1; });\njwerty.key('←', function() { x_dir = -1; y_dir = 0; });\njwerty.key('→', function() { x_dir = 1; y_dir = 0 });\n\n\nfunction game_over_f() {\n    alert ('BOOM!');\n    w.trigger('game_over');\n    game_over = true;\n}\n\n\nfunction draw() {\n    // update position\n    x_pos += x_dir;\n    y_pos += y_dir;\n\n    // check for collission\n    if (x_pos < 0 || x_pos >= BOARD_WIDTH || y_pos < 0 || y_pos >= BOARD_HEIGHT) {\n        game_over_f();\n    }\n\n    for (var i=0;i<tail.length;i++) {\n        if (x_pos == tail[i].x && y_pos == tail[i].y) {\n            game_over_f();\n        }\n    }\n\n    // add to tail\n    tail.unshift({ x: x_pos, y: y_pos });\n\n    // redraw\n    w.css('left', x_pos * 20 + 'px');\n    w.css('top', y_pos * 20 + 'px');\n\n    // check for food\n    var food_x = $('.food').data('x');\n    var food_y = $('.food').data('y');\n\n    if (food_x == x_pos && food_y == y_pos) {\n        w.trigger('piece_eaten');\n        console.log('HIT!');\n    } else {\n        // remove tail piece\n        tail.splice(-1);\n    }\n\n    // tail\n    $(document).find('.tail_piece').remove();\n    for (var i=0;i<tail.length;i++) {\n        w.closest('.board').append(widget('s:tail_piece', { x: tail[i].x, y: tail[i].y }));\n    }\n\n\n    console.log(tail.length);\n\n    if (!game_over) {\n        setTimeout(draw, 200);\n    }\n}\n\ndraw();\n
\\x44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a	{}
\\x4562112bc7ca553e4478ea983dd1fdc011e2b7bf6de0363e72d52025a26daf08	var w = $("#"+id);\n\n// setup\nw.css('width', config.PIECE_SIZE + 'px');\nw.css('height', config.PIECE_SIZE + 'px');\n\nw.css('left', x * config.PIECE_SIZE + 'px');\nw.css('top', y * config.PIECE_SIZE + 'px');\n
\\x45e811317390d9c96001c297d5b3ef0ada2f9b77cda5c347b21a192dca2c1b56	c6af5741-02c6-4d51-ba6e-c622750137ed
\\x486ae38af4ad4201c51afcab2da324eb6cd2fb50c72a08d2e4bbd5c1bb1d1e86	{\n    "title": "Snake!",\n    "bundles": [\n    {\n    \t"name": "org.aquameta.core.ide",\n        "alias": "ide"\n    }, {\n        "name": "org.aquameta.core.ide",\n        "alias": "core"\n    }, {\n        "name": "org.aquameta.games.snake",\n        "alias": "s"\n    }\n    ],\n    "widgets": [ "s:game", "ide:debugger3_manager" ]\n}
\\x48e7b1232576d5aa5471fb85fac589b731551fbe1f49a3f24843fe4df50fb233	.{{= name }} {\n    width: 100%;\n    height: 100%;\n    background-color: red;\n    color: white;\n    font-size: 700%;\n}
\\x4938388f0c68650a2120ab03dfbf8e39b08edca0d086b3c3fd02e84e501a5fab	var w = $("#"+id);
\\x4ba3e8e3765f2970eb37fae535353dd623d40a0507848c3c1dd240a5a7eb995e	square
\\x4bb9b7d708edefede56b7ef721dec4575f122d6b82bd17988ef1fd628bd42986	6173195d-17b4-46a8-8915-b93ca3c54df8
\\x4bc9c8d53e76b55b7a2667e1c1a19cf3c1e46f096ae985785637e4c69a8a33c6	<div id="{{= id }}" class="{{= name }}">\n    How to play:  Snake collects the food to get longer.  Arrow keys to change direction, 'r' reverses.<br>Programmed by Eric Hanson in <a href='http://aquameta.org/'>aquameta</a>\n</div>
\\x520fdaf211090e8506a8aaf21317e7eec05a9fa790733d10cdcbf518da06b586	.{{= name }} {\n    position: absolute;\n    background-color: yellow;\n}
\\x537e1cd144937745596c3545551e02000ebd87c5c74cff59d0298506747eccca	d41c9132-6ecf-44e3-b1e9-fd83ef58dbce
\\x538d7d9fe78e7baac47a9fbd6f2c68845ecca72dbdc2b47b4c5a0f5620ab8e93	snake
\\x56f274987be85416d462d863ac0986e81b2698518972d832516a2c79c595653b	c5c27e68-1a4b-42e7-9c8e-c8fa7fadaa3e
\\x5bc600f375667e31384e64d648a7def88e55e2048c572dd32808316376029014	game_over
\\x5c7b06ed703823b9ca6618ae338c5d4d0d789c8a66c0b0cbf31f371d08b0e4cc	.{{= name }} {\n    position: absolute;\n    width: 20px;\n    height: 20px;\n    border: 2px solid green;\n}
\\x5df3b36b635e283ceba094278b99c0b2d9fda8f2c1ca359c9992c0f445db969f	var w = $("#"+id);\n\nvar x_pos = 10;\nvar y_pos = 10;\nvar x_dir = 1, y_dir = 0;\nvar tail = Array({x_pos, y_pos});\ngame_over = false;\n\n\njwerty.key('↑', function() { x_dir = 0; y_dir = -1 });\njwerty.key('↓', function() { x_dir = 0; y_dir = 1; });\njwerty.key('←', function() { x_dir = -1; y_dir = 0; });\njwerty.key('→', function() { x_dir = 1; y_dir = 0 });\n\n\nfunction game_over_f() {\n    alert ('BOOM!');\n    w.trigger('game_over');\n    game_over = true;\n}\n\n\nfunction draw() {\n    // update position\n    x_pos += x_dir;\n    y_pos += y_dir;\n\n    // check for collission\n    if (x_pos < 0 || x_pos >= config.BOARD_WIDTH || y_pos < 0 || y_pos >= config.BOARD_HEIGHT) {\n        game_over_f();\n        return;\n    }\n\n    for (var i=0;i<tail.length;i++) {\n        if (x_pos == tail[i].x && y_pos == tail[i].y) {\n            game_over_f();\n            return;\n        }\n    }\n\n    // add to tail\n    tail.unshift({ x: x_pos, y: y_pos });\n\n    // redraw\n    w.css('left', x_pos * 20 + 'px');\n    w.css('top', y_pos * 20 + 'px');\n\n    // check for food\n    var food_x = $('.food').data('x');\n    var food_y = $('.food').data('y');\n\n    if (food_x == x_pos && food_y == y_pos) {\n        w.trigger('piece_eaten', { tail: tail } );\n    } else {\n        // remove tail piece\n        tail.splice(-1);\n    }\n\n    // tail\n    $(document).find('.tail_piece').remove();\n    for (var i=1;i<tail.length;i++) {\n        w.closest('.board').append(widget('s:tail_piece', { x: tail[i].x, y: tail[i].y, config: config }));\n    }\n\n    if (!game_over) {\n        setTimeout(draw, config.SPEED);\n    }\n}\n\ndraw();\n
\\x5f2bfb3348367cb6924c445204bad94ce889cedcb6c967c274a1924f03e5b3ae	/games/snake
\\x67a979e687fce61b028a99975f07822b0fa5b4f179bea4cceb87ded5c8b3ca61	var w = $("#"+id);\n\nw.css('width', config.PIECE_SIZE);\nw.css('height', config.PIECE_SIZE);\n\nvar x_pos = Math.floor(config.BOARD_WIDTH / 2);\nvar y_pos = Math.floor(config.BOARD_HEIGHT / 2);\nvar x_dir = 1, y_dir = 0;\nvar tail = Array({x_pos, y_pos});\ngame_over = false;\n\n\nfunction reverse() {\n    console.log('reverse!');\n\n    tail.reverse();\n\n\t// direction\n    if (tail.length > 2) {\n        x_dir = tail[0].x - tail[1].x;\n        y_dir = tail[0].y - tail[1].y;\n    } else {\n        x_dir = x_dir * -1;\n        y_dir = y_dir * -1;\n    }\n\n    \n    x_pos = tail[0].x;\n    y_pos = tail[0].y;\n}\n\n\nfunction draw() {\n    // update position\n    x_pos += x_dir;\n    y_pos += y_dir;\n\n    // check for collission\n    // wall\n    if (x_pos < 0 || x_pos >= config.BOARD_WIDTH || y_pos < 0 || y_pos >= config.BOARD_HEIGHT) {\n        game_over_f();\n        return;\n    }\n\t// self\n    for (var i=0;i<tail.length;i++) {\n        if (x_pos == tail[i].x && y_pos == tail[i].y) {\n            game_over_f();\n            return;\n        }\n    }\n\n    // add to tail\n    tail.unshift({ x: x_pos, y: y_pos });\n\n    // redraw\n    w.css('left', x_pos * config.PIECE_SIZE + 'px');\n    w.css('top', y_pos * config.PIECE_SIZE + 'px');\n\n    // check for food\n    var food_x = $('.food').data('x');\n    var food_y = $('.food').data('y');\n\n    if (food_x == x_pos && food_y == y_pos) {\n        w.trigger('piece_eaten', { tail: tail } );\n    } else {\n        // remove tail piece\n        tail.splice(-1);\n    }\n\n    // tail\n    var tail_of_tail_x = tail[tail.length-1].x;\n    var tail_of_tail_y = tail[tail.length-1].y;\n    \n    console.log('tail of tail: ', tail_of_tail_y, tail_of_tail_x);\n    \n    /*\n    w.closest('.board')\n    \t.append(widget('s:tail_piece', {\n            x: tail[0].x,\n            y: tail[0].y,\n            config: config \n        }));\n    \n    $('.tail_piece[data-xpos='+tail_of_tail_x+'][data-ypos='+tail_of_tail_y+']').remove();\n    */\n    \n    $(document).find('.tail_piece').remove();\n    for (var i=1;i<tail.length;i++) {\n        w.closest('.board').append(widget('s:tail_piece', { x: tail[i].x, y: tail[i].y, config: config }));\n    }\n    // */\n\n    if (!game_over) {\n        setTimeout(draw, config.SPEED);\n    }\n}\n\n\nfunction game_over_f() {\n    w.trigger('game_over');\n    game_over = true;\n}\n\n\njwerty.key('↑', function() { x_dir = 0; y_dir = -1 });\njwerty.key('↓', function() { x_dir = 0; y_dir = 1; });\njwerty.key('←', function() { x_dir = -1; y_dir = 0; });\njwerty.key('→', function() { x_dir = 1; y_dir = 0 });\njwerty.key('r', reverse);\n\ndraw();\n
\\x67c6d33e91583396f6c959121d04af0b0b21266aabe5fa5ed18e27c82cadd790	1335cdfd-24db-44dc-ac91-3b4e4c5267ca
\\x68dd880598da517454b1aca399cfd50e8fdb57b6b48c5cc0ad3fbb946caf6c16	.{{= name }} {\n    position: absolute;\n    width: 20px;\n    height: 20px;\n    background-color: blue;\n    \n}
\\x6c480497d955c6ffdfb63b0ac30c080c770c884063dcf477150f899d653ed55f	{\n    "title": "Snake!",\n    "bundles": {},\n    "widgets": {}\n}
\\x6ca5cab77e702c787b4c14b3d3bf26bad43da606be6eed04ab0b9720120ae081	game
\\x6d7a98633e239e834947e9708383b2bf0ee3a7701e79c09e203df9b1b52bc344	<!DOCTYPE html>\n<html lang="en">\n    <head>\n        <script src='/system.js'></script>\n        <title>Aquameta</title>\n        <meta http-equiv="Content-type" content="text/html; charset=utf-8">\n        <meta name="viewport" content="width=device-width">\n\n\n\n        <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>\n        <style>\n            html {\n                box-sizing: border-box;\n                background-color: black;\n                color: white;\n            }\n            *, *:before, *:after {\n                box-sizing: inherit;\n            }\n            body {\n                font-family: 'Open Sans', sans-serif;\n            }\n            html, body {\n                height: 100%;\n                margin: 0;\n            }\n        </style>\n    </head>\n    <body></body>\n    <script>\n        System.import('/widget.js').then(function(widget) {\n\n            var db = new AQ.Database('/endpoint/0.1', { evented: 'no' });\n            window.endpoint = db;\n\n            AQ.Widget.import('org.aquameta.core.ide', 'core', db);\n            AQ.Widget.import('org.aquameta.core.ide', 'ide', db);\n            AQ.Widget.import('org.aquameta.games.snake', 's', db);\n\n            $('body').append(widget('s:game'));\n            $('body').append(widget('ide:debugger3_manager'));\n\n        });\n    </script>\n</html>\n
\\x6e95dbcbc1b468a671a25e21b7077de2b5b5edf61b707d5299a0da46d8d40b17	97428372-fe10-4937-957f-34a767d572e4
\\x74c25e4c83f53b58fd582c04d91c6c349318d7749fd9d8147bbccdd3ed4dd497	/snake
\\x782336fb5d76674b47d339a2a0d8e19c6a8401d68fd2efd54f699e22d44c8757	3554e3d4-a96e-4a80-9458-6616cad959e9
\\x7cad0a349d44ecc56dc57421e3059488ad22cd3795a363e707061950f598d840	var w = $("#"+id);\n\nw.append(widget('s:board'));
\\x81a3eb3e0a1f465d6ca1b4af56ffe7d784000af06f09d8735bde40a1b4d13bc5	1131bd6e-e919-4e83-bc3e-6c95eb96f46d
\\x859169b38185780daa5497983ff20d2994390058d8a71f2847ac7846f970971e	board
\\x937ce8a5020c0f48d2415cae47a9e2d8cf82f60315ec9fd76a3b81451d3a415c	var w = $("#"+id);\n\n// constants\nvar BOARD_WIDTH = 20;\nvar BOARD_HEIGHT = 20;\nvar PIECE_SIZE = 20;\n\n// setup\nw.css('width', PIECE_SIZE + 'px');\nw.css('height', PIECE_SIZE + 'px');\n\nvar x, y;\n\nfunction draw () {\n\tx = Math.floor(Math.random() * BOARD_WIDTH);\n\ty = Math.floor(Math.random() * BOARD_HEIGHT);\n\n    w.css('left', x * PIECE_SIZE + 'px');\n    w.css('top', y * PIECE_SIZE + 'px');\n    \n    w.data('x',x);\n    w.data('y',y);\n}\n\nw.closest('.game').bind('piece_eaten', draw);\ndraw();\n
\\x9725d9ef8664cdefd6d4982c7f2482da41015bf80c20fc7410c4a6f1bb677473	var w = $("#"+id);\n\n// constants\nvar config = {\n    'BOARD_WIDTH': 50,\n    'BOARD_HEIGHT': 30,\n    'PIECE_SIZE': 20,\n    'SPEED': 100\n}\n\nw.append(widget('s:board', { config: config }));\n
\\xa463f326200cea45e45279851097378a78ccbf3f2fe393f2e7b05fc3ce86dc3e	var w = $("#"+id);\n\n// constants\nvar BOARD_WIDTH = 20;\nvar BOARD_HEIGHT = 20;\nvar PIECE_SIZE = 20;\n\n// setup\nw.css('width', PIECE_SIZE + 'px');\nw.css('height', PIECE_SIZE + 'px');\n\nw.css('left', x * PIECE_SIZE + 'px');\nw.css('top', y * PIECE_SIZE + 'px');\n
\\xa837bad123ff356e654ca27afdebfa46e5afbb16694bc5a58976e3c4dde1b39c	tail_piece
\\xa8ae5aa90a94d908fc7ab35b18702a301e9378f83386f49d4b1dc63c0502a34f	<div id="{{= id }}" class="{{= name }}">\n</div>
\\xa93b0cbe2c2fd495754a18ab0a2b42b2a8605e046ffd76398978cf57b662cacc	var w = $("#"+id);\n\nw.css('width', config.BOARD_WIDTH * config.PIECE_SIZE + 'px');\nw.css('height', config.BOARD_HEIGHT * config.PIECE_SIZE + 'px');\n\n/*\nfor (var i=0;i<50;i++) {\n    for (var j=0;j<50;j++) {\n        w.append(widget('s:square', { x: i, y: j }));\n    }\n}\n*/\nw.append(widget('s:snake', { config: config }));\nw.append(widget('s:food', { config: config }));
\\xac940faf04fd4410cdf6be2bfc28789e44c8e58203a9b7f3ecdc21a13ca577b2	var w = $("#"+id);\n\n// setup\nw.css('width', config.PIECE_SIZE + 'px');\nw.css('height', config.PIECE_SIZE + 'px');\n\nw.css('left', x * config.PIECE_SIZE + 'px');\nw.css('top', y * config.PIECE_SIZE + 'px');\n\nw.attr('data-xpos',x);\nw.attr('data-ypos',y);\n
\\xb2e42c400317c5fc398693ea93ff1cf33ba3181bcc89036bff8391b36ee96359	var w = $("#"+id);\n\n// setup\nw.css('width', config.PIECE_SIZE + 'px');\nw.css('height', config.PIECE_SIZE + 'px');\n\nvar x, y;\n\nfunction draw (e, tail) {\n    var tail_collission = false;\n    \n    do {\n        x = Math.floor(Math.random() * config.BOARD_WIDTH);\n        y = Math.floor(Math.random() * config.BOARD_HEIGHT);\n\n        for (var i=0;i<tail.length;i++) {\n            if (x == tail[i].x && y == tail[i].y)\n                tail_collision = true;\n        }\n    } while (tail_collission == true);\n\n    w.css('left', x * config.PIECE_SIZE + 'px');\n    w.css('top', y * config.PIECE_SIZE + 'px');\n    \n    w.data('x',x);\n    w.data('y',y);\n}\n\nw.closest('.game').bind('piece_eaten', draw);\ndraw(null, Array());\n
\\xb759721d70233a8787e55df98fbc38778b70d9610931c406fd18fb5bfb161d0d	666d5961-1263-4290-b672-e7d58d8b078e
\\xc1f026582fe6e8cb620d0c85a72fe421ddded756662a8ec00ed4c297ad10676b	food
\\xc2e464697bc0384335dff62d78b559e4f14549ed0ce814ee2eced17e43e356b7	94438cca-7073-4440-85d4-7a28576d7ed1
\\xc5f0ceb4a5d3eb7418400573ea8b58f545c32023ed1ba23353fcce7bc36ff258	/snake_route
\\xd0ce8d1950f84fa2ba045783ed9f318cf9dff1543985b3fcbb2f530760327265	{\n    "title": "Snake!",\n    "bundles": [\n        { "name": "org.aquameta.core.ide", "alias": "ide" },\n        { "name": "org.aquameta.games.snake", "alias": "s" }\n    ],\n    "widgets": [ "s:game", "ide:debugger3_manager" ]\n}
\\xd20bfd51ea0f486e6b853e469e38d67a165bc994a64d02c1b794123726a713dc	var w = $("#"+id);\n\n// constants\nvar config = {\n    'BOARD_WIDTH': 20,\n    'BOARD_HEIGHT': 20,\n    'PIECE_SIZE': 20,\n    'SPEED': 100\n}\n\nw.append(widget('s:board', { config: config }));\n
\\xdd2741e2734916143a6dbf1d1939cbc04396f10356faf54aba282066cec41b5f	944b5a05-be70-45a1-a549-1301d38799e4
\\xdd3ddbe7ca2177f03d25b99b7e8359f52048dd59637c343cd1d3ef6d4e91cb32	{\n    title: "Snake!",\n    bundles: {},\n    widgets: {}\n}
\\xde19e8ba75bf664722e4e5c6b8e7046f0727217a18f9b5dd1b62723acda9bdc7	/snake2
\\xe253963f1b3eac60df9ad4ef26490bcba6a38b6afbbe58c20e5ebbda9bc72f94	.{{= name }} {\n    position: absolute;\n    background-color: blue;\n    \n}
\\xe27ec3373eab95915f0271f843d582b75e1edacb859d436ba4b4aacb352efdb5	.{{= name }} {\n    width: 800px;\n    height: 600px;\n    border: 5px dotted red;\n}
\\xe4b08665b2511bc86ca7cf1116f4a4df34ec5c7f0a19329e166cd8a00e862382	return {};
\\xe5b98fa1fc9ed7d8d1b2f219c1117f55b8a8a14c7b4f702ac2db617b97783ed9	66511858-1f9f-4214-9868-68af32699d1b
\\xe70890fe64bb315acc08a6e59f1ff24074d4c348ca53a892990da39cc1445a61	<!DOCTYPE html>\n<html lang="en">\n    <head>\n        <script src='/system.js'></script>\n        <title>Aquameta</title>\n        <meta http-equiv="Content-type" content="text/html; charset=utf-8">\n        <meta name="viewport" content="width=device-width">\n\n\n\n        <link href='//fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>\n        <style>\n            html {\n                box-sizing: border-box;\n                background-color: black;\n                color: white;\n            }\n            *, *:before, *:after {\n                box-sizing: inherit;\n            }\n            body {\n                font-family: 'Open Sans', sans-serif;\n            }\n            html, body {\n                height: 100%;\n                margin: 0;\n            }\n        </style>\n    </head>\n    <body></body>\n    <script>\n        System.import('/widget.js').then(function(widget) {\n\n            var db = new AQ.Database('/endpoint/0.1', { evented: 'no' });\n            window.endpoint = db;\n\n            AQ.Widget.import('org.aquameta.core.ide', 'core', db);\n            AQ.Widget.import('org.aquameta.core.ide', 'ide', db);\n            AQ.Widget.import('org.aquameta.games.snake', 's', db);\n\n            $('body').append(widget('s:game'));\n            $('body').append(widget('ide:debugger3_manager'));\n\n        });\n    </script>\n</html>\n
\\xf13bbad0d674b460ef96e81f31ed8395ca698bcc32db72a64df47f7e9a0944a9	<div id="{{= id }}" class="{{= name }}">\n    \n</div>
\\xf1a7321f73455db20ee00b8d063a848e3628dc1c1e8d9aaf511c85d96cf9dbae	var w = $("#"+id);\n\n// constants\nvar config = {\n    'BOARD_WIDTH': 70,\n    'BOARD_HEIGHT': 40,\n    'PIECE_SIZE': 10,\n    'SPEED': 100\n}\n\nw.append(widget('s:board', { config: config }));\n\nw.bind('game_over', function() {\n    w.append(widget('s:game_over'));\n});
\\xf1e95785a705ccea39764e31b2f077f5e6e3c380970be62621179ef61a0790cc	var w = $("#"+id);\n\nvar x_pos = 10;\nvar y_pos = 10;\nvar x_dir = 1, y_dir = 0;\nvar tail = Array({x_pos, y_pos});\ngame_over = false;\n\n\nfunction reverse() {\n    console.log('reverse!');\n\n    tail.reverse();\n\n\t// direction\n    if (tail.length > 2) {\n        x_dir = tail[0].x - tail[1].x;\n        y_dir = tail[0].y - tail[1].y;\n    } else {\n        x_dir = x_dir * -1;\n        y_dir = y_dir * -1;\n    }\n\n    \n    x_pos = tail[0].x;\n    y_pos = tail[0].y;\n}\n\n\nfunction draw() {\n    // update position\n    x_pos += x_dir;\n    y_pos += y_dir;\n\n    // check for collission\n    if (x_pos < 0 || x_pos >= config.BOARD_WIDTH || y_pos < 0 || y_pos >= config.BOARD_HEIGHT) {\n        game_over_f();\n        return;\n    }\n\n    for (var i=0;i<tail.length;i++) {\n        if (x_pos == tail[i].x && y_pos == tail[i].y) {\n            game_over_f();\n            return;\n        }\n    }\n\n    // add to tail\n    tail.unshift({ x: x_pos, y: y_pos });\n\n    // redraw\n    w.css('left', x_pos * 20 + 'px');\n    w.css('top', y_pos * 20 + 'px');\n\n    // check for food\n    var food_x = $('.food').data('x');\n    var food_y = $('.food').data('y');\n\n    if (food_x == x_pos && food_y == y_pos) {\n        w.trigger('piece_eaten', { tail: tail } );\n    } else {\n        // remove tail piece\n        tail.splice(-1);\n    }\n\n    // tail\n    $(document).find('.tail_piece').remove();\n    for (var i=1;i<tail.length;i++) {\n        w.closest('.board').append(widget('s:tail_piece', { x: tail[i].x, y: tail[i].y, config: config }));\n    }\n\n    if (!game_over) {\n        setTimeout(draw, config.SPEED);\n    }\n}\n\n\nfunction game_over_f() {\n    alert ('BOOM!');\n    w.trigger('game_over');\n    game_over = true;\n}\n\n\njwerty.key('↑', function() { x_dir = 0; y_dir = -1 });\njwerty.key('↓', function() { x_dir = 0; y_dir = 1; });\njwerty.key('←', function() { x_dir = -1; y_dir = 0; });\njwerty.key('→', function() { x_dir = 1; y_dir = 0 });\njwerty.key('r', reverse);\n\ndraw();\n
\\xfbf648a0c5b3e39d32d118ae90f21f3e386baded7fb14e56a29747cf6daa5279	.{{= name }} {\n    border: 5px dotted red;\n}
